<?php
 namespace Alipay; use Alipay\Exception\AlipayErrorResponseException; use Alipay\Exception\AlipayInvalidResponseException; class AlipayResponse { const SIGN_NODE = 'sign'; const ERROR_NODE = 'error_response'; protected $raw; protected $parsed; public function __construct($raw, $data) { $this->raw = $raw; $this->parsed = $data; } public function stripData() { $nodeName = current(array_keys($this->parsed)); $nodeIndex = strpos($this->raw, $nodeName); $signDataStartIndex = $nodeIndex + strlen($nodeName) + 2; $signIndex = strrpos($this->raw, '"' . static::SIGN_NODE . '"'); $signDataEndIndex = $signIndex - 1; $indexLen = $signDataEndIndex - $signDataStartIndex; if ($indexLen < 0) { throw new AlipayInvalidResponseException($this->raw, 'Response data not found'); } return substr($this->raw, $signDataStartIndex, $indexLen); } public function getSign() { if (isset($this->parsed[static::SIGN_NODE])) { return $this->parsed[static::SIGN_NODE]; } throw new AlipayInvalidResponseException($this->raw, 'Response sign not found'); } public function getData($assoc = true) { if ($this->isSuccess() === false) { throw new AlipayErrorResponseException($this->getError()); } $result = $this->getFirstElement(); if ($assoc == false) { $result = (object) ($result); } return $result; } public function getRaw() { return $this->raw; } protected function getFirstElement() { $data = array_reverse($this->parsed); return array_pop($data); } public function isSuccess() { if (isset($this->parsed[static::ERROR_NODE])) { return false; } $data = $this->getFirstElement(); return !isset($data['code']) || empty($data['code']) || $data['code'] == '10000'; } public function getError($assoc = true) { if ($this->isSuccess()) { return null; } if (isset($this->parsed[static::ERROR_NODE])) { $result = $this->parsed[static::ERROR_NODE]; } else { $result = $this->getFirstElement(); } if ($assoc == false) { $result = (object) ($result); } return $result; } } 
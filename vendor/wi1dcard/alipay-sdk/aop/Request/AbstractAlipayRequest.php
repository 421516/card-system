<?php
 namespace Alipay\Request; use Alipay\AlipayAccessorTrait; abstract class AbstractAlipayRequest { use AlipayAccessorTrait; protected $apiParams = []; public $arrayAsJson = true; protected $notifyUrl; protected $returnUrl; protected $authToken; protected $appAuthToken; public function __construct($config = []) { foreach ($config as $key => $value) { $this->$key = $value; } } public function __destruct() { } public static function className($shorten = false) { $class = get_called_class(); if ($shorten) { $class = (new \ReflectionClass($class))->getShortName(); } return $class; } public static function getApiMethodName() { $api = static::className(true); $api = preg_replace('/Request$/', '', $api); $api = preg_replace('/([A-Z])/s', '.$1', $api); $api = trim($api, '.'); $api = strtolower($api); return $api; } public static function getTimestamp() { return date('Y-m-d H:i:s'); } public function getApiParams() { return $this->apiParams; } public function getNotifyUrl() { return $this->notifyUrl; } public function setNotifyUrl($notifyUrl) { $this->notifyUrl = $notifyUrl; } public function getReturnUrl() { return $this->returnUrl; } public function setReturnUrl($returnUrl) { $this->returnUrl = $returnUrl; } public function getAuthToken() { return $this->authToken; } public function setAuthToken($authToken) { $this->authToken = $authToken; } public function getAppAuthToken() { return $this->appAuthToken; } public function setAppAuthToken($appAuthToken) { $this->appAuthToken = $appAuthToken; } } 
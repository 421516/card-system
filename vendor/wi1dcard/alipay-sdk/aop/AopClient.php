<?php
 namespace Alipay; use Alipay\Exception\AlipayBase64Exception; use Alipay\Exception\AlipayInvalidSignException; use Alipay\Exception\AlipayOpenSslException; use Alipay\Key\AlipayKeyPair; use Alipay\Request\AbstractAlipayRequest; use Alipay\Signer\AlipayRSA2Signer; use Alipay\Signer\AlipaySigner; class AopClient { const SDK_VERSION = 'alipay-sdk-php-20180705'; const API_VERSION = '1.0'; protected $appId; protected $signer; protected $requester; protected $parser; protected $keyPair; public function __construct( $appId, AlipayKeyPair $keyPair, AlipaySigner $signer = null, AlipayRequester $requester = null, AlipayResponseFactory $parser = null ) { $this->appId = $appId; $this->keyPair = $keyPair; $this->signer = $signer === null ? new AlipayRSA2Signer() : $signer; $this->requester = $requester === null ? new AlipayCurlRequester() : $requester; $this->parser = $parser === null ? new AlipayResponseFactory() : $parser; } public function build(AbstractAlipayRequest $request) { $sysParams = []; $sysParams['app_id'] = $this->appId; $sysParams['version'] = static::API_VERSION; $sysParams['alipay_sdk'] = static::SDK_VERSION; $sysParams['charset'] = $this->requester->getCharset(); $sysParams['format'] = $this->parser->getFormat(); $sysParams['sign_type'] = $this->signer->getSignType(); $sysParams['method'] = $request->getApiMethodName(); $sysParams['timestamp'] = $request->getTimestamp(); $sysParams['notify_url'] = $request->getNotifyUrl(); $sysParams['return_url'] = $request->getReturnUrl(); $sysParams['auth_token'] = $request->getAuthToken(); $sysParams['app_auth_token'] = $request->getAppAuthToken(); $apiParams = $request->getApiParams(); $totalParams = array_merge($apiParams, $sysParams); if ($request->arrayAsJson) { foreach ($totalParams as &$param) { if (is_array($param) || is_object($param)) { $param = json_encode($param, JSON_UNESCAPED_UNICODE); } } unset($param); } $totalParams['sign'] = $this->signer->generateByParams( $totalParams, $this->keyPair->getPrivateKey()->asResource() ); return $totalParams; } public function request($params) { $raw = $this->requester->execute($params); $response = $this->parser->parse($raw); $this->signer->verify( $response->getSign(), $response->stripData(), $this->keyPair->getPublicKey()->asResource() ); return $response; } public function execute(AbstractAlipayRequest $request) { $params = $this->build($request); $response = $this->request($params); return $response; } public function sdkExecute(AbstractAlipayRequest $request) { $params = $this->build($request); return http_build_query($params); } public function pageExecuteUrl(AbstractAlipayRequest $request) { $queryParams = $this->build($request); $url = $this->requester->getGateway() . '?' . http_build_query($queryParams); return $url; } public function pageExecuteForm(AbstractAlipayRequest $request) { $fields = $this->build($request); $html = "<form id='alipaysubmit' name='alipaysubmit' action='{$this->requester->getUrl()}' method='POST'>"; foreach ($fields as $key => $value) { if (AlipayHelper::isEmpty($value)) { continue; } $value = htmlentities($value, ENT_QUOTES | ENT_HTML5); $html .= "<input type='hidden' name='{$key}' value='{$value}'/>"; } $html .= "<input type='submit' value='ok' style='display:none;'></form>"; $html .= "<script>document.forms['alipaysubmit'].submit();</script>"; return $html; } public function verify($params = null) { if ($params === null) { $params = $_POST; } try { $this->signer->verifyByParams( $params, $this->keyPair->getPublicKey()->asResource() ); } catch (AlipayInvalidSignException $ex) { return false; } catch (\InvalidArgumentException $ex) { return false; } return true; } public static function decrypt($encryptedData, $encodedKey, $cipher = 'aes-128-cbc') { $key = base64_decode($encodedKey); if ($key === false) { throw new AlipayBase64Exception($encodedKey); } if (!in_array($cipher, openssl_get_cipher_methods(), true)) { throw new AlipayOpenSslException("Cipher algorithm {$cipher} not available"); } $result = openssl_decrypt($encryptedData, $cipher, $key); if ($result === false) { throw new AlipayOpenSslException(); } return $result; } public function getAppId() { return $this->appId; } public function getKeyPair() { return $this->keyPair; } public function getParser() { return $this->parser; } public function getRequester() { return $this->requester; } public function getSigner() { return $this->signer; } } 
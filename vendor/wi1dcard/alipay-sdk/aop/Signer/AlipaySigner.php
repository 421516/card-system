<?php
 namespace Alipay\Signer; use Alipay\AlipayHelper; use Alipay\Exception\AlipayBase64Exception; use Alipay\Exception\AlipayInvalidSignException; use Alipay\Exception\AlipayOpenSslException; abstract class AlipaySigner { const SIGN_PARAM = 'sign'; const SIGN_TYPE_PARAM = 'sign_type'; public function generate($data, $privateKey) { $result = openssl_sign($data, $sign, $privateKey, $this->getSignAlgo()); if ($result === false) { throw new AlipayOpenSslException(); } return base64_encode($sign); } public function generateByParams($params, $privateKey) { $data = $this->convertSignData($params); return $this->generate($data, $privateKey); } public function verify($sign, $data, $publicKey) { $decodedSign = base64_decode($sign, true); if ($decodedSign === false) { throw new AlipayBase64Exception($sign); } $result = openssl_verify($data, $decodedSign, $publicKey, $this->getSignAlgo()); switch ($result) { case 1: break; case 0: throw new AlipayInvalidSignException($sign, $data); case -1: default: throw new AlipayOpenSslException(); } } public function verifyByParams($params, $publicKey) { if (!isset($params[static::SIGN_PARAM]) || !isset($params[static::SIGN_TYPE_PARAM])) { throw new \InvalidArgumentException('Missing signature arguments'); } $sign = $params[static::SIGN_PARAM]; $signType = $params[static::SIGN_TYPE_PARAM]; unset($params[static::SIGN_PARAM], $params[static::SIGN_TYPE_PARAM]); if ($signType !== $this->getSignType()) { throw new \InvalidArgumentException("Sign type didn't match, expect {$this->getSignType()}, {$signType} given"); } $data = $this->convertSignData($params); $this->verify($sign, $data, $publicKey); return $params; } protected function convertSignData($params) { ksort($params); $stringToBeSigned = ''; foreach ($params as $k => $v) { $v = @(string) $v; if (AlipayHelper::isEmpty($v) || $v[0] === '@') { continue; } $stringToBeSigned .= "&{$k}={$v}"; } $stringToBeSigned = substr($stringToBeSigned, 1); return $stringToBeSigned; } abstract public function getSignType(); abstract public function getSignAlgo(); } 
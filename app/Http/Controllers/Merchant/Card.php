<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp0fc69c, $sp0e5f61 = false, $sp91aa34 = false, $sp1538ad = false) { $sp3f78ce = $this->authQuery($sp0fc69c, \App\Card::class)->with(array('product' => function ($sp3f78ce) { $sp3f78ce->select(array('id', 'name')); })); $sp5c7997 = $sp0fc69c->post('search', false); $sp5f3104 = $sp0fc69c->post('val', false); if ($sp5c7997 && $sp5f3104) { if ($sp5c7997 == 'id') { $sp3f78ce->where('id', $sp5f3104); } else { $sp3f78ce->where($sp5c7997, 'like', '%' . $sp5f3104 . '%'); } } $sp3c5594 = (int) $sp0fc69c->post('category_id'); $spedd229 = $sp0fc69c->post('product_id', -1); if ($sp3c5594 > 0) { if ($spedd229 > 0) { $sp3f78ce->where('product_id', $spedd229); } else { $sp3f78ce->whereHas('product', function ($sp3f78ce) use($sp3c5594) { $sp3f78ce->where('category_id', $sp3c5594); }); } } $sp1a65a5 = $sp0fc69c->post('status'); if (strlen($sp1a65a5)) { $sp3f78ce->whereIn('status', explode(',', $sp1a65a5)); } $sp584ac4 = (int) $sp0fc69c->post('onlyCanSell'); if ($sp584ac4) { $sp3f78ce->whereRaw('`count_all`>`count_sold`'); } $spdb2534 = $sp0fc69c->post('type'); if (strlen($spdb2534)) { $sp3f78ce->whereIn('type', explode(',', $spdb2534)); } $spf844ce = $sp0fc69c->post('trashed') === 'true'; if ($spf844ce) { $sp3f78ce->onlyTrashed(); } $sp3f78ce->orderByRaw('product_id,type,status'); if ($sp0e5f61 === true) { $sp667d93 = ''; $sp3f78ce->chunk(100, function ($spdaad30) use(&$sp667d93) { foreach ($spdaad30 as $sp0c5ad3) { $sp667d93 .= $sp0c5ad3->card . '
'; } }); $sp4687d5 = 'export_cards_' . $this->getUserIdOrFail($sp0fc69c) . '_' . date('YmdHis') . '.txt'; $spcf3029 = 'card_export/' . $sp4687d5; $sp5fbad2 = System::_get('storage_driver'); try { if (!Storage::disk($sp5fbad2)->put($spcf3029, $sp667d93)) { return Response::fail('文件生成失败'); } } catch (\Exception $sp2a4a9a) { \Log::error('Card.export Exception: ' . $sp2a4a9a->getMessage()); if (config('app.debug')) { return Response::fail($sp2a4a9a->getMessage()); } else { return Response::fail('生成文件失败, 内部错误, 请联系客服'); } } $spd95ff1 = \App\File::insertGetId(array('user_id' => $this->getUserIdOrFail($sp0fc69c), 'driver' => $sp5fbad2, 'path' => $spcf3029, 'url' => Storage::disk($sp5fbad2)->url($spcf3029))); if ($spd95ff1 <= 0) { return Response::fail('数据库繁忙，插入文件记录失败'); } return Response::success($spd95ff1); } else { if ($sp91aa34 === true) { if ($spf844ce) { $sp3f78ce->forceDelete(); } else { $sp3f78ce->delete(); } return Response::success(); } else { if ($spf844ce && $sp1538ad === true) { $sp3f78ce->restore(); return Response::success(); } else { $sp73a73e = $sp0fc69c->post('current_page', 1); $spfc5387 = $sp0fc69c->post('per_page', 20); $sp36eb9c = $sp3f78ce->paginate($spfc5387, array('*'), 'page', $sp73a73e); return Response::success($sp36eb9c); } } } } function export(Request $sp0fc69c) { return self::get($sp0fc69c, true); } function export_download($spd95ff1) { $sp81e22c = \App\File::findOrFail($spd95ff1); $sp3353ce = Auth::getUser(); if ($sp3353ce->role !== 'admin' && $sp3353ce->id !== $sp81e22c->user_id) { $sp667d93 = 'Access Denied'; $spe6749d = 'your_are_sb.txt'; } else { $sp5fbad2 = System::_get('storage_driver'); $sp667d93 = Storage::disk($sp5fbad2)->get($sp81e22c->path); $spe6749d = pathinfo($sp81e22c->path, PATHINFO_BASENAME); Storage::disk($sp5fbad2)->delete($sp81e22c->path); try { $sp81e22c->delete(); } catch (\Exception $sp2a4a9a) { } } $spdbbeeb = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $spe6749d), 'Content-Length' => strlen($sp667d93)); return response()->make($sp667d93, 200, $spdbbeeb); } function trash(Request $sp0fc69c) { $spf179c6 = $sp0fc69c->post('ids', ''); if (strlen($spf179c6) < 1) { return Response::forbidden(); } $this->authQuery($sp0fc69c, \App\Card::class)->whereIn('id', explode(',', $spf179c6))->delete(); return Response::success(); } function deleteTrashed(Request $sp0fc69c) { $spf179c6 = $sp0fc69c->post('ids', ''); if (strlen($spf179c6) < 1) { return Response::forbidden(); } $this->authQuery($sp0fc69c, \App\Card::class)->whereIn('id', explode(',', $spf179c6))->forceDelete(); return Response::success(); } function deleteAll(Request $sp0fc69c) { return $this->get($sp0fc69c, false, true); } function restoreTrashed(Request $sp0fc69c) { $spf179c6 = $sp0fc69c->post('ids', ''); if (strlen($spf179c6) < 1) { return Response::forbidden(); } $sp3f78ce = $this->authQuery($sp0fc69c, \App\Card::class); $sp3f78ce->whereIn('id', explode(',', $spf179c6))->restore(); return Response::success(); } function restoreAll(Request $sp0fc69c) { return $this->get($sp0fc69c, false, false, true); } function add(Request $sp0fc69c) { $spedd229 = (int) $sp0fc69c->post('product_id'); $spdaad30 = $sp0fc69c->post('card'); $sp1a65a5 = \App\Card::STATUS_NORMAL; $spdb2534 = (int) $sp0fc69c->post('type', \App\Card::TYPE_ONETIME); $sp9b3fd6 = $sp0fc69c->post('is_check') === 'true'; if (str_contains($spdaad30, '<') || str_contains($spdaad30, '>')) { return Response::fail('卡密不能用 < 或 > 分割'); } if (\App\Card::where('user_id', \Auth::id())->where('status', \App\Card::STATUS_NORMAL)->count() > 10000) { return Response::fail('您的库存卡密已经超过10000张，本次添加失败'); } $spcf7f28 = $this->authQuery($sp0fc69c, \App\Product::class)->findOrFail($spedd229); if ($spdb2534 === \App\Card::TYPE_REPEAT) { if ($sp9b3fd6) { if (\App\Card::where('product_id', $spedd229)->where('card', $spdaad30)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spcf7f28->buy_max = 1; $spcf7f28->saveOrFail(); $sp0c5ad3 = new \App\Card(); $sp0c5ad3->user_id = $this->getUserIdOrFail($sp0fc69c); $sp0c5ad3->product_id = $spedd229; $sp0c5ad3->card = $spdaad30; $sp0c5ad3->type = $spdb2534; $sp0c5ad3->status = $sp1a65a5; $sp0c5ad3->count_sold = 0; $sp0c5ad3->count_all = (int) $sp0fc69c->post('count_all', 1); if ($sp0c5ad3->count_all < 1 || $sp0c5ad3->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp0c5ad3->saveOrFail(); } else { $sp6b4851 = explode('
', $spdaad30); $sp5e3b69 = count($sp6b4851); $sp823d90 = 50; if ($sp5e3b69 > $sp823d90) { return Response::fail('每次添加不能超过 ' . $sp823d90 . ' 张'); } $sp382cd7 = array(); $sp667d93 = ''; for ($sp1b7341 = 0; $sp1b7341 < $sp5e3b69; $sp1b7341++) { $sp0c5ad3 = trim($sp6b4851[$sp1b7341]); if (strlen($sp0c5ad3) < 1) { continue; } if (strlen($sp0c5ad3) > 100) { return Response::fail('第 ' . $sp1b7341 . ' 张卡密 ' . $sp0c5ad3 . ' 长度错误<br>卡密最大长度为100'); } if ($sp9b3fd6) { if (in_array($sp0c5ad3, $sp382cd7)) { continue; } $sp382cd7[] = $sp0c5ad3; } if ($sp667d93 === '') { $sp667d93 .= $sp0c5ad3; } else { $sp667d93 .= '<' . $sp0c5ad3; } } if ($sp667d93 === '') { return Response::fail('请输入合法的卡密'); } try { \App\Card::add_cards($this->getUserIdOrFail($sp0fc69c), $spedd229, $spdb2534, $sp1a65a5, $sp667d93, $sp9b3fd6); } catch (\Exception $sp2a4a9a) { \Log::error('add_cards, function fatal error: ', array('exception' => $sp2a4a9a)); return Response::fail($sp2a4a9a->getMessage()); } } return Response::success(); } function edit(Request $sp0fc69c) { $spfc3b4d = (int) $sp0fc69c->post('id'); $sp0c5ad3 = $sp0fc69c->post('card'); $spdb2534 = (int) $sp0fc69c->post('type', \App\Card::TYPE_ONETIME); $sp356855 = $this->authQuery($sp0fc69c, \App\Card::class)->findOrFail($spfc3b4d); if ($sp356855) { $sp356855->card = $sp0c5ad3; $sp356855->type = $spdb2534; if ($spdb2534 === \App\Card::TYPE_REPEAT) { $spcf7f28 = $sp356855->product; $spcf7f28->buy_max = 1; $spcf7f28->saveOrFail(); $sp356855->count_all = (int) $sp0fc69c->post('count_all', 1); } else { $sp356855->count_all = 1; } $sp356855->saveOrFail(); } return Response::success(); } }
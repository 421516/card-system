<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp2d83a6, $sp7008f4 = false, $sp842e77 = false, $spce56b5 = false) { $spedc15a = $this->authQuery($sp2d83a6, \App\Card::class)->with(array('product' => function ($spedc15a) { $spedc15a->select(array('id', 'name')); })); $sp53975f = $sp2d83a6->post('search', false); $spffa78a = $sp2d83a6->post('val', false); if ($sp53975f && $spffa78a) { if ($sp53975f == 'id') { $spedc15a->where('id', $spffa78a); } else { $spedc15a->where($sp53975f, 'like', '%' . $spffa78a . '%'); } } $spd8dba1 = (int) $sp2d83a6->post('category_id'); $spd09702 = $sp2d83a6->post('product_id', -1); if ($spd8dba1 > 0) { if ($spd09702 > 0) { $spedc15a->where('product_id', $spd09702); } else { $spedc15a->whereHas('product', function ($spedc15a) use($spd8dba1) { $spedc15a->where('category_id', $spd8dba1); }); } } $spd4997e = $sp2d83a6->post('status'); if (strlen($spd4997e)) { $spedc15a->whereIn('status', explode(',', $spd4997e)); } $spffbbe0 = (int) $sp2d83a6->post('onlyCanSell'); if ($spffbbe0) { $spedc15a->whereRaw('`count_all`>`count_sold`'); } $spcbde7f = $sp2d83a6->post('type'); if (strlen($spcbde7f)) { $spedc15a->whereIn('type', explode(',', $spcbde7f)); } $sp1e1b2b = $sp2d83a6->post('trashed') === 'true'; if ($sp1e1b2b) { $spedc15a->onlyTrashed(); } $spedc15a->orderByRaw('product_id,type,status'); if ($sp7008f4 === true) { $spccd981 = ''; $spedc15a->chunk(100, function ($sp483e71) use(&$spccd981) { foreach ($sp483e71 as $spc69d52) { $spccd981 .= $spc69d52->card . '
'; } }); $sp83202a = 'export_cards_' . $this->getUserIdOrFail($sp2d83a6) . '_' . date('YmdHis') . '.txt'; $spdc50fb = 'card_export/' . $sp83202a; $spa6384d = System::_get('storage_driver'); try { if (!Storage::disk($spa6384d)->put($spdc50fb, $spccd981)) { return Response::fail('文件生成失败'); } } catch (\Exception $spfda1c7) { \Log::error('Card.export Exception: ' . $spfda1c7->getMessage()); if (config('app.debug')) { return Response::fail($spfda1c7->getMessage()); } else { return Response::fail('生成文件失败, 内部错误, 请联系客服'); } } $spf02ef1 = \App\File::insertGetId(array('user_id' => $this->getUserIdOrFail($sp2d83a6), 'driver' => $spa6384d, 'path' => $spdc50fb, 'url' => Storage::disk($spa6384d)->url($spdc50fb))); if ($spf02ef1 <= 0) { return Response::fail('数据库繁忙，插入文件记录失败'); } return Response::success($spf02ef1); } else { if ($sp842e77 === true) { if ($sp1e1b2b) { $spedc15a->forceDelete(); } else { $spedc15a->delete(); } return Response::success(); } else { if ($sp1e1b2b && $spce56b5 === true) { $spedc15a->restore(); return Response::success(); } else { $sp9ca635 = $sp2d83a6->post('current_page', 1); $spb53279 = $sp2d83a6->post('per_page', 20); $sp8ea0e0 = $spedc15a->paginate($spb53279, array('*'), 'page', $sp9ca635); return Response::success($sp8ea0e0); } } } } function export(Request $sp2d83a6) { return self::get($sp2d83a6, true); } function export_download($spf02ef1) { $sp4adaf0 = \App\File::findOrFail($spf02ef1); $spc6e0c5 = Auth::getUser(); if ($spc6e0c5->role !== 'admin' && $spc6e0c5->id !== $sp4adaf0->user_id) { $spccd981 = 'Access Denied'; $sp31cbda = 'your_are_sb.txt'; } else { $spa6384d = System::_get('storage_driver'); $spccd981 = Storage::disk($spa6384d)->get($sp4adaf0->path); $sp31cbda = pathinfo($sp4adaf0->path, PATHINFO_BASENAME); Storage::disk($spa6384d)->delete($sp4adaf0->path); try { $sp4adaf0->delete(); } catch (\Exception $spfda1c7) { } } $sp955824 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp31cbda), 'Content-Length' => strlen($spccd981)); return response()->make($spccd981, 200, $sp955824); } function trash(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } $this->authQuery($sp2d83a6, \App\Card::class)->whereIn('id', explode(',', $sp1b3f11))->delete(); return Response::success(); } function deleteTrashed(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } $this->authQuery($sp2d83a6, \App\Card::class)->whereIn('id', explode(',', $sp1b3f11))->forceDelete(); return Response::success(); } function deleteAll(Request $sp2d83a6) { return $this->get($sp2d83a6, false, true); } function restoreTrashed(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } $spedc15a = $this->authQuery($sp2d83a6, \App\Card::class); $spedc15a->whereIn('id', explode(',', $sp1b3f11))->restore(); return Response::success(); } function restoreAll(Request $sp2d83a6) { return $this->get($sp2d83a6, false, false, true); } function add(Request $sp2d83a6) { $spd09702 = (int) $sp2d83a6->post('product_id'); $sp483e71 = $sp2d83a6->post('card'); $spd4997e = \App\Card::STATUS_NORMAL; $spcbde7f = (int) $sp2d83a6->post('type', \App\Card::TYPE_ONETIME); $spf02f30 = $sp2d83a6->post('is_check') === 'true'; if (str_contains($sp483e71, '<') || str_contains($sp483e71, '>')) { return Response::fail('卡密不能用 < 或 > 分割'); } if (\App\Card::where('user_id', \Auth::id())->where('status', \App\Card::STATUS_NORMAL)->count() > 10000) { return Response::fail('您的库存卡密已经超过10000张，本次添加失败'); } $spb0ecc4 = $this->authQuery($sp2d83a6, \App\Product::class)->findOrFail($spd09702); if ($spcbde7f === \App\Card::TYPE_REPEAT) { if ($spf02f30) { if (\App\Card::where('product_id', $spd09702)->where('card', $sp483e71)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spb0ecc4->buy_max = 1; $spb0ecc4->saveOrFail(); $spc69d52 = new \App\Card(); $spc69d52->user_id = $this->getUserIdOrFail($sp2d83a6); $spc69d52->product_id = $spd09702; $spc69d52->card = $sp483e71; $spc69d52->type = $spcbde7f; $spc69d52->status = $spd4997e; $spc69d52->count_sold = 0; $spc69d52->count_all = (int) $sp2d83a6->post('count_all', 1); if ($spc69d52->count_all < 1 || $spc69d52->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spc69d52->saveOrFail(); } else { $sp7581fb = explode('
', $sp483e71); $sp22c413 = count($sp7581fb); $sp0a2c8c = 50; if ($sp22c413 > $sp0a2c8c) { return Response::fail('每次添加不能超过 ' . $sp0a2c8c . ' 张'); } $sp7b2032 = array(); $spccd981 = ''; for ($spcecaa9 = 0; $spcecaa9 < $sp22c413; $spcecaa9++) { $spc69d52 = trim($sp7581fb[$spcecaa9]); if (strlen($spc69d52) < 1) { continue; } if (strlen($spc69d52) > 100) { return Response::fail('第 ' . $spcecaa9 . ' 张卡密 ' . $spc69d52 . ' 长度错误<br>卡密最大长度为100'); } if ($spf02f30) { if (in_array($spc69d52, $sp7b2032)) { continue; } $sp7b2032[] = $spc69d52; } if ($spccd981 === '') { $spccd981 .= $spc69d52; } else { $spccd981 .= '<' . $spc69d52; } } if ($spccd981 === '') { return Response::fail('请输入合法的卡密'); } try { \App\Card::add_cards($this->getUserIdOrFail($sp2d83a6), $spd09702, $spcbde7f, $spd4997e, $spccd981, false); } catch (\Exception $spfda1c7) { \Log::error('add_cards, function fatal error: ', array('exception' => $spfda1c7)); return Response::fail($spfda1c7->getMessage()); } } return Response::success(); } function edit(Request $sp2d83a6) { $spe6149b = (int) $sp2d83a6->post('id'); $spc69d52 = $sp2d83a6->post('card'); $spcbde7f = (int) $sp2d83a6->post('type', \App\Card::TYPE_ONETIME); $sp1c59c9 = $this->authQuery($sp2d83a6, \App\Card::class)->findOrFail($spe6149b); if ($sp1c59c9) { $sp1c59c9->card = $spc69d52; $sp1c59c9->type = $spcbde7f; if ($spcbde7f === \App\Card::TYPE_REPEAT) { $spb0ecc4 = $sp1c59c9->product; $spb0ecc4->buy_max = 1; $spb0ecc4->saveOrFail(); $sp1c59c9->count_all = (int) $sp2d83a6->post('count_all', 1); } else { $sp1c59c9->count_all = 1; } $sp1c59c9->saveOrFail(); } return Response::success(); } }
<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp85ba11, $sp3827a6 = false, $spc1660a = false, $spacf5d8 = false) { $spfed6d4 = $this->authQuery($sp85ba11, \App\Card::class)->with(array('product' => function ($spfed6d4) { $spfed6d4->select(array('id', 'name')); })); $sp707db4 = $sp85ba11->input('search', false); $sp56c021 = $sp85ba11->input('val', false); if ($sp707db4 && $sp56c021) { if ($sp707db4 == 'id') { $spfed6d4->where('id', $sp56c021); } else { $spfed6d4->where($sp707db4, 'like', '%' . $sp56c021 . '%'); } } $sp7bb93d = (int) $sp85ba11->input('category_id'); $sp16cfd7 = $sp85ba11->input('product_id', -1); if ($sp7bb93d > 0) { if ($sp16cfd7 > 0) { $spfed6d4->where('product_id', $sp16cfd7); } else { $spfed6d4->whereHas('product', function ($spfed6d4) use($sp7bb93d) { $spfed6d4->where('category_id', $sp7bb93d); }); } } $sp7a1202 = $sp85ba11->input('status'); if (strlen($sp7a1202)) { $spfed6d4->whereIn('status', explode(',', $sp7a1202)); } $sp126b33 = (int) $sp85ba11->input('onlyCanSell'); if ($sp126b33) { $spfed6d4->whereRaw('`count_all`>`count_sold`'); } $sp65e297 = $sp85ba11->input('type'); if (strlen($sp65e297)) { $spfed6d4->whereIn('type', explode(',', $sp65e297)); } $sp153ccc = $sp85ba11->input('trashed') === 'true'; if ($sp153ccc) { $spfed6d4->onlyTrashed(); } if ($spc1660a === true) { if ($sp153ccc) { $spfed6d4->forceDelete(); } else { \App\Card::_trash($spfed6d4); } return Response::success(); } else { if ($sp153ccc && $spacf5d8 === true) { \App\Card::_restore($spfed6d4); return Response::success(); } else { $spfed6d4->orderByRaw('`product_id`,`type`,`status`,`id`'); if ($sp3827a6 === true) { $spa48aa8 = ''; $spfed6d4->chunk(100, function ($sp75215f) use(&$spa48aa8) { foreach ($sp75215f as $spb7019f) { $spa48aa8 .= $spb7019f->card . '
'; } }); $sp1c5baa = 'export_cards_' . $this->getUserIdOrFail($sp85ba11) . '_' . date('YmdHis') . '.txt'; $sp77ba0d = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp1c5baa), 'Content-Length' => strlen($spa48aa8)); return response()->make($spa48aa8, 200, $sp77ba0d); } $spefc91a = $sp85ba11->input('current_page', 1); $sp179110 = $sp85ba11->input('per_page', 20); $sp0ba550 = $spfed6d4->paginate($sp179110, array('*'), 'page', $spefc91a); return Response::success($sp0ba550); } } } function export(Request $sp85ba11) { return self::get($sp85ba11, true); } function trash(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string')); $sp92c7fe = $sp85ba11->post('ids'); $spfed6d4 = $this->authQuery($sp85ba11, \App\Card::class)->whereIn('id', explode(',', $sp92c7fe)); \App\Card::_trash($spfed6d4); return Response::success(); } function restoreTrashed(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string')); $sp92c7fe = $sp85ba11->post('ids'); $spfed6d4 = $this->authQuery($sp85ba11, \App\Card::class)->whereIn('id', explode(',', $sp92c7fe)); \App\Card::_restore($spfed6d4); return Response::success(); } function deleteTrashed(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string')); $sp92c7fe = $sp85ba11->post('ids'); $this->authQuery($sp85ba11, \App\Card::class)->whereIn('id', explode(',', $sp92c7fe))->forceDelete(); return Response::success(); } function deleteAll(Request $sp85ba11) { return $this->get($sp85ba11, false, true); } function restoreAll(Request $sp85ba11) { return $this->get($sp85ba11, false, false, true); } function add(Request $sp85ba11) { $sp16cfd7 = (int) $sp85ba11->post('product_id'); $sp75215f = $sp85ba11->post('card'); $sp65e297 = (int) $sp85ba11->post('type', \App\Card::TYPE_ONETIME); $sp1f3120 = $sp85ba11->post('is_check') === 'true'; if (str_contains($sp75215f, '<') || str_contains($sp75215f, '>')) { return Response::fail('卡密不能包含 < 或 > 符号'); } if (\App\Card::where('user_id', \Auth::id())->where('status', \App\Card::STATUS_NORMAL)->count() > 10000) { return Response::fail('您的库存卡密已经超过10000张，本次添加失败'); } $spaef809 = $this->getUserIdOrFail($sp85ba11); $spfaad7b = $this->authQuery($sp85ba11, \App\Product::class)->where('id', $sp16cfd7); $spfaad7b->firstOrFail(array('id')); if ($sp65e297 === \App\Card::TYPE_REPEAT) { if ($sp1f3120) { if (\App\Card::where('product_id', $sp16cfd7)->where('card', $sp75215f)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spb7019f = new \App\Card(array('user_id' => $spaef809, 'product_id' => $sp16cfd7, 'card' => $sp75215f, 'type' => \App\Card::TYPE_REPEAT, 'count_sold' => 0, 'count_all' => (int) $sp85ba11->post('count_all', 1))); if ($spb7019f->count_all < 1 || $spb7019f->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } return DB::transaction(function () use($spfaad7b, $spb7019f) { $spb7019f->saveOrFail(); $spf85ebf = $spfaad7b->lockForUpdate()->firstOrFail(); $spf85ebf->buy_max = 1; $spf85ebf->count_all += $spb7019f->count_all; $spf85ebf->saveOrFail(); return Response::success(); }); } else { $spddad3d = explode('
', $sp75215f); $sp159ad8 = count($spddad3d); $sp3e0ece = 500; if ($sp159ad8 > $sp3e0ece) { return Response::fail('每次添加不能超过 ' . $sp3e0ece . ' 张'); } $sp0406a1 = array(); if ($sp1f3120) { $sp5c94b1 = \App\Card::where('user_id', $spaef809)->where('product_id', $sp16cfd7)->get(array('card'))->all(); foreach ($sp5c94b1 as $sp2b8a60) { $sp0406a1[] = $sp2b8a60['card']; } } $sp31c898 = array(); $sp6ad08d = 0; for ($sp747316 = 0; $sp747316 < $sp159ad8; $sp747316++) { $spb7019f = trim($spddad3d[$sp747316]); if (strlen($spb7019f) < 1) { continue; } if (strlen($spb7019f) > 100) { return Response::fail('第 ' . $sp747316 . ' 张卡密 ' . $spb7019f . ' 长度错误<br>卡密最大长度为100'); } if ($sp1f3120) { if (in_array($spb7019f, $sp0406a1)) { continue; } $sp0406a1[] = $spb7019f; } $sp31c898[] = array('user_id' => $spaef809, 'product_id' => $sp16cfd7, 'card' => $spb7019f, 'type' => \App\Card::TYPE_ONETIME); $sp6ad08d++; } if ($sp6ad08d === 0) { return Response::success(); } return DB::transaction(function () use($spfaad7b, $sp31c898, $sp6ad08d) { \App\Card::insert($sp31c898); $spf85ebf = $spfaad7b->lockForUpdate()->firstOrFail(); $spf85ebf->count_all += $sp6ad08d; $spf85ebf->saveOrFail(); return Response::success(); }); } } function edit(Request $sp85ba11) { $spf46c5d = (int) $sp85ba11->post('id'); $spfb656b = $sp85ba11->post('card'); $sp65e297 = (int) $sp85ba11->post('type', \App\Card::TYPE_ONETIME); $spb7019f = $this->authQuery($sp85ba11, \App\Card::class)->findOrFail($spf46c5d); if ($spb7019f) { $spb7019f->card = $spfb656b; $spb7019f->type = $sp65e297; $spea768d = (int) $sp85ba11->post('count_all', 1); $spfaad7b = $spb7019f->product(); if ($sp65e297 === \App\Card::TYPE_REPEAT) { return DB::transaction(function () use($spfaad7b, $spb7019f, $spea768d) { $spb7019f = \App\Card::where('id', $spb7019f->id)->lockForUpdate()->firstOrFail(); if ($spea768d < $spb7019f->count_sold) { return Response::forbidden('可售总次数不能低于当前已售次数'); } if ($spea768d < 1 || $spea768d > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spf85ebf = $spfaad7b->lockForUpdate()->firstOrFail(); $spf85ebf->buy_max = 1; $spf85ebf->count_all -= $spb7019f->count_all; $spf85ebf->count_all += $spea768d; $spf85ebf->saveOrFail(); $spb7019f->count_all = $spea768d; $spb7019f->saveOrFail(); return Response::success(); }); } else { return DB::transaction(function () use($spfaad7b, $spb7019f, $spea768d) { $spb7019f = \App\Card::where('id', $spb7019f->id)->lockForUpdate()->firstOrFail(); $spf85ebf = $spfaad7b->lockForUpdate()->firstOrFail(); $spf85ebf->count_all -= $spb7019f->count_all; $spf85ebf->count_all += 1; $spf85ebf->saveOrFail(); $spb7019f->count_all = 1; $spb7019f->saveOrFail(); return Response::success(); }); } } return Response::success(); } }
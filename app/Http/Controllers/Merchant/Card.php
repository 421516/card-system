<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spdd9f33, $sp0446c1 = false, $spacdcb2 = false, $spfcc7a2 = false) { $sp26c3c2 = $this->authQuery($spdd9f33, \App\Card::class)->with(array('product' => function ($sp26c3c2) { $sp26c3c2->select(array('id', 'name')); })); $sp282adb = $spdd9f33->post('search', false); $spb80b3f = $spdd9f33->post('val', false); if ($sp282adb && $spb80b3f) { if ($sp282adb == 'id') { $sp26c3c2->where('id', $spb80b3f); } else { $sp26c3c2->where($sp282adb, 'like', '%' . $spb80b3f . '%'); } } $sp4a6190 = (int) $spdd9f33->post('category_id'); $spfafc60 = $spdd9f33->post('product_id', -1); if ($sp4a6190 > 0) { if ($spfafc60 > 0) { $sp26c3c2->where('product_id', $spfafc60); } else { $sp26c3c2->whereHas('product', function ($sp26c3c2) use($sp4a6190) { $sp26c3c2->where('category_id', $sp4a6190); }); } } $spb55c72 = $spdd9f33->post('status'); if (strlen($spb55c72)) { $sp26c3c2->whereIn('status', explode(',', $spb55c72)); } $spa7e203 = (int) $spdd9f33->post('onlyCanSell'); if ($spa7e203) { $sp26c3c2->whereRaw('`count_all`>`count_sold`'); } $sp9d3dc0 = $spdd9f33->post('type'); if (strlen($sp9d3dc0)) { $sp26c3c2->whereIn('type', explode(',', $sp9d3dc0)); } $sp8d95ea = $spdd9f33->post('trashed') === 'true'; if ($sp8d95ea) { $sp26c3c2->onlyTrashed(); } $sp26c3c2->orderByRaw('product_id,type,status'); if ($sp0446c1 === true) { $sp2d5f06 = ''; $sp26c3c2->chunk(100, function ($sp8a7554) use(&$sp2d5f06) { foreach ($sp8a7554 as $sp062ec9) { $sp2d5f06 .= $sp062ec9->card . '
'; } }); $sp15804f = 'export_cards_' . $this->getUserIdOrFail($spdd9f33) . '_' . date('YmdHis') . '.txt'; $sp78ff39 = 'card_export/' . $sp15804f; $sp3f9daa = System::_get('storage_driver'); try { if (!Storage::disk($sp3f9daa)->put($sp78ff39, $sp2d5f06)) { return Response::fail('文件生成失败'); } } catch (\Exception $sp9e5801) { \Log::error('Card.export Exception: ' . $sp9e5801->getMessage()); if (config('app.debug')) { return Response::fail($sp9e5801->getMessage()); } else { return Response::fail('生成文件失败, 内部错误, 请联系客服'); } } $sp8e6c71 = \App\File::insertGetId(array('user_id' => $this->getUserIdOrFail($spdd9f33), 'driver' => $sp3f9daa, 'path' => $sp78ff39, 'url' => Storage::disk($sp3f9daa)->url($sp78ff39))); if ($sp8e6c71 <= 0) { return Response::fail('数据库繁忙，插入文件记录失败'); } return Response::success($sp8e6c71); } else { if ($spacdcb2 === true) { if ($sp8d95ea) { $sp26c3c2->forceDelete(); } else { $sp26c3c2->delete(); } return Response::success(); } else { if ($sp8d95ea && $spfcc7a2 === true) { $sp26c3c2->restore(); return Response::success(); } else { $sp6f7226 = $spdd9f33->post('current_page', 1); $spaba533 = $spdd9f33->post('per_page', 20); $spec1114 = $sp26c3c2->paginate($spaba533, array('*'), 'page', $sp6f7226); return Response::success($spec1114); } } } } function export(Request $spdd9f33) { return self::get($spdd9f33, true); } function export_download($sp8e6c71) { $sp88bc5b = \App\File::findOrFail($sp8e6c71); $spa80d08 = Auth::getUser(); if ($spa80d08->role !== 'admin' && $spa80d08->id !== $sp88bc5b->user_id) { $sp2d5f06 = 'Access Denied'; $sp9eb34f = 'your_are_sb.txt'; } else { $sp3f9daa = System::_get('storage_driver'); $sp2d5f06 = Storage::disk($sp3f9daa)->get($sp88bc5b->path); $sp9eb34f = pathinfo($sp88bc5b->path, PATHINFO_BASENAME); Storage::disk($sp3f9daa)->delete($sp88bc5b->path); try { $sp88bc5b->delete(); } catch (\Exception $sp9e5801) { } } $sp8298e9 = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp9eb34f), 'Content-Length' => strlen($sp2d5f06)); return response()->make($sp2d5f06, 200, $sp8298e9); } function trash(Request $spdd9f33) { $sp12219c = $spdd9f33->post('ids', ''); if (strlen($sp12219c) < 1) { return Response::forbidden(); } $this->authQuery($spdd9f33, \App\Card::class)->whereIn('id', explode(',', $sp12219c))->delete(); return Response::success(); } function deleteTrashed(Request $spdd9f33) { $sp12219c = $spdd9f33->post('ids', ''); if (strlen($sp12219c) < 1) { return Response::forbidden(); } $this->authQuery($spdd9f33, \App\Card::class)->whereIn('id', explode(',', $sp12219c))->forceDelete(); return Response::success(); } function deleteAll(Request $spdd9f33) { return $this->get($spdd9f33, false, true); } function restoreTrashed(Request $spdd9f33) { $sp12219c = $spdd9f33->post('ids', ''); if (strlen($sp12219c) < 1) { return Response::forbidden(); } $sp26c3c2 = $this->authQuery($spdd9f33, \App\Card::class); $sp26c3c2->whereIn('id', explode(',', $sp12219c))->restore(); return Response::success(); } function restoreAll(Request $spdd9f33) { return $this->get($spdd9f33, false, false, true); } function add(Request $spdd9f33) { $spfafc60 = (int) $spdd9f33->post('product_id'); $sp8a7554 = $spdd9f33->post('card'); $spb55c72 = \App\Card::STATUS_NORMAL; $sp9d3dc0 = (int) $spdd9f33->post('type', \App\Card::TYPE_ONETIME); $sp27d65c = $spdd9f33->post('is_check') === 'true'; if (str_contains($sp8a7554, '<') || str_contains($sp8a7554, '>')) { return Response::fail('卡密不能用 < 或 > 分割'); } if (\App\Card::where('user_id', \Auth::id())->where('status', \App\Card::STATUS_NORMAL)->count() > 10000) { return Response::fail('您的库存卡密已经超过10000张，本次添加失败'); } $sp32da29 = $this->authQuery($spdd9f33, \App\Product::class)->findOrFail($spfafc60); if ($sp9d3dc0 === \App\Card::TYPE_REPEAT) { if ($sp27d65c) { if (\App\Card::where('product_id', $spfafc60)->where('card', $sp8a7554)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp32da29->buy_max = 1; $sp32da29->saveOrFail(); $sp062ec9 = new \App\Card(); $sp062ec9->user_id = $this->getUserIdOrFail($spdd9f33); $sp062ec9->product_id = $spfafc60; $sp062ec9->card = $sp8a7554; $sp062ec9->type = $sp9d3dc0; $sp062ec9->status = $spb55c72; $sp062ec9->count_sold = 0; $sp062ec9->count_all = (int) $spdd9f33->post('count_all', 1); if ($sp062ec9->count_all < 1 || $sp062ec9->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $sp062ec9->saveOrFail(); } else { $sp565c67 = explode('
', $sp8a7554); $spc65fb5 = count($sp565c67); $sp0c71de = 50; if ($spc65fb5 > $sp0c71de) { return Response::fail('每次添加不能超过 ' . $sp0c71de . ' 张'); } $sp6a4458 = array(); $sp2d5f06 = ''; for ($spfae064 = 0; $spfae064 < $spc65fb5; $spfae064++) { $sp062ec9 = trim($sp565c67[$spfae064]); if (strlen($sp062ec9) < 1) { continue; } if (strlen($sp062ec9) > 100) { return Response::fail('第 ' . $spfae064 . ' 张卡密 ' . $sp062ec9 . ' 长度错误<br>卡密最大长度为100'); } if ($sp27d65c) { if (in_array($sp062ec9, $sp6a4458)) { continue; } $sp6a4458[] = $sp062ec9; } if ($sp2d5f06 === '') { $sp2d5f06 .= $sp062ec9; } else { $sp2d5f06 .= '<' . $sp062ec9; } } if ($sp2d5f06 === '') { return Response::fail('请输入合法的卡密'); } try { \App\Card::add_cards($this->getUserIdOrFail($spdd9f33), $spfafc60, $sp9d3dc0, $spb55c72, $sp2d5f06, false); } catch (\Exception $sp9e5801) { \Log::error('add_cards, function fatal error: ', array('exception' => $sp9e5801)); return Response::fail($sp9e5801->getMessage()); } } return Response::success(); } function edit(Request $spdd9f33) { $sp403bd7 = (int) $spdd9f33->post('id'); $sp062ec9 = $spdd9f33->post('card'); $sp9d3dc0 = (int) $spdd9f33->post('type', \App\Card::TYPE_ONETIME); $spe42bdc = $this->authQuery($spdd9f33, \App\Card::class)->findOrFail($sp403bd7); if ($spe42bdc) { $spe42bdc->card = $sp062ec9; $spe42bdc->type = $sp9d3dc0; if ($sp9d3dc0 === \App\Card::TYPE_REPEAT) { $sp32da29 = $spe42bdc->product; $sp32da29->buy_max = 1; $sp32da29->saveOrFail(); $spe42bdc->count_all = (int) $spdd9f33->post('count_all', 1); } else { $spe42bdc->count_all = 1; } $spe42bdc->saveOrFail(); } return Response::success(); } }
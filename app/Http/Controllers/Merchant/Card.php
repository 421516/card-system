<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $sp845342, $sp8584d4 = false, $sp9b1833 = false, $spb7c1f3 = false) { $sp3eff46 = $this->authQuery($sp845342, \App\Card::class)->with(array('product' => function ($sp3eff46) { $sp3eff46->select(array('id', 'name')); })); $sp9d8b43 = $sp845342->post('search', false); $sp752740 = $sp845342->post('val', false); if ($sp9d8b43 && $sp752740) { if ($sp9d8b43 == 'id') { $sp3eff46->where('id', $sp752740); } else { $sp3eff46->where($sp9d8b43, 'like', '%' . $sp752740 . '%'); } } $sp68f2fa = (int) $sp845342->post('category_id'); $sp3c4c73 = $sp845342->post('product_id', -1); if ($sp68f2fa > 0) { if ($sp3c4c73 > 0) { $sp3eff46->where('product_id', $sp3c4c73); } else { $sp3eff46->whereHas('product', function ($sp3eff46) use($sp68f2fa) { $sp3eff46->where('category_id', $sp68f2fa); }); } } $sp406289 = $sp845342->post('status'); if (strlen($sp406289)) { $sp3eff46->whereIn('status', explode(',', $sp406289)); } $sp141f06 = (int) $sp845342->post('onlyCanSell'); if ($sp141f06) { $sp3eff46->whereRaw('`count_all`>`count_sold`'); } $sp0eab44 = $sp845342->post('type'); if (strlen($sp0eab44)) { $sp3eff46->whereIn('type', explode(',', $sp0eab44)); } $sp8fccbd = $sp845342->post('trashed') === 'true'; if ($sp8fccbd) { $sp3eff46->onlyTrashed(); } $sp3eff46->orderByRaw('product_id,type,status'); if ($sp8584d4 === true) { $spdac80c = ''; $sp3eff46->chunk(100, function ($sp7c7b9e) use(&$spdac80c) { foreach ($sp7c7b9e as $spcee439) { $spdac80c .= $spcee439->card . '
'; } }); $spc63eef = 'export_cards_' . $this->getUserIdOrFail($sp845342) . '_' . date('YmdHis') . '.txt'; $sp3c8c72 = 'card_export/' . $spc63eef; $spcda0d1 = System::_get('storage_driver'); try { if (!Storage::disk($spcda0d1)->put($sp3c8c72, $spdac80c)) { return Response::fail('文件生成失败'); } } catch (\Exception $sp805d3e) { \Log::error('Card.export Exception: ' . $sp805d3e->getMessage()); if (config('app.debug')) { return Response::fail($sp805d3e->getMessage()); } else { return Response::fail('生成文件失败, 内部错误, 请联系客服'); } } $sp2a72bd = \App\File::insertGetId(array('user_id' => $this->getUserIdOrFail($sp845342), 'driver' => $spcda0d1, 'path' => $sp3c8c72, 'url' => Storage::disk($spcda0d1)->url($sp3c8c72))); if ($sp2a72bd <= 0) { return Response::fail('数据库繁忙，插入文件记录失败'); } return Response::success($sp2a72bd); } else { if ($sp9b1833 === true) { if ($sp8fccbd) { $sp3eff46->forceDelete(); } else { $sp3eff46->delete(); } return Response::success(); } else { if ($sp8fccbd && $spb7c1f3 === true) { $sp3eff46->restore(); return Response::success(); } else { $sp2d1093 = $sp845342->post('current_page', 1); $spfe0c85 = $sp845342->post('per_page', 20); $spd1b01a = $sp3eff46->paginate($spfe0c85, array('*'), 'page', $sp2d1093); return Response::success($spd1b01a); } } } } function export(Request $sp845342) { return self::get($sp845342, true); } function export_download($sp2a72bd) { $spbef20a = \App\File::findOrFail($sp2a72bd); $sp7b4336 = Auth::getUser(); if ($sp7b4336->role !== 'admin' && $sp7b4336->id !== $spbef20a->user_id) { $spdac80c = 'Access Denied'; $sp98b3c6 = 'your_are_sb.txt'; } else { $spcda0d1 = System::_get('storage_driver'); $spdac80c = Storage::disk($spcda0d1)->get($spbef20a->path); $sp98b3c6 = pathinfo($spbef20a->path, PATHINFO_BASENAME); Storage::disk($spcda0d1)->delete($spbef20a->path); try { $spbef20a->delete(); } catch (\Exception $sp805d3e) { } } $sp21afdb = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp98b3c6), 'Content-Length' => strlen($spdac80c)); return response()->make($spdac80c, 200, $sp21afdb); } function trash(Request $sp845342) { $sp35201d = $sp845342->post('ids', ''); if (strlen($sp35201d) < 1) { return Response::forbidden(); } $this->authQuery($sp845342, \App\Card::class)->whereIn('id', explode(',', $sp35201d))->delete(); return Response::success(); } function deleteTrashed(Request $sp845342) { $sp35201d = $sp845342->post('ids', ''); if (strlen($sp35201d) < 1) { return Response::forbidden(); } $this->authQuery($sp845342, \App\Card::class)->whereIn('id', explode(',', $sp35201d))->forceDelete(); return Response::success(); } function deleteAll(Request $sp845342) { return $this->get($sp845342, false, true); } function restoreTrashed(Request $sp845342) { $sp35201d = $sp845342->post('ids', ''); if (strlen($sp35201d) < 1) { return Response::forbidden(); } $sp3eff46 = $this->authQuery($sp845342, \App\Card::class); $sp3eff46->whereIn('id', explode(',', $sp35201d))->restore(); return Response::success(); } function restoreAll(Request $sp845342) { return $this->get($sp845342, false, false, true); } function add(Request $sp845342) { $sp3c4c73 = (int) $sp845342->post('product_id'); $sp7c7b9e = $sp845342->post('card'); $sp406289 = \App\Card::STATUS_NORMAL; $sp0eab44 = (int) $sp845342->post('type', \App\Card::TYPE_ONETIME); $sp4c84c6 = $sp845342->post('is_check') === 'true'; if (str_contains($sp7c7b9e, '<') || str_contains($sp7c7b9e, '>')) { return Response::fail('卡密不能用 < 或 > 分割'); } if (\App\Card::where('user_id', \Auth::id())->where('status', \App\Card::STATUS_NORMAL)->count() > 10000) { return Response::fail('您的库存卡密已经超过10000张，本次添加失败'); } $sp41d615 = $this->authQuery($sp845342, \App\Product::class)->findOrFail($sp3c4c73); if ($sp0eab44 === \App\Card::TYPE_REPEAT) { if ($sp4c84c6) { if (\App\Card::where('product_id', $sp3c4c73)->where('card', $sp7c7b9e)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $sp41d615->buy_max = 1; $sp41d615->saveOrFail(); $spcee439 = new \App\Card(); $spcee439->user_id = $this->getUserIdOrFail($sp845342); $spcee439->product_id = $sp3c4c73; $spcee439->card = $sp7c7b9e; $spcee439->type = $sp0eab44; $spcee439->status = $sp406289; $spcee439->count_sold = 0; $spcee439->count_all = (int) $sp845342->post('count_all', 1); if ($spcee439->count_all < 1 || $spcee439->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spcee439->saveOrFail(); } else { $sp22c2d1 = explode('
', $sp7c7b9e); $sp2f772c = count($sp22c2d1); $sp7f3372 = 50; if ($sp2f772c > $sp7f3372) { return Response::fail('每次添加不能超过 ' . $sp7f3372 . ' 张'); } $spc95bd5 = array(); $spdac80c = ''; for ($sp836a84 = 0; $sp836a84 < $sp2f772c; $sp836a84++) { $spcee439 = trim($sp22c2d1[$sp836a84]); if (strlen($spcee439) < 1) { continue; } if (strlen($spcee439) > 100) { return Response::fail('第 ' . $sp836a84 . ' 张卡密 ' . $spcee439 . ' 长度错误<br>卡密最大长度为100'); } if ($sp4c84c6) { if (in_array($spcee439, $spc95bd5)) { continue; } $spc95bd5[] = $spcee439; } if ($spdac80c === '') { $spdac80c .= $spcee439; } else { $spdac80c .= '<' . $spcee439; } } if ($spdac80c === '') { return Response::fail('请输入合法的卡密'); } try { \App\Card::add_cards($this->getUserIdOrFail($sp845342), $sp3c4c73, $sp0eab44, $sp406289, $spdac80c, false); } catch (\Exception $sp805d3e) { \Log::error('add_cards, function fatal error: ', array('exception' => $sp805d3e)); return Response::fail($sp805d3e->getMessage()); } } return Response::success(); } function edit(Request $sp845342) { $sp3a2be3 = (int) $sp845342->post('id'); $spcee439 = $sp845342->post('card'); $sp0eab44 = (int) $sp845342->post('type', \App\Card::TYPE_ONETIME); $sp994dfa = $this->authQuery($sp845342, \App\Card::class)->findOrFail($sp3a2be3); if ($sp994dfa) { $sp994dfa->card = $spcee439; $sp994dfa->type = $sp0eab44; if ($sp0eab44 === \App\Card::TYPE_REPEAT) { $sp41d615 = $sp994dfa->product; $sp41d615->buy_max = 1; $sp41d615->saveOrFail(); $sp994dfa->count_all = (int) $sp845342->post('count_all', 1); } else { $sp994dfa->count_all = 1; } $sp994dfa->saveOrFail(); } return Response::success(); } }
<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp845342) { $sp2d1093 = $sp845342->post('current_page', 1); $spfe0c85 = $sp845342->post('per_page', 20); $sp3eff46 = $this->authQuery($sp845342, \App\Category::class); $sp9d8b43 = $sp845342->post('search', false); $sp752740 = $sp845342->post('val', false); if ($sp9d8b43 && $sp752740) { if ($sp9d8b43 == 'simple') { return Response::success($sp3eff46->get(array('id', 'name'))); } elseif ($sp9d8b43 == 'id') { $sp3eff46->where('id', $sp752740); } else { $sp3eff46->where($sp9d8b43, 'like', '%' . $sp752740 . '%'); } } $spd36004 = $sp845342->post('enabled'); if (strlen($spd36004)) { $sp3eff46->whereIn('enabled', explode(',', $spd36004)); } $spd1b01a = $sp3eff46->withCount('products')->orderBy('sort')->paginate($spfe0c85, array('*'), 'page', $sp2d1093); foreach ($spd1b01a->items() as $sp6680bb) { $sp6680bb->setAppends(array('url')); } return Response::success($spd1b01a); } function sort(Request $sp845342) { $sp3a2be3 = (int) $sp845342->post('id', -1); if (!$sp3a2be3) { return Response::forbidden(); } $sp6680bb = $this->authQuery($sp845342, \App\Category::class)->findOrFail($sp3a2be3); $sp6680bb->sort = (int) $sp845342->post('sort', 1000); $sp6680bb->save(); return Response::success(); } function edit(Request $sp845342) { $sp3a2be3 = (int) $sp845342->post('id'); $spe51eb0 = $sp845342->post('name'); $spd36004 = (int) $sp845342->post('enabled'); $spd6bd85 = $sp845342->post('sort'); $spd6bd85 = $spd6bd85 === NULL ? 1000 : (int) $spd6bd85; if (System::_getInt('filter_words_open') === 1) { $sp20eee6 = explode('|', System::_get('filter_words')); if (($spec9b7c = Helper::filterWords($spe51eb0, $sp20eee6)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spec9b7c); } } if ($spd6bd85 < 0 || $spd6bd85 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $spa65220 = $sp845342->post('password'); $spb1ada2 = $sp845342->post('password_open') === 'true'; $sp6680bb = $this->authQuery($sp845342, \App\Category::class)->find($sp3a2be3); if (!$sp6680bb) { $sp6680bb = new \App\Category(); $sp6680bb->user_id = $this->getUserIdOrFail($sp845342); } $sp6680bb->name = $spe51eb0; $sp6680bb->sort = $spd6bd85; $sp6680bb->password = $spa65220; $sp6680bb->password_open = $spb1ada2; $sp6680bb->enabled = $spd36004; $sp6680bb->saveOrFail(); return Response::success(); } function enable(Request $sp845342) { $sp35201d = $sp845342->post('ids', ''); if (strlen($sp35201d) < 1) { return Response::forbidden(); } $spd36004 = (int) $sp845342->post('enabled'); $this->authQuery($sp845342, \App\Category::class)->whereIn('id', explode(',', $sp35201d))->update(array('enabled' => $spd36004)); return Response::success(); } function delete(Request $sp845342) { $sp35201d = $sp845342->post('ids', ''); if (strlen($sp35201d) < 1) { return Response::forbidden(); } $this->authQuery($sp845342, \App\Category::class)->whereIn('id', explode(',', $sp35201d))->delete(); return Response::success(); } }
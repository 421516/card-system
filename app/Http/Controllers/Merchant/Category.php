<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp2d83a6) { $sp9ca635 = $sp2d83a6->post('current_page', 1); $spb53279 = $sp2d83a6->post('per_page', 20); $spedc15a = $this->authQuery($sp2d83a6, \App\Category::class); $sp53975f = $sp2d83a6->post('search', false); $spffa78a = $sp2d83a6->post('val', false); if ($sp53975f && $spffa78a) { if ($sp53975f == 'simple') { return Response::success($spedc15a->get(array('id', 'name'))); } elseif ($sp53975f == 'id') { $spedc15a->where('id', $spffa78a); } else { $spedc15a->where($sp53975f, 'like', '%' . $spffa78a . '%'); } } $spedd1cd = $sp2d83a6->post('enabled'); if (strlen($spedd1cd)) { $spedc15a->whereIn('enabled', explode(',', $spedd1cd)); } $sp8ea0e0 = $spedc15a->withCount('products')->orderBy('sort')->paginate($spb53279, array('*'), 'page', $sp9ca635); foreach ($sp8ea0e0->items() as $sp58b2cb) { $sp58b2cb->setAppends(array('url')); } return Response::success($sp8ea0e0); } function sort(Request $sp2d83a6) { $spe6149b = (int) $sp2d83a6->post('id', -1); if (!$spe6149b) { return Response::forbidden(); } $sp58b2cb = $this->authQuery($sp2d83a6, \App\Category::class)->findOrFail($spe6149b); $sp58b2cb->sort = (int) $sp2d83a6->post('sort', 1000); $sp58b2cb->save(); return Response::success(); } function edit(Request $sp2d83a6) { $spe6149b = (int) $sp2d83a6->post('id'); $sp074e36 = $sp2d83a6->post('name'); $spedd1cd = (int) $sp2d83a6->post('enabled'); $spb026b4 = $sp2d83a6->post('sort'); $spb026b4 = $spb026b4 === NULL ? 1000 : (int) $spb026b4; if (System::_getInt('filter_words_open') === 1) { $sp1bc521 = explode('|', System::_get('filter_words')); if (($sp46dd86 = Helper::filterWords($sp074e36, $sp1bc521)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp46dd86); } } if ($spb026b4 < 0 || $spb026b4 > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp2a9512 = $sp2d83a6->post('password'); $sp557919 = $sp2d83a6->post('password_open') === 'true'; $sp58b2cb = $this->authQuery($sp2d83a6, \App\Category::class)->find($spe6149b); if (!$sp58b2cb) { $sp58b2cb = new \App\Category(); $sp58b2cb->user_id = $this->getUserIdOrFail($sp2d83a6); } $sp58b2cb->name = $sp074e36; $sp58b2cb->sort = $spb026b4; $sp58b2cb->password = $sp2a9512; $sp58b2cb->password_open = $sp557919; $sp58b2cb->enabled = $spedd1cd; $sp58b2cb->saveOrFail(); return Response::success(); } function enable(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } $spedd1cd = (int) $sp2d83a6->post('enabled'); $this->authQuery($sp2d83a6, \App\Category::class)->whereIn('id', explode(',', $sp1b3f11))->update(array('enabled' => $spedd1cd)); return Response::success(); } function delete(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } $this->authQuery($sp2d83a6, \App\Category::class)->whereIn('id', explode(',', $sp1b3f11))->delete(); return Response::success(); } }
<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp85ba11) { $spefc91a = $sp85ba11->post('current_page', 1); $sp179110 = $sp85ba11->post('per_page', 20); $spfed6d4 = $this->authQuery($sp85ba11, \App\Category::class); $sp707db4 = $sp85ba11->post('search', false); $sp56c021 = $sp85ba11->post('val', false); if ($sp707db4 && $sp56c021) { if ($sp707db4 == 'simple') { return Response::success($spfed6d4->get(array('id', 'name'))); } elseif ($sp707db4 == 'id') { $spfed6d4->where('id', $sp56c021); } else { $spfed6d4->where($sp707db4, 'like', '%' . $sp56c021 . '%'); } } $sp58a2b5 = $sp85ba11->post('enabled'); if (strlen($sp58a2b5)) { $spfed6d4->whereIn('enabled', explode(',', $sp58a2b5)); } $sp0ba550 = $spfed6d4->withCount('products')->orderBy('sort')->paginate($sp179110, array('*'), 'page', $spefc91a); foreach ($sp0ba550->items() as $sp9a35dc) { $sp9a35dc->setAppends(array('url')); } return Response::success($sp0ba550); } function sort(Request $sp85ba11) { $this->validate($sp85ba11, array('id' => 'required|integer')); $sp9a35dc = $this->authQuery($sp85ba11, \App\Category::class)->findOrFail($sp85ba11->post('id')); $sp9a35dc->sort = (int) $sp85ba11->post('sort', 1000); $sp9a35dc->save(); return Response::success(); } function edit(Request $sp85ba11) { $this->validate($sp85ba11, array('name' => 'required|string|max:128')); $spb0d9eb = $sp85ba11->post('name'); $sp58a2b5 = (int) $sp85ba11->post('enabled'); $spb857ef = $sp85ba11->post('sort'); $spb857ef = $spb857ef === NULL ? 1000 : (int) $spb857ef; if (System::_getInt('filter_words_open') === 1) { $spdadace = explode('|', System::_get('filter_words')); if (($sp5780b9 = Helper::filterWords($spb0d9eb, $spdadace)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $sp5780b9); } } if ($spb857ef < 0 || $spb857ef > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp75cce5 = $sp85ba11->post('password'); $sp2da89d = $sp85ba11->post('password_open') === 'true'; if ((int) $sp85ba11->post('id')) { $sp9a35dc = $this->authQuery($sp85ba11, \App\Category::class)->findOrFail($sp85ba11->post('id')); } else { $sp9a35dc = new \App\Category(); $sp9a35dc->user_id = $this->getUserIdOrFail($sp85ba11); } $sp9a35dc->name = $spb0d9eb; $sp9a35dc->sort = $spb857ef; $sp9a35dc->password = $sp75cce5; $sp9a35dc->password_open = $sp2da89d; $sp9a35dc->enabled = $sp58a2b5; $sp9a35dc->saveOrFail(); return Response::success(); } function enable(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp92c7fe = $sp85ba11->post('ids', ''); $sp58a2b5 = (int) $sp85ba11->post('enabled'); $this->authQuery($sp85ba11, \App\Category::class)->whereIn('id', explode(',', $sp92c7fe))->update(array('enabled' => $sp58a2b5)); return Response::success(); } function delete(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string')); $sp92c7fe = $sp85ba11->post('ids', ''); $this->authQuery($sp85ba11, \App\Category::class)->whereIn('id', explode(',', $sp92c7fe))->delete(); return Response::success(); } }
<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; class Category extends Controller { function get(Request $sp0fc69c) { $sp73a73e = $sp0fc69c->post('current_page', 1); $spfc5387 = $sp0fc69c->post('per_page', 20); $sp3f78ce = $this->authQuery($sp0fc69c, \App\Category::class); $sp5c7997 = $sp0fc69c->post('search', false); $sp5f3104 = $sp0fc69c->post('val', false); if ($sp5c7997 && $sp5f3104) { if ($sp5c7997 == 'simple') { return Response::success($sp3f78ce->get(array('id', 'name'))); } elseif ($sp5c7997 == 'id') { $sp3f78ce->where('id', $sp5f3104); } else { $sp3f78ce->where($sp5c7997, 'like', '%' . $sp5f3104 . '%'); } } $spbca6ef = $sp0fc69c->post('enabled'); if (strlen($spbca6ef)) { $sp3f78ce->whereIn('enabled', explode(',', $spbca6ef)); } $sp36eb9c = $sp3f78ce->withCount('products')->orderBy('sort')->paginate($spfc5387, array('*'), 'page', $sp73a73e); foreach ($sp36eb9c->items() as $sp67f4a3) { $sp67f4a3->setAppends(array('url')); } return Response::success($sp36eb9c); } function sort(Request $sp0fc69c) { $spfc3b4d = (int) $sp0fc69c->post('id', -1); if (!$spfc3b4d) { return Response::forbidden(); } $sp67f4a3 = $this->authQuery($sp0fc69c, \App\Category::class)->findOrFail($spfc3b4d); $sp67f4a3->sort = (int) $sp0fc69c->post('sort', 1000); $sp67f4a3->save(); return Response::success(); } function edit(Request $sp0fc69c) { $spfc3b4d = (int) $sp0fc69c->post('id'); $spb44bf2 = $sp0fc69c->post('name'); $spbca6ef = (int) $sp0fc69c->post('enabled'); $spfe906a = $sp0fc69c->post('sort'); $spfe906a = $spfe906a === NULL ? 1000 : (int) $spfe906a; if (System::_getInt('filter_words_open') === 1) { $sp4778c1 = explode('|', System::_get('filter_words')); if (($spc8aebe = Helper::filterWords($spb44bf2, $sp4778c1)) !== false) { return Response::fail('提交失败! 分类名称包含敏感词: ' . $spc8aebe); } } if ($spfe906a < 0 || $spfe906a > 1000000) { return Response::fail('排序需要在0-1000000之间'); } $sp53fc75 = $sp0fc69c->post('password'); $spe12d92 = $sp0fc69c->post('password_open') === 'true'; $sp67f4a3 = $this->authQuery($sp0fc69c, \App\Category::class)->find($spfc3b4d); if (!$sp67f4a3) { $sp67f4a3 = new \App\Category(); $sp67f4a3->user_id = $this->getUserIdOrFail($sp0fc69c); } $sp67f4a3->name = $spb44bf2; $sp67f4a3->sort = $spfe906a; $sp67f4a3->password = $sp53fc75; $sp67f4a3->password_open = $spe12d92; $sp67f4a3->enabled = $spbca6ef; $sp67f4a3->saveOrFail(); return Response::success(); } function enable(Request $sp0fc69c) { $spf179c6 = $sp0fc69c->post('ids', ''); if (strlen($spf179c6) < 1) { return Response::forbidden(); } $spbca6ef = (int) $sp0fc69c->post('enabled'); $this->authQuery($sp0fc69c, \App\Category::class)->whereIn('id', explode(',', $spf179c6))->update(array('enabled' => $spbca6ef)); return Response::success(); } function delete(Request $sp0fc69c) { $spf179c6 = $sp0fc69c->post('ids', ''); if (strlen($spf179c6) < 1) { return Response::forbidden(); } $this->authQuery($sp0fc69c, \App\Category::class)->whereIn('id', explode(',', $spf179c6))->delete(); return Response::success(); } }
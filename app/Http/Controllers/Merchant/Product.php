<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spdd9f33) { $sp26c3c2 = $this->authQuery($spdd9f33, \App\Product::class)->with(array('category' => function (Relation $sp26c3c2) { $sp26c3c2->select(array('id', 'name', 'password_open')); }))->with(array('cards' => function (Relation $sp26c3c2) { $sp26c3c2->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); })); $sp282adb = $spdd9f33->post('search', false); $spb80b3f = $spdd9f33->post('val', false); if ($sp282adb && $spb80b3f) { if ($sp282adb == 'simple') { return Response::success($sp26c3c2->where('category_id', $spb80b3f)->get(array('id', 'name'))); } elseif ($sp282adb == 'id') { $sp26c3c2->where('id', $spb80b3f); } else { $sp26c3c2->where($sp282adb, 'like', '%' . $spb80b3f . '%'); } } $sp4a6190 = (int) $spdd9f33->post('category_id'); if ($sp4a6190 > 0) { $sp26c3c2->where('category_id', $sp4a6190); } $spc08eb6 = $spdd9f33->post('enabled'); if (strlen($spc08eb6)) { $sp26c3c2->whereIn('enabled', explode(',', $spc08eb6)); } $sp6f7226 = $spdd9f33->post('current_page', 1); $spaba533 = $spdd9f33->post('per_page', 20); $spec1114 = $sp26c3c2->orderBy('sort')->paginate($spaba533, array('*'), 'page', $sp6f7226); foreach ($spec1114->items() as $sp32da29) { $sp32da29->setAppends(array('count', 'url')); } return Response::success($spec1114); } function sort(Request $spdd9f33) { $sp403bd7 = (int) $spdd9f33->post('id', -1); if (!$sp403bd7) { return Response::forbidden(); } $sp32da29 = $this->authQuery($spdd9f33, \App\Product::class)->findOrFail($sp403bd7); $sp32da29->sort = (int) $spdd9f33->post('sort', 1000); $sp32da29->save(); return Response::success(); } function category_edit(Request $spdd9f33) { $sp403bd7 = (int) $spdd9f33->post('id'); $sp4a6190 = (int) $spdd9f33->post('category_id'); if (!$sp403bd7 || !$sp4a6190) { return Response::forbidden(); } $sp32da29 = $this->authQuery($spdd9f33, \App\Product::class)->findOrFail($sp403bd7); $sp32da29->category_id = $sp4a6190; $sp32da29->save(); return Response::success(); } function edit(Request $spdd9f33) { $sp403bd7 = (int) $spdd9f33->post('id'); $sp4a6190 = (int) $spdd9f33->post('category_id'); $spa8020b = $spdd9f33->post('name'); $sp1f98ff = $spdd9f33->post('description'); $sp92fabb = $spdd9f33->post('instructions'); $sp2f9709 = $spdd9f33->post('sort'); $sp2f9709 = $sp2f9709 === NULL ? 1000 : (int) $sp2f9709; $spc1f151 = (int) $spdd9f33->post('count_warn', 0); $sp3dda62 = (int) $spdd9f33->post('buy_min', 0); $spb0eff1 = (int) $spdd9f33->post('buy_max', 0); $spacf44a = $spdd9f33->post('support_coupon', 0) === 'true'; $sp1659fb = $spdd9f33->post('password'); $sp18ba38 = $spdd9f33->post('password_open', 0) === 'true'; $spe6e578 = (int) ($spdd9f33->post('cost') * 100); $sp10eada = (int) ($spdd9f33->post('price') * 100); $spd9cf6f = $spdd9f33->post('price_whole'); $spc08eb6 = (int) $spdd9f33->post('enabled'); if (System::_getInt('filter_words_open') === 1) { $spcc0fad = explode('|', System::_get('filter_words')); if (($sp123706 = Helper::filterWords($spa8020b, $spcc0fad)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp123706); } if (($sp123706 = Helper::filterWords($sp1f98ff, $spcc0fad)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp123706); } if (($sp123706 = Helper::filterWords($sp92fabb, $spcc0fad)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp123706); } } if ($sp3dda62 < 1 || $sp3dda62 > 10000) { return Response::fail('最小购买量不能超过10000'); } if ($spb0eff1 < 1 || $spb0eff1 > 10000) { return Response::fail('最大购买量不能超过10000'); } if ($spc1f151 < 0 || $spc1f151 > 10000000) { return Response::fail('库存预警需要在0-10000000之间'); } if ($sp2f9709 < 0 || $sp2f9709 > 10000000) { return Response::fail('排序需要在0-10000000之间'); } if ($spe6e578 > 1000000000 || $sp10eada > 1000000000) { return Response::fail('商品价格不能超过10000000, 请重新输入'); } if ($spe6e578 < 0 || $sp10eada < 0) { return Response::fail('价格不能为负数'); } $sp32da29 = $this->authQuery($spdd9f33, \App\Product::class)->find($sp403bd7); if (!$sp32da29) { $sp32da29 = new \App\Product(); $sp32da29->count_sold = 0; $sp32da29->user_id = $this->getUserIdOrFail($spdd9f33); } else { if (\App\Card::whereProductId($sp32da29->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp3dda62 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($spb0eff1 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } $sp32da29->category_id = $sp4a6190; $sp32da29->name = $spa8020b; $sp5b3c7f = new AntiXSS(); $sp32da29->description = $sp5b3c7f->xss_clean($sp1f98ff); $sp32da29->instructions = $sp5b3c7f->xss_clean($sp92fabb); $sp32da29->sort = $sp2f9709; $sp32da29->buy_min = $sp3dda62; $sp32da29->buy_max = $spb0eff1; $sp32da29->count_warn = $spc1f151; $sp32da29->support_coupon = $spacf44a; $sp32da29->password = $sp1659fb; $sp32da29->password_open = $sp18ba38; $sp32da29->cost = $spe6e578; $sp32da29->price = $sp10eada; $sp32da29->price_whole = $spd9cf6f; $sp32da29->enabled = $spc08eb6; $sp32da29->saveOrFail(); return Response::success(); } function enable(Request $spdd9f33) { $sp12219c = $spdd9f33->post('ids', ''); if (strlen($sp12219c) < 1) { return Response::forbidden(); } $spc08eb6 = (int) $spdd9f33->post('enabled'); $this->authQuery($spdd9f33, \App\Product::class)->whereIn('id', explode(',', $sp12219c))->update(array('enabled' => $spc08eb6)); return Response::success(); } function delete(Request $spdd9f33) { $sp12219c = $spdd9f33->post('ids', ''); if (strlen($sp12219c) < 1) { return Response::forbidden(); } $this->authQuery($spdd9f33, \App\Product::class)->whereIn('id', explode(',', $sp12219c))->delete(); return Response::success(); } }
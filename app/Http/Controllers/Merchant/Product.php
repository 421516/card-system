<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp85ba11) { $spfed6d4 = $this->authQuery($sp85ba11, \App\Product::class)->with(array('category' => function (Relation $spfed6d4) { $spfed6d4->select(array('id', 'name', 'password_open')); })); $sp707db4 = $sp85ba11->post('search', false); $sp56c021 = $sp85ba11->post('val', false); if ($sp707db4 && $sp56c021) { if ($sp707db4 == 'simple') { return Response::success($spfed6d4->where('category_id', $sp56c021)->get(array('id', 'name'))); } elseif ($sp707db4 == 'id') { $spfed6d4->where('id', $sp56c021); } elseif ($sp707db4 == 'category_id') { $spfed6d4->where('category_id', $sp56c021); } else { $spfed6d4->where($sp707db4, 'like', '%' . $sp56c021 . '%'); } } $sp7bb93d = (int) $sp85ba11->post('category_id'); if ($sp7bb93d > 0) { $spfed6d4->where('category_id', $sp7bb93d); } $sp58a2b5 = $sp85ba11->post('enabled'); if (strlen($sp58a2b5)) { $spfed6d4->whereIn('enabled', explode(',', $sp58a2b5)); } $spefc91a = $sp85ba11->post('current_page', 1); $sp179110 = $sp85ba11->post('per_page', 20); $sp0ba550 = $spfed6d4->orderBy('sort')->paginate($sp179110, array('*'), 'page', $spefc91a); foreach ($sp0ba550->items() as $spf85ebf) { $spf85ebf->setAppends(array('count', 'url')); } return Response::success($sp0ba550); } function sort(Request $sp85ba11) { $this->validate($sp85ba11, array('id' => 'required|integer')); $spf85ebf = $this->authQuery($sp85ba11, \App\Product::class)->findOrFail($sp85ba11->post('id')); $spf85ebf->sort = (int) $sp85ba11->post('sort', 1000); $spf85ebf->save(); return Response::success(); } function category_change(Request $sp85ba11) { $this->validate($sp85ba11, array('id' => 'required|integer', 'category_id' => 'required|integer')); $sp9a35dc = $this->authQuery($sp85ba11, \App\Category::class)->findOrFail($sp85ba11->post('category_id')); $spf85ebf = $this->authQuery($sp85ba11, \App\Product::class)->findOrFail($sp85ba11->post('id')); $spf85ebf->category_id = $sp9a35dc->id; $spf85ebf->save(); return Response::success(); } function edit(Request $sp85ba11) { $this->validate($sp85ba11, array('id' => 'sometimes|integer', 'category_id' => 'required|integer', 'description' => 'required|string', 'instructions' => 'required|string', 'sort' => 'required|integer|min:0|max:10000000', 'inventory' => 'required|integer|between:0,2', 'buy_min' => 'required|integer|min:0|max:10000', 'buy_max' => 'required|integer|min:0|max:10000', 'cost' => 'required|numeric|min:0|max:10000000', 'price' => 'required|numeric|min:0.01|max:10000000', 'price_whole' => 'required|string', 'enabled' => 'required|integer|between:0,1')); $sp7bb93d = (int) $sp85ba11->post('category_id'); if (!$this->authQuery($sp85ba11, \App\Category::class)->where('id', $sp7bb93d)->exists()) { return Response::fail('商品分类不存在'); } $spb0d9eb = $sp85ba11->post('name'); $spf21874 = $sp85ba11->post('description'); $sp7b2ab6 = $sp85ba11->post('instructions'); $sp24c133 = (int) $sp85ba11->post('buy_min', 0); $spb5a365 = (int) $sp85ba11->post('buy_max', 0); $sp729689 = (int) round($sp85ba11->post('cost') * 100); $spf4cec7 = (int) round($sp85ba11->post('price') * 100); $spc03222 = $sp85ba11->post('price_whole'); $sp6d19bd = @json_decode($spc03222, true); foreach ($sp6d19bd as $sp1e6d36) { if ($sp1e6d36[1] < 1 || $sp1e6d36[1] > 1000000000) { return Response::fail('商品批发价需要在 0.01-10000000 之间'); } } if (System::_getInt('filter_words_open') === 1) { $spdadace = explode('|', System::_get('filter_words')); if (($sp5780b9 = Helper::filterWords($spb0d9eb, $spdadace)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp5780b9); } if (($sp5780b9 = Helper::filterWords($spf21874, $spdadace)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp5780b9); } if (($sp5780b9 = Helper::filterWords($sp7b2ab6, $spdadace)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp5780b9); } } if ((int) $sp85ba11->post('id')) { $spf85ebf = $this->authQuery($sp85ba11, \App\Product::class)->findOrFail($sp85ba11->post('id')); if (\App\Card::whereProductId($spf85ebf->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp24c133 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($spb5a365 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } else { $spf85ebf = new \App\Product(); $spf85ebf->count_sold = 0; $spf85ebf->user_id = $this->getUserIdOrFail($sp85ba11); } $spf85ebf->category_id = $sp7bb93d; $spf85ebf->name = $spb0d9eb; $spff5678 = new AntiXSS(); $spf85ebf->description = $spff5678->xss_clean($spf21874); $spf85ebf->instructions = $spff5678->xss_clean($sp7b2ab6); $spf85ebf->sort = $sp85ba11->post('sort'); $spf85ebf->buy_min = $sp24c133; $spf85ebf->buy_max = $spb5a365; $spf85ebf->count_warn = $sp85ba11->post('count_warn'); $spf85ebf->support_coupon = $sp85ba11->post('support_coupon') === 'true'; $spf85ebf->password = $sp85ba11->post('password'); $spf85ebf->password_open = $sp85ba11->post('password_open') === 'true'; $spf85ebf->cost = $sp729689; $spf85ebf->price = $spf4cec7; $spf85ebf->price_whole = $spc03222; $spf85ebf->enabled = (int) $sp85ba11->post('enabled'); $spf85ebf->inventory = (int) $sp85ba11->post('inventory'); $spf85ebf->saveOrFail(); return Response::success(); } function enable(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string', 'enabled' => 'required|integer')); $sp92c7fe = $sp85ba11->post('ids'); $sp58a2b5 = (int) $sp85ba11->post('enabled'); $this->authQuery($sp85ba11, \App\Product::class)->whereIn('id', explode(',', $sp92c7fe))->update(array('enabled' => $sp58a2b5)); return Response::success(); } function delete(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string')); $sp92c7fe = $sp85ba11->post('ids'); $sp92c7fe = explode(',', $sp92c7fe); $spfaad7b = $this->authQuery($sp85ba11, \App\Product::class)->whereIn('id', $sp92c7fe); $sp226d08 = $this->authQuery($sp85ba11, \App\Card::class)->whereIn('product_id', $sp92c7fe); return DB::transaction(function () use($spfaad7b, $sp226d08) { $spfaad7b->delete(); $sp226d08->forceDelete(); return Response::success(); }); } }
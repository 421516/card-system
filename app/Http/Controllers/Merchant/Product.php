<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp0fc69c) { $sp3f78ce = $this->authQuery($sp0fc69c, \App\Product::class)->with(array('category' => function (Relation $sp3f78ce) { $sp3f78ce->select(array('id', 'name', 'password_open')); }))->with(array('cards' => function (Relation $sp3f78ce) { $sp3f78ce->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); })); $sp5c7997 = $sp0fc69c->post('search', false); $sp5f3104 = $sp0fc69c->post('val', false); if ($sp5c7997 && $sp5f3104) { if ($sp5c7997 == 'simple') { return Response::success($sp3f78ce->where('category_id', $sp5f3104)->get(array('id', 'name'))); } elseif ($sp5c7997 == 'id') { $sp3f78ce->where('id', $sp5f3104); } else { $sp3f78ce->where($sp5c7997, 'like', '%' . $sp5f3104 . '%'); } } $sp3c5594 = (int) $sp0fc69c->post('category_id'); if ($sp3c5594 > 0) { $sp3f78ce->where('category_id', $sp3c5594); } $spbca6ef = $sp0fc69c->post('enabled'); if (strlen($spbca6ef)) { $sp3f78ce->whereIn('enabled', explode(',', $spbca6ef)); } $sp73a73e = $sp0fc69c->post('current_page', 1); $spfc5387 = $sp0fc69c->post('per_page', 20); $sp36eb9c = $sp3f78ce->orderBy('sort')->paginate($spfc5387, array('*'), 'page', $sp73a73e); foreach ($sp36eb9c->items() as $spcf7f28) { $spcf7f28->setAppends(array('count', 'url')); } return Response::success($sp36eb9c); } function sort(Request $sp0fc69c) { $spfc3b4d = (int) $sp0fc69c->post('id', -1); if (!$spfc3b4d) { return Response::forbidden(); } $spcf7f28 = $this->authQuery($sp0fc69c, \App\Product::class)->findOrFail($spfc3b4d); $spcf7f28->sort = (int) $sp0fc69c->post('sort', 1000); $spcf7f28->save(); return Response::success(); } function category_edit(Request $sp0fc69c) { $spfc3b4d = (int) $sp0fc69c->post('id'); $sp3c5594 = (int) $sp0fc69c->post('category_id'); if (!$spfc3b4d || !$sp3c5594) { return Response::forbidden(); } $spcf7f28 = $this->authQuery($sp0fc69c, \App\Product::class)->findOrFail($spfc3b4d); $spcf7f28->category_id = $sp3c5594; $spcf7f28->save(); return Response::success(); } function edit(Request $sp0fc69c) { $spfc3b4d = (int) $sp0fc69c->post('id'); $sp3c5594 = (int) $sp0fc69c->post('category_id'); $spb44bf2 = $sp0fc69c->post('name'); $spc94de5 = $sp0fc69c->post('description'); $sp210a5e = $sp0fc69c->post('instructions'); $spfe906a = $sp0fc69c->post('sort'); $spfe906a = $spfe906a === NULL ? 1000 : (int) $spfe906a; $spebf88d = (int) $sp0fc69c->post('count_warn', 0); $spffa180 = (int) $sp0fc69c->post('buy_min', 0); $spaab7d5 = (int) $sp0fc69c->post('buy_max', 0); $sp24e214 = $sp0fc69c->post('support_coupon', 0) === 'true'; $sp53fc75 = $sp0fc69c->post('password'); $spe12d92 = $sp0fc69c->post('password_open', 0) === 'true'; $sp719ad7 = (int) ($sp0fc69c->post('cost') * 100); $spf6f2b2 = (int) ($sp0fc69c->post('price') * 100); $spf00466 = $sp0fc69c->post('price_whole'); $spbca6ef = (int) $sp0fc69c->post('enabled'); if (System::_getInt('filter_words_open') === 1) { $sp4778c1 = explode('|', System::_get('filter_words')); if (($spc8aebe = Helper::filterWords($spb44bf2, $sp4778c1)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $spc8aebe); } if (($spc8aebe = Helper::filterWords($spc94de5, $sp4778c1)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $spc8aebe); } if (($spc8aebe = Helper::filterWords($sp210a5e, $sp4778c1)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $spc8aebe); } } if ($spffa180 < 1 || $spffa180 > 10000) { return Response::fail('最小购买量不能超过10000'); } if ($spaab7d5 < 1 || $spaab7d5 > 10000) { return Response::fail('最大购买量不能超过10000'); } if ($spebf88d < 0 || $spebf88d > 10000000) { return Response::fail('库存预警需要在0-10000000之间'); } if ($spfe906a < 0 || $spfe906a > 10000000) { return Response::fail('排序需要在0-10000000之间'); } if ($sp719ad7 > 1000000000 || $spf6f2b2 > 1000000000) { return Response::fail('商品价格不能超过10000000, 请重新输入'); } if ($sp719ad7 < 0 || $spf6f2b2 < 0) { return Response::fail('价格不能为负数'); } $spcf7f28 = $this->authQuery($sp0fc69c, \App\Product::class)->find($spfc3b4d); if (!$spcf7f28) { $spcf7f28 = new \App\Product(); $spcf7f28->count_sold = 0; $spcf7f28->user_id = $this->getUserIdOrFail($sp0fc69c); } else { if (\App\Card::whereProductId($spcf7f28->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($spffa180 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($spaab7d5 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } $spcf7f28->category_id = $sp3c5594; $spcf7f28->name = $spb44bf2; $sp557040 = new AntiXSS(); $spcf7f28->description = $sp557040->xss_clean($spc94de5); $spcf7f28->instructions = $sp557040->xss_clean($sp210a5e); $spcf7f28->sort = $spfe906a; $spcf7f28->buy_min = $spffa180; $spcf7f28->buy_max = $spaab7d5; $spcf7f28->count_warn = $spebf88d; $spcf7f28->support_coupon = $sp24e214; $spcf7f28->password = $sp53fc75; $spcf7f28->password_open = $spe12d92; $spcf7f28->cost = $sp719ad7; $spcf7f28->price = $spf6f2b2; $spcf7f28->price_whole = $spf00466; $spcf7f28->enabled = $spbca6ef; $spcf7f28->saveOrFail(); return Response::success(); } function enable(Request $sp0fc69c) { $spf179c6 = $sp0fc69c->post('ids', ''); if (strlen($spf179c6) < 1) { return Response::forbidden(); } $spbca6ef = (int) $sp0fc69c->post('enabled'); $this->authQuery($sp0fc69c, \App\Product::class)->whereIn('id', explode(',', $spf179c6))->update(array('enabled' => $spbca6ef)); return Response::success(); } function delete(Request $sp0fc69c) { $spf179c6 = $sp0fc69c->post('ids', ''); if (strlen($spf179c6) < 1) { return Response::forbidden(); } $this->authQuery($sp0fc69c, \App\Product::class)->whereIn('id', explode(',', $spf179c6))->delete(); return Response::success(); } }
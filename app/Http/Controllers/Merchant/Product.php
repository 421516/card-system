<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $sp2d83a6) { $spedc15a = $this->authQuery($sp2d83a6, \App\Product::class)->with(array('category' => function (Relation $spedc15a) { $spedc15a->select(array('id', 'name', 'password_open')); }))->with(array('cards' => function (Relation $spedc15a) { $spedc15a->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); })); $sp53975f = $sp2d83a6->post('search', false); $spffa78a = $sp2d83a6->post('val', false); if ($sp53975f && $spffa78a) { if ($sp53975f == 'simple') { return Response::success($spedc15a->where('category_id', $spffa78a)->get(array('id', 'name'))); } elseif ($sp53975f == 'id') { $spedc15a->where('id', $spffa78a); } else { $spedc15a->where($sp53975f, 'like', '%' . $spffa78a . '%'); } } $spd8dba1 = (int) $sp2d83a6->post('category_id'); if ($spd8dba1 > 0) { $spedc15a->where('category_id', $spd8dba1); } $spedd1cd = $sp2d83a6->post('enabled'); if (strlen($spedd1cd)) { $spedc15a->whereIn('enabled', explode(',', $spedd1cd)); } $sp9ca635 = $sp2d83a6->post('current_page', 1); $spb53279 = $sp2d83a6->post('per_page', 20); $sp8ea0e0 = $spedc15a->orderBy('sort')->paginate($spb53279, array('*'), 'page', $sp9ca635); foreach ($sp8ea0e0->items() as $spb0ecc4) { $spb0ecc4->setAppends(array('count', 'url')); } return Response::success($sp8ea0e0); } function sort(Request $sp2d83a6) { $spe6149b = (int) $sp2d83a6->post('id', -1); if (!$spe6149b) { return Response::forbidden(); } $spb0ecc4 = $this->authQuery($sp2d83a6, \App\Product::class)->findOrFail($spe6149b); $spb0ecc4->sort = (int) $sp2d83a6->post('sort', 1000); $spb0ecc4->save(); return Response::success(); } function category_edit(Request $sp2d83a6) { $spe6149b = (int) $sp2d83a6->post('id'); $spd8dba1 = (int) $sp2d83a6->post('category_id'); if (!$spe6149b || !$spd8dba1) { return Response::forbidden(); } $spb0ecc4 = $this->authQuery($sp2d83a6, \App\Product::class)->findOrFail($spe6149b); $spb0ecc4->category_id = $spd8dba1; $spb0ecc4->save(); return Response::success(); } function edit(Request $sp2d83a6) { $spe6149b = (int) $sp2d83a6->post('id'); $spd8dba1 = (int) $sp2d83a6->post('category_id'); $sp074e36 = $sp2d83a6->post('name'); $sp1fecb5 = $sp2d83a6->post('description'); $sp2caeaa = $sp2d83a6->post('instructions'); $spb026b4 = $sp2d83a6->post('sort'); $spb026b4 = $spb026b4 === NULL ? 1000 : (int) $spb026b4; $sp5d6280 = (int) $sp2d83a6->post('count_warn', 0); $spb21caf = (int) $sp2d83a6->post('buy_min', 0); $sp179fd2 = (int) $sp2d83a6->post('buy_max', 0); $sp8f6513 = $sp2d83a6->post('support_coupon', 0) === 'true'; $sp2a9512 = $sp2d83a6->post('password'); $sp557919 = $sp2d83a6->post('password_open', 0) === 'true'; $sp2ea26c = (int) ($sp2d83a6->post('cost') * 100); $spc430a1 = (int) ($sp2d83a6->post('price') * 100); $sp314810 = $sp2d83a6->post('price_whole'); $spedd1cd = (int) $sp2d83a6->post('enabled'); if (System::_getInt('filter_words_open') === 1) { $sp1bc521 = explode('|', System::_get('filter_words')); if (($sp46dd86 = Helper::filterWords($sp074e36, $sp1bc521)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp46dd86); } if (($sp46dd86 = Helper::filterWords($sp1fecb5, $sp1bc521)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp46dd86); } if (($sp46dd86 = Helper::filterWords($sp2caeaa, $sp1bc521)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp46dd86); } } if ($spb21caf < 1 || $spb21caf > 10000) { return Response::fail('最小购买量不能超过10000'); } if ($sp179fd2 < 1 || $sp179fd2 > 10000) { return Response::fail('最大购买量不能超过10000'); } if ($sp5d6280 < 0 || $sp5d6280 > 10000000) { return Response::fail('库存预警需要在0-10000000之间'); } if ($spb026b4 < 0 || $spb026b4 > 10000000) { return Response::fail('排序需要在0-10000000之间'); } if ($sp2ea26c > 1000000000 || $spc430a1 > 1000000000) { return Response::fail('商品价格不能超过10000000, 请重新输入'); } if ($sp2ea26c < 0 || $spc430a1 < 0) { return Response::fail('价格不能为负数'); } $spb0ecc4 = $this->authQuery($sp2d83a6, \App\Product::class)->find($spe6149b); if (!$spb0ecc4) { $spb0ecc4 = new \App\Product(); $spb0ecc4->count_sold = 0; $spb0ecc4->user_id = $this->getUserIdOrFail($sp2d83a6); } else { if (\App\Card::whereProductId($spb0ecc4->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($spb21caf !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($sp179fd2 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } $spb0ecc4->category_id = $spd8dba1; $spb0ecc4->name = $sp074e36; $spda4e40 = new AntiXSS(); $spb0ecc4->description = $spda4e40->xss_clean($sp1fecb5); $spb0ecc4->instructions = $spda4e40->xss_clean($sp2caeaa); $spb0ecc4->sort = $spb026b4; $spb0ecc4->buy_min = $spb21caf; $spb0ecc4->buy_max = $sp179fd2; $spb0ecc4->count_warn = $sp5d6280; $spb0ecc4->support_coupon = $sp8f6513; $spb0ecc4->password = $sp2a9512; $spb0ecc4->password_open = $sp557919; $spb0ecc4->cost = $sp2ea26c; $spb0ecc4->price = $spc430a1; $spb0ecc4->price_whole = $sp314810; $spb0ecc4->enabled = $spedd1cd; $spb0ecc4->saveOrFail(); return Response::success(); } function enable(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } $spedd1cd = (int) $sp2d83a6->post('enabled'); $this->authQuery($sp2d83a6, \App\Product::class)->whereIn('id', explode(',', $sp1b3f11))->update(array('enabled' => $spedd1cd)); return Response::success(); } function delete(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } $this->authQuery($sp2d83a6, \App\Product::class)->whereIn('id', explode(',', $sp1b3f11))->delete(); return Response::success(); } }
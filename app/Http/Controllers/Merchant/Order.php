<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp845342) { $sp3eff46 = $this->authQuery($sp845342, \App\Order::class); $sp68f2fa = (int) $sp845342->post('category_id'); $sp3c4c73 = (int) $sp845342->post('product_id'); $spd6630f = (int) $sp845342->post('profit'); $sp060cd1 = $sp68f2fa === \App\Product::ID_API || $sp3c4c73 === \App\Product::ID_API; $sp9d8b43 = $sp845342->post('search', false); $sp752740 = $sp845342->post('val', false); if ($sp9d8b43 && $sp752740) { if ($sp9d8b43 == 'id' || $sp9d8b43 == 'order_no' || $sp9d8b43 === 'pay_trade_no' || $sp9d8b43 === 'api_out_no') { $sp3eff46->where($sp9d8b43, $sp752740); } else { $sp3eff46->where($sp9d8b43, 'like', '%' . $sp752740 . '%'); } } if ($sp68f2fa > 0) { if ($sp3c4c73 > 0) { $sp3eff46->where('product_id', $sp3c4c73); } else { $sp3eff46->whereHas('product', function ($sp3eff46) use($sp68f2fa) { $sp3eff46->where('category_id', $sp68f2fa); }); } } $spcb5a6b = (int) $sp845342->post('recent', 0); if ($spcb5a6b) { $spb77c39 = (new Carbon())->addDay(-$spcb5a6b); $sp3eff46->where('paid_at', '>=', $spb77c39); } else { $spb77c39 = $sp845342->post('start_at', false); if (strlen($spb77c39)) { $sp3eff46->where('paid_at', '>=', $spb77c39 . ' 00:00:00'); } $sp2fbbea = $sp845342->post('end_at', false); if (strlen($sp2fbbea)) { $sp3eff46->where('paid_at', '<=', $sp2fbbea . ' 23:59:59'); } } if ($spd6630f) { $sp3eff46->where('status', \App\Order::STATUS_SUCCESS); $spae3886 = clone $sp3eff46; $sp4cb22b = $spae3886->selectRaw('SUM(`income`) as income, SUM(`income`-`cost`) as profit')->first(); } else { $sp406289 = $sp845342->post('status'); if (strlen($sp406289)) { $sp3eff46->whereIn('status', explode(',', $sp406289)); } else { $sp3eff46->where('status', '!=', \App\Order::STATUS_UNPAY); } if ($sp060cd1) { $sp3eff46->where('product_id', \App\Product::ID_API); } else { $sp3eff46->where('product_id', '>', 0); $sp3eff46->with(array('product' => function (Relation $sp3eff46) { $sp3eff46->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp3eff46) { $sp3eff46->select(array('id', 'card')); })); } } $sp3eff46->with(array('pay' => function (Relation $sp3eff46) { $sp3eff46->select(array('id', 'name')); })); $sp2d1093 = $sp845342->post('current_page', 1); $spfe0c85 = $sp845342->post('per_page', 20); $spd1b01a = $sp3eff46->orderBy('id', 'DESC')->paginate($spfe0c85, array('*'), 'page', $sp2d1093); if (!$this->isAdmin()) { foreach ($spd1b01a->items() as $spc9222b) { $spc9222b->addHidden(array('system_fee')); } } if ($spd6630f) { $spd1b01a = $spd1b01a->toArray(); $spd1b01a['profit_sum'] = $sp4cb22b; } return Response::success($spd1b01a); } function stat(Request $sp845342) { $sp071519 = (int) $sp845342->input('day', 7); $spd1b01a = $this->authQuery($sp845342, \App\Order::class)->where(function ($sp3eff46) { $sp3eff46->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp071519 + 1))->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`income`) as "sum"')->get()->toArray(); $spec9b7c = array(); foreach ($spd1b01a as $spb18bb2) { $spec9b7c[$spb18bb2['date']] = array((int) $spb18bb2['count'], (int) $spb18bb2['sum']); } return Response::success($spec9b7c); } function info(Request $sp845342) { $sp3a2be3 = (int) $sp845342->post('id'); if (!$sp3a2be3) { return Response::forbidden(); } $spc9222b = $this->authQuery($sp845342, \App\Order::class)->with(array('pay' => function (Relation $sp3eff46) { $sp3eff46->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp3eff46) { $sp3eff46->select(array('id', 'card')); }))->findOrFail($sp3a2be3); $spc9222b->addHidden(array('system_fee')); return Response::success($spc9222b); } function remark(Request $sp845342) { $sp3a2be3 = (int) $sp845342->post('id'); if (!$sp3a2be3) { return Response::forbidden(); } $spc9222b = $this->authQuery($sp845342, \App\Order::class)->findOrFail($sp3a2be3); $spc9222b->remark = $sp845342->post('remark'); $spc9222b->save(); return Response::success(); } function ship(Request $sp845342) { $this->validate($sp845342, array('id' => 'required|integer')); $spc9222b = $this->authQuery($sp845342, \App\Order::class)->findOrFail($sp845342->post('id')); if ($spc9222b->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } $sp707f3d = null; if (FundHelper::orderSuccess($spc9222b, function () use(&$spc9222b, &$sp707f3d) { $spc9222b = \App\Order::where('id', $spc9222b->id)->lockForUpdate()->firstOrFail(); if ($spc9222b->cards && count($spc9222b->cards)) { $sp707f3d = '该订单已经发货，无需再次发货'; return false; } $sp7c7b9e = \App\Card::where('product_id', $spc9222b->product_id)->whereRaw('`count_sold`<`count_all`')->take($spc9222b->count)->lockForUpdate()->get(); if (count($sp7c7b9e) !== $spc9222b->count) { $sp707f3d = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spc9222b->status = \App\Order::STATUS_SUCCESS; $spc9222b->saveOrFail(); $spa6b16b = array(); $spaeb82d = ''; $sp22c2d1 = array(); foreach ($sp7c7b9e as $spcee439) { $spaeb82d .= $spcee439->card . '<br>'; $spa6b16b[] = $spcee439->id; $sp22c2d1[] = array('card' => $spcee439->card); } $spc9222b->cards()->attach($spa6b16b); \App\Card::whereIn('id', $spa6b16b)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp0f05cd = '订单#' . $spc9222b->order_no . '&nbsp;已支付，卡号列表：'; $sp3bcdc1 = str_replace('
', '<br>', $spaeb82d); try { \Mail::to($spc9222b->email)->Queue(new OrderShipped($spc9222b, $sp0f05cd, $sp3bcdc1)); $spc9222b->email_sent = true; $spc9222b->saveOrFail(); } catch (\Exception $sp805d3e) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('Order.ship error, order_no:' . $spc9222b->order_no . ', email:' . $spc9222b->email . ', cards:' . $sp3bcdc1 . ', Exception:' . $sp805d3e->getMessage()); \App\Library\LogHelper::setLogFile('card'); } $spc9222b->addHidden(array('system_fee')); $spc9222b = $spc9222b->toArray(); $spc9222b['cards'] = $sp22c2d1; return \App\Order::STATUS_SUCCESS; } })) { if (!$sp707f3d) { return Response::success($spc9222b); } else { return Response::fail($sp707f3d ? $sp707f3d : '未知错误'); } } else { \Log::error('Order.ship error, order_no:' . $spc9222b->order_no); return Response::fail($sp707f3d ? $sp707f3d : '数据库繁忙, 请联系客服'); } } }
<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spdd9f33) { $sp26c3c2 = $this->authQuery($spdd9f33, \App\Order::class); $sp4a6190 = (int) $spdd9f33->post('category_id'); $spfafc60 = (int) $spdd9f33->post('product_id'); $spe39fd3 = (int) $spdd9f33->post('profit'); $spc12d33 = $sp4a6190 === \App\Product::ID_API || $spfafc60 === \App\Product::ID_API; $sp282adb = $spdd9f33->post('search', false); $spb80b3f = $spdd9f33->post('val', false); if ($sp282adb && $spb80b3f) { if ($sp282adb == 'id' || $sp282adb == 'order_no' || $sp282adb === 'pay_trade_no' || $sp282adb === 'api_out_no') { $sp26c3c2->where($sp282adb, $spb80b3f); } else { $sp26c3c2->where($sp282adb, 'like', '%' . $spb80b3f . '%'); } } if ($sp4a6190 > 0) { if ($spfafc60 > 0) { $sp26c3c2->where('product_id', $spfafc60); } else { $sp26c3c2->whereHas('product', function ($sp26c3c2) use($sp4a6190) { $sp26c3c2->where('category_id', $sp4a6190); }); } } $sp90cbaf = (int) $spdd9f33->post('recent', 0); if ($sp90cbaf) { $sp6e0855 = (new Carbon())->addDay(-$sp90cbaf); $sp26c3c2->where('paid_at', '>=', $sp6e0855); } else { $sp6e0855 = $spdd9f33->post('start_at', false); if (strlen($sp6e0855)) { $sp26c3c2->where('paid_at', '>=', $sp6e0855 . ' 00:00:00'); } $sp4d4028 = $spdd9f33->post('end_at', false); if (strlen($sp4d4028)) { $sp26c3c2->where('paid_at', '<=', $sp4d4028 . ' 23:59:59'); } } if ($spe39fd3) { $sp26c3c2->where('status', \App\Order::STATUS_SUCCESS); $sp4edc5b = clone $sp26c3c2; $sp02e278 = $sp4edc5b->selectRaw('SUM(`income`) as income, SUM(`income`-`cost`) as profit')->first(); } else { $spb55c72 = $spdd9f33->post('status'); if (strlen($spb55c72)) { $sp26c3c2->whereIn('status', explode(',', $spb55c72)); } else { $sp26c3c2->where('status', '!=', \App\Order::STATUS_UNPAY); } if ($spc12d33) { $sp26c3c2->where('product_id', \App\Product::ID_API); } else { $sp26c3c2->where('product_id', '>', 0); $sp26c3c2->with(array('product' => function (Relation $sp26c3c2) { $sp26c3c2->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp26c3c2) { $sp26c3c2->select(array('id', 'card')); })); } } $sp26c3c2->with(array('pay' => function (Relation $sp26c3c2) { $sp26c3c2->select(array('id', 'name')); })); $sp6f7226 = $spdd9f33->post('current_page', 1); $spaba533 = $spdd9f33->post('per_page', 20); $spec1114 = $sp26c3c2->orderBy('id', 'DESC')->paginate($spaba533, array('*'), 'page', $sp6f7226); if (!$this->isAdmin()) { foreach ($spec1114->items() as $sp804c16) { $sp804c16->addHidden(array('system_fee')); } } if ($spe39fd3) { $spec1114 = $spec1114->toArray(); $spec1114['profit_sum'] = $sp02e278; } return Response::success($spec1114); } function stat(Request $spdd9f33) { $sp96acf1 = (int) $spdd9f33->input('day', 7); $spec1114 = $this->authQuery($spdd9f33, \App\Order::class)->where(function ($sp26c3c2) { $sp26c3c2->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp96acf1 + 1))->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`income`) as "sum"')->get()->toArray(); $sp123706 = array(); foreach ($spec1114 as $spa41ce4) { $sp123706[$spa41ce4['date']] = array((int) $spa41ce4['count'], (int) $spa41ce4['sum']); } return Response::success($sp123706); } function info(Request $spdd9f33) { $sp403bd7 = (int) $spdd9f33->post('id'); if (!$sp403bd7) { return Response::forbidden(); } $sp804c16 = $this->authQuery($spdd9f33, \App\Order::class)->with(array('pay' => function (Relation $sp26c3c2) { $sp26c3c2->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp26c3c2) { $sp26c3c2->select(array('id', 'card')); }))->findOrFail($sp403bd7); $sp804c16->addHidden(array('system_fee')); return Response::success($sp804c16); } function remark(Request $spdd9f33) { $sp403bd7 = (int) $spdd9f33->post('id'); if (!$sp403bd7) { return Response::forbidden(); } $sp804c16 = $this->authQuery($spdd9f33, \App\Order::class)->findOrFail($sp403bd7); $sp804c16->remark = $spdd9f33->post('remark'); $sp804c16->save(); return Response::success(); } function ship(Request $spdd9f33) { $this->validate($spdd9f33, array('id' => 'required|integer')); $sp804c16 = $this->authQuery($spdd9f33, \App\Order::class)->findOrFail($spdd9f33->post('id')); if ($sp804c16->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } $sp484015 = null; if (FundHelper::orderSuccess($sp804c16, function () use(&$sp804c16, &$sp484015) { $sp804c16 = \App\Order::where('id', $sp804c16->id)->lockForUpdate()->firstOrFail(); if ($sp804c16->cards && count($sp804c16->cards)) { $sp484015 = '该订单已经发货，无需再次发货'; return false; } $sp8a7554 = \App\Card::where('product_id', $sp804c16->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp804c16->count)->lockForUpdate()->get(); if (count($sp8a7554) !== $sp804c16->count) { $sp484015 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp804c16->status = \App\Order::STATUS_SUCCESS; $sp804c16->saveOrFail(); $spb3aeeb = array(); $sp5e8cfb = ''; $sp565c67 = array(); foreach ($sp8a7554 as $sp062ec9) { $sp5e8cfb .= $sp062ec9->card . '<br>'; $spb3aeeb[] = $sp062ec9->id; $sp565c67[] = array('card' => $sp062ec9->card); } $sp804c16->cards()->attach($spb3aeeb); \App\Card::whereIn('id', $spb3aeeb)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp059fe1 = '订单#' . $sp804c16->order_no . '&nbsp;已支付，卡号列表：'; $sp8b2411 = str_replace('
', '<br>', $sp5e8cfb); try { \Mail::to($sp804c16->email)->Queue(new OrderShipped($sp804c16, $sp059fe1, $sp8b2411)); $sp804c16->email_sent = true; $sp804c16->saveOrFail(); } catch (\Exception $sp9e5801) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('Order.ship error, order_no:' . $sp804c16->order_no . ', email:' . $sp804c16->email . ', cards:' . $sp8b2411 . ', Exception:' . $sp9e5801->getMessage()); \App\Library\LogHelper::setLogFile('card'); } $sp804c16->addHidden(array('system_fee')); $sp804c16 = $sp804c16->toArray(); $sp804c16['cards'] = $sp565c67; return \App\Order::STATUS_SUCCESS; } })) { if (!$sp484015) { return Response::success($sp804c16); } else { return Response::fail($sp484015 ? $sp484015 : '未知错误'); } } else { \Log::error('Order.ship error, order_no:' . $sp804c16->order_no); return Response::fail($sp484015 ? $sp484015 : '数据库繁忙, 请联系客服'); } } }
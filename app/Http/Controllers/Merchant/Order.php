<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $sp2d83a6) { $spedc15a = $this->authQuery($sp2d83a6, \App\Order::class); $spd8dba1 = (int) $sp2d83a6->post('category_id'); $spd09702 = (int) $sp2d83a6->post('product_id'); $sp1d5bd7 = (int) $sp2d83a6->post('profit'); $sp2d5593 = $spd8dba1 === \App\Product::ID_API || $spd09702 === \App\Product::ID_API; $sp53975f = $sp2d83a6->post('search', false); $spffa78a = $sp2d83a6->post('val', false); if ($sp53975f && $spffa78a) { if ($sp53975f == 'id' || $sp53975f == 'order_no' || $sp53975f === 'pay_trade_no' || $sp53975f === 'api_out_no') { $spedc15a->where($sp53975f, $spffa78a); } else { $spedc15a->where($sp53975f, 'like', '%' . $spffa78a . '%'); } } if ($spd8dba1 > 0) { if ($spd09702 > 0) { $spedc15a->where('product_id', $spd09702); } else { $spedc15a->whereHas('product', function ($spedc15a) use($spd8dba1) { $spedc15a->where('category_id', $spd8dba1); }); } } $spd4639a = (int) $sp2d83a6->post('recent', 0); if ($spd4639a) { $sp6eb926 = (new Carbon())->addDay(-$spd4639a); $spedc15a->where('paid_at', '>=', $sp6eb926); } else { $sp6eb926 = $sp2d83a6->post('start_at', false); if (strlen($sp6eb926)) { $spedc15a->where('paid_at', '>=', $sp6eb926 . ' 00:00:00'); } $spdcf8f2 = $sp2d83a6->post('end_at', false); if (strlen($spdcf8f2)) { $spedc15a->where('paid_at', '<=', $spdcf8f2 . ' 23:59:59'); } } if ($sp1d5bd7) { $spedc15a->where('status', \App\Order::STATUS_SUCCESS); $sp453779 = clone $spedc15a; $sp8fc096 = $sp453779->selectRaw('SUM(`income`) as income, SUM(`income`-`cost`) as profit')->first(); } else { $spd4997e = $sp2d83a6->post('status'); if (strlen($spd4997e)) { $spedc15a->whereIn('status', explode(',', $spd4997e)); } else { $spedc15a->where('status', '!=', \App\Order::STATUS_UNPAY); } if ($sp2d5593) { $spedc15a->where('product_id', \App\Product::ID_API); } else { $spedc15a->where('product_id', '>', 0); $spedc15a->with(array('product' => function (Relation $spedc15a) { $spedc15a->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spedc15a) { $spedc15a->select(array('id', 'card')); })); } } $spedc15a->with(array('pay' => function (Relation $spedc15a) { $spedc15a->select(array('id', 'name')); })); $sp9ca635 = $sp2d83a6->post('current_page', 1); $spb53279 = $sp2d83a6->post('per_page', 20); $sp8ea0e0 = $spedc15a->orderBy('id', 'DESC')->paginate($spb53279, array('*'), 'page', $sp9ca635); if (!$this->isAdmin()) { foreach ($sp8ea0e0->items() as $sp33b59d) { $sp33b59d->addHidden(array('system_fee')); } } if ($sp1d5bd7) { $sp8ea0e0 = $sp8ea0e0->toArray(); $sp8ea0e0['profit_sum'] = $sp8fc096; } return Response::success($sp8ea0e0); } function stat(Request $sp2d83a6) { $sp08cfa6 = (int) $sp2d83a6->input('day', 7); $sp8ea0e0 = $this->authQuery($sp2d83a6, \App\Order::class)->where(function ($spedc15a) { $spedc15a->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp08cfa6 + 1))->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`income`) as "sum"')->get()->toArray(); $sp46dd86 = array(); foreach ($sp8ea0e0 as $sp8f5e71) { $sp46dd86[$sp8f5e71['date']] = array((int) $sp8f5e71['count'], (int) $sp8f5e71['sum']); } return Response::success($sp46dd86); } function info(Request $sp2d83a6) { $spe6149b = (int) $sp2d83a6->post('id'); if (!$spe6149b) { return Response::forbidden(); } $sp33b59d = $this->authQuery($sp2d83a6, \App\Order::class)->with(array('pay' => function (Relation $spedc15a) { $spedc15a->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spedc15a) { $spedc15a->select(array('id', 'card')); }))->findOrFail($spe6149b); $sp33b59d->addHidden(array('system_fee')); return Response::success($sp33b59d); } function remark(Request $sp2d83a6) { $spe6149b = (int) $sp2d83a6->post('id'); if (!$spe6149b) { return Response::forbidden(); } $sp33b59d = $this->authQuery($sp2d83a6, \App\Order::class)->findOrFail($spe6149b); $sp33b59d->remark = $sp2d83a6->post('remark'); $sp33b59d->save(); return Response::success(); } function ship(Request $sp2d83a6) { $this->validate($sp2d83a6, array('id' => 'required|integer')); $sp33b59d = $this->authQuery($sp2d83a6, \App\Order::class)->findOrFail($sp2d83a6->post('id')); if ($sp33b59d->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } $sp1fe664 = null; if (FundHelper::orderSuccess($sp33b59d, function () use(&$sp33b59d, &$sp1fe664) { $sp33b59d = \App\Order::where('id', $sp33b59d->id)->lockForUpdate()->firstOrFail(); if ($sp33b59d->cards && count($sp33b59d->cards)) { $sp1fe664 = '该订单已经发货，无需再次发货'; return false; } $sp483e71 = \App\Card::where('product_id', $sp33b59d->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp33b59d->count)->lockForUpdate()->get(); if (count($sp483e71) !== $sp33b59d->count) { $sp1fe664 = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $sp33b59d->status = \App\Order::STATUS_SUCCESS; $sp33b59d->saveOrFail(); $sp88bf6e = array(); $spde7b64 = ''; $sp7581fb = array(); foreach ($sp483e71 as $spc69d52) { $spde7b64 .= $spc69d52->card . '<br>'; $sp88bf6e[] = $spc69d52->id; $sp7581fb[] = array('card' => $spc69d52->card); } $sp33b59d->cards()->attach($sp88bf6e); \App\Card::whereIn('id', $sp88bf6e)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp109afa = '订单#' . $sp33b59d->order_no . '&nbsp;已支付，卡号列表：'; $spba2dc9 = str_replace('
', '<br>', $spde7b64); try { \Mail::to($sp33b59d->email)->Queue(new OrderShipped($sp33b59d, $sp109afa, $spba2dc9)); $sp33b59d->email_sent = true; $sp33b59d->saveOrFail(); } catch (\Exception $spfda1c7) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('Order.ship error, order_no:' . $sp33b59d->order_no . ', email:' . $sp33b59d->email . ', cards:' . $spba2dc9 . ', Exception:' . $spfda1c7->getMessage()); \App\Library\LogHelper::setLogFile('card'); } $sp33b59d->addHidden(array('system_fee')); $sp33b59d = $sp33b59d->toArray(); $sp33b59d['cards'] = $sp7581fb; return \App\Order::STATUS_SUCCESS; } })) { if (!$sp1fe664) { return Response::success($sp33b59d); } else { return Response::fail($sp1fe664 ? $sp1fe664 : '未知错误'); } } else { \Log::error('Order.ship error, order_no:' . $sp33b59d->order_no); return Response::fail($sp1fe664 ? $sp1fe664 : '数据库繁忙, 请联系客服'); } } }
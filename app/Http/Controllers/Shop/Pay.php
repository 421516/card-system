<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Product; use App\Order; use App\Library\Response; use App\Library\Pay\Pay as PayApi; use App\Library\Geetest; use App\Mail\OrderShipped; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cookie; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp2d83a6, $sp2e5c77, $spb6d710, $sp3e72e0, $sp66771d) { try { (new PayApi())->goPay($sp3e72e0, $sp2e5c77, $spb6d710, $spb6d710, $sp66771d); return self::renderResult($sp2d83a6, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $spfda1c7) { return self::renderResult($sp2d83a6, array('msg' => $spfda1c7->getMessage())); } } function buy(Request $sp2d83a6) { if ((int) System::_get('vcode_shop_buy') === 1) { $sp46dd86 = Geetest\API::verify($sp2d83a6->input('geetest_challenge'), $sp2d83a6->input('geetest_validate'), $sp2d83a6->input('geetest_seccode')); if (!$sp46dd86) { return self::renderResult($sp2d83a6, array('msg' => '系统无法接受您的验证结果，请刷新页面后重试。')); } } $sp04bdf6 = Cookie::get('customer'); if (strlen($sp04bdf6) !== 32) { return self::renderResult($sp2d83a6, array('msg' => '请返回页面重新下单')); } $spd8dba1 = (int) $sp2d83a6->input('category_id'); $spd09702 = (int) $sp2d83a6->input('product_id'); $sp93b866 = (int) $sp2d83a6->input('count'); $sp36c873 = $sp2d83a6->input('coupon'); $sp2866eb = $sp2d83a6->input('email'); $spb66869 = (int) $sp2d83a6->input('pay_id'); if (!$spd8dba1 || !$spd09702) { return self::renderResult($sp2d83a6, array('msg' => '请选择商品')); } if (strlen($sp2866eb) < 1) { return self::renderResult($sp2d83a6, array('msg' => '请输入邮箱')); } $sp58b2cb = Category::findOrFail($spd8dba1); if ($sp58b2cb->password_open) { if ($sp58b2cb->password !== $sp2d83a6->input('category_password')) { return Response::fail('分类密码输入错误'); } } $spb0ecc4 = Product::where('id', $spd09702)->where('category_id', $spd8dba1)->where('enabled', 1)->with(array('cards' => function (Relation $spedc15a) { $spedc15a->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($spb0ecc4 == null || $spb0ecc4->user == null) { return self::renderResult($sp2d83a6, array('msg' => '该商品未找到，请重新选择')); } if ($spb0ecc4->password_open) { if ($spb0ecc4->password !== $sp2d83a6->input('product_password')) { return Response::fail('分类密码输入错误'); } } if ($sp93b866 < $spb0ecc4->buy_min) { return self::renderResult($sp2d83a6, array('msg' => '该商品最少购买' . $spb0ecc4->buy_min . '件，请重新选择')); } if ($sp93b866 > $spb0ecc4->buy_max) { return self::renderResult($sp2d83a6, array('msg' => '该商品限购' . $spb0ecc4->buy_max . '件，请重新选择')); } $spb0ecc4->setAttribute('count', count($spb0ecc4->cards) ? $spb0ecc4->cards[0]->count : 0); if ($spb0ecc4->count < $sp93b866) { return self::renderResult($sp2d83a6, array('msg' => '该商品库存不足')); } $sp77c9d8 = \App\Pay::find($spb66869); if ($sp77c9d8 == null || !$sp77c9d8->enabled) { return self::renderResult($sp2d83a6, array('msg' => '支付方式未找到，请重新选择')); } $sp562be2 = $spb0ecc4->price; if ($spb0ecc4->price_whole) { $sp314810 = json_decode($spb0ecc4->price_whole, true); for ($spcecaa9 = count($sp314810) - 1; $spcecaa9 >= 0; $spcecaa9--) { if ($sp93b866 >= (int) $sp314810[$spcecaa9][0]) { $sp562be2 = (int) $sp314810[$spcecaa9][1]; break; } } } $spc430a1 = $sp93b866 * $sp562be2; $sp66771d = $spc430a1; $spfae2ac = null; if ($spb0ecc4->support_coupon && strlen($sp36c873) > 0) { $sp8f11d6 = \App\Coupon::where('user_id', $spb0ecc4->user_id)->where('coupon', $sp36c873)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp8f11d6 as $sp1c59c9) { if ($sp1c59c9->category_id === -1 || $sp1c59c9->category_id === $spd8dba1 && ($sp1c59c9->product_id === -1 || $sp1c59c9->product_id === $spd09702)) { if ($sp1c59c9->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp66771d > $sp1c59c9->discount_val) { $spfae2ac = $sp1c59c9; $sp66771d = $sp66771d - $sp1c59c9->discount_val; break; } if ($sp1c59c9->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $spfae2ac = $sp1c59c9; $sp66771d = $sp66771d - intval($sp66771d * $sp1c59c9->discount_val / 100); break; } } } } if ($spfae2ac) { $spfae2ac->status = \App\Coupon::STATUS_USED; $spfae2ac->count_used++; $spfae2ac->save(); } $speab832 = (int) round($sp66771d * $sp77c9d8->fee_system); $sp88ee84 = $sp66771d - $speab832; $sp2e5c77 = date('YmdHis') . str_random(5); while (Order::whereOrderNo($sp2e5c77)->exists()) { $sp2e5c77 = date('YmdHis') . str_random(5); } Order::insert(array('user_id' => $spb0ecc4->user_id, 'order_no' => $sp2e5c77, 'product_id' => $spd09702, 'count' => $sp93b866, 'email' => $sp2866eb, 'ip' => Helper::getIP(), 'customer' => $sp04bdf6, 'email_sent' => false, 'cost' => $sp93b866 * $spb0ecc4->cost, 'price' => $spc430a1, 'discount' => $spc430a1 - $sp66771d, 'paid' => $sp66771d, 'pay_id' => $sp77c9d8->id, 'fee' => $speab832, 'system_fee' => $speab832, 'income' => $sp88ee84, 'status' => Order::STATUS_UNPAY, 'created_at' => Carbon::now())); $spb6d710 = $sp2e5c77; return $this->goPay($sp2d83a6, $sp2e5c77, $spb6d710, $sp77c9d8, $sp66771d); } function pay(Request $sp2d83a6, $sp2e5c77) { $sp33b59d = Order::whereOrderNo($sp2e5c77)->first(); if ($sp33b59d == null) { return self::renderResult($sp2d83a6, array('msg' => '订单未找到，请重试')); } if ($sp33b59d->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp2e5c77); } $sp0e0593 = 'pay: ' . $sp33b59d->pay_id; $sp3e72e0 = $sp33b59d->pay; if (!$sp3e72e0) { \Log::error($sp0e0593 . ' cannot find Pay'); return $this->renderResult($sp2d83a6, array('msg' => '支付方式未找到')); } $sp0e0593 .= ',' . $sp3e72e0->driver; $spd82bcd = json_decode($sp3e72e0->config, true); $spd82bcd['payway'] = $sp3e72e0->way; $spd82bcd['out_trade_no'] = $sp2e5c77; try { $this->payApi = PayApi::getDriver($sp3e72e0->id, $sp3e72e0->driver); } catch (\Exception $spfda1c7) { \Log::error($sp0e0593 . ' cannot find Driver: ' . $spfda1c7->getMessage()); return $this->renderResult($sp2d83a6, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($spd82bcd, function ($sp2e5c77, $sp90753f, $sp5b4f94) use($sp2d83a6) { try { $this->shipOrder($sp2d83a6, $sp2e5c77, $sp90753f, $sp5b4f94, FALSE); } catch (\Exception $spfda1c7) { $this->renderResult($sp2d83a6, array('success' => false, 'msg' => $spfda1c7->getMessage())); } })) { \Log::notice($sp0e0593 . ' already success' . '

'); return redirect('/pay/result/' . $sp2e5c77); } $spb0ecc4 = Product::where('id', $sp33b59d->product_id)->where('enabled', 1)->with(array('cards' => function (Relation $spedc15a) { $spedc15a->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($spb0ecc4 == null) { return self::renderResult($sp2d83a6, array('msg' => '该商品已下架')); } $spb0ecc4->setAttribute('count', count($spb0ecc4->cards) ? $spb0ecc4->cards[0]->count : 0); if ($spb0ecc4->count < $sp33b59d->count) { return self::renderResult($sp2d83a6, array('msg' => '该商品库存不足')); } $spb6d710 = $sp2e5c77; return $this->goPay($sp2d83a6, $sp2e5c77, $spb6d710, $sp3e72e0, $sp33b59d->paid); } function qrcode(Request $sp2d83a6, $sp2e5c77, $sp8237cb) { $sp33b59d = Order::whereOrderNo($sp2e5c77)->with('product')->first(); if ($sp33b59d == null) { return self::renderResult($sp2d83a6, array('msg' => '订单未找到，请重试')); } if ($sp33b59d->product_id !== \App\Product::ID_API && $sp33b59d->product == null) { return self::renderResult($sp2d83a6, array('msg' => '商品未找到，请重试')); } $sp8fa505 = $sp2d83a6->get('url'); return view('pay/' . $sp8237cb, array('pay_id' => $sp33b59d->pay_id, 'name' => $sp33b59d->product_id === \App\Product::ID_API ? $sp33b59d->api_out_no : $sp33b59d->product->name, 'qrcode' => $sp8fa505, 'id' => $sp2e5c77)); } function qrQuery(Request $sp2d83a6, $spb66869) { $spc17bf5 = $sp2d83a6->input('id', ''); return self::payReturn($sp2d83a6, $spb66869, $spc17bf5); } function payReturn(Request $sp2d83a6, $spb66869, $sp6281ad = '') { $sp0e0593 = 'payReturn: ' . $spb66869; \Log::debug($sp0e0593); $sp3e72e0 = \App\Pay::where('id', $spb66869)->first(); if (!$sp3e72e0) { return $this->renderResult($sp2d83a6, array('success' => 0, 'msg' => '支付方式错误')); } $sp0e0593 .= ',' . $sp3e72e0->driver; if (strlen($sp6281ad) > 0) { $sp33b59d = Order::whereOrderNo($sp6281ad)->first(); if ($sp33b59d && ($sp33b59d->status === Order::STATUS_PAID || $sp33b59d->status === Order::STATUS_SUCCESS)) { \Log::notice($sp0e0593 . ' already success' . '

'); if ($sp2d83a6->ajax()) { return self::renderResult($sp2d83a6, array('success' => 1, 'data' => '/pay/result/' . $sp6281ad), array('order' => $sp33b59d)); } else { return redirect('/pay/result/' . $sp6281ad); } } } try { $this->payApi = PayApi::getDriver($sp3e72e0->id, $sp3e72e0->driver); } catch (\Exception $spfda1c7) { \Log::error($sp0e0593 . ' cannot find Driver: ' . $spfda1c7->getMessage()); return $this->renderResult($sp2d83a6, array('success' => 0, 'msg' => '支付驱动未找到')); } $spd82bcd = json_decode($sp3e72e0->config, true); $spd82bcd['out_trade_no'] = $sp6281ad; $spd82bcd['payway'] = $sp3e72e0->way; \Log::debug($sp0e0593 . ' will verify'); if ($this->payApi->verify($spd82bcd, function ($sp2e5c77, $sp90753f, $sp5b4f94) use($sp2d83a6, $sp0e0593, &$sp6281ad) { $sp6281ad = $sp2e5c77; try { \Log::debug($sp0e0593 . " shipOrder start, order_no: {$sp2e5c77}, amount: {$sp90753f}, trade_no: {$sp5b4f94}"); $this->shipOrder($sp2d83a6, $sp2e5c77, $sp90753f, $sp5b4f94, FALSE); \Log::debug($sp0e0593 . ' shipOrder end, order_no: ' . $sp2e5c77); } catch (\Exception $spfda1c7) { \Log::error($sp0e0593 . ' shipOrder Exception: ' . $spfda1c7->getMessage()); } })) { \Log::debug($sp0e0593 . ' verify finished: 1' . '

'); if ($sp2d83a6->ajax()) { return self::renderResult($sp2d83a6, array('success' => 1, 'data' => '/pay/result/' . $sp6281ad)); } else { return redirect('/pay/result/' . $sp6281ad); } } else { \Log::debug($sp0e0593 . ' verify finished: 0' . '

'); return $this->renderResult($sp2d83a6, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $sp2d83a6, $spb66869) { $sp0e0593 = 'payNotify pay_id: ' . $spb66869; \Log::debug($sp0e0593); $sp3e72e0 = \App\Pay::where('id', $spb66869)->first(); if (!$sp3e72e0) { \Log::error($sp0e0593 . ' cannot find PayModel'); echo 'fail'; die; } $sp0e0593 .= ',' . $sp3e72e0->driver; try { $this->payApi = PayApi::getDriver($sp3e72e0->id, $sp3e72e0->driver); } catch (\Exception $spfda1c7) { \Log::error($sp0e0593 . ' cannot find Driver: ' . $spfda1c7->getMessage()); echo 'fail'; die; } $spd82bcd = json_decode($sp3e72e0->config, true); $spd82bcd['payway'] = $sp3e72e0->way; $spd82bcd['isNotify'] = true; \Log::debug($sp0e0593 . ' will verify'); $sp46dd86 = $this->payApi->verify($spd82bcd, function ($sp2e5c77, $sp90753f, $sp5b4f94) use($sp2d83a6, $sp0e0593) { try { \Log::debug($sp0e0593 . " shipOrder start, order_no: {$sp2e5c77}, amount: {$sp90753f}, trade_no: {$sp5b4f94}"); $this->shipOrder($sp2d83a6, $sp2e5c77, $sp90753f, $sp5b4f94, FALSE); \Log::debug($sp0e0593 . ' shipOrder end, order_no: ' . $sp2e5c77); } catch (\Exception $spfda1c7) { \Log::error($sp0e0593 . ' shipOrder Exception: ' . $spfda1c7->getMessage()); } }); \Log::debug($sp0e0593 . ' notify finished: ' . (int) $sp46dd86 . '

'); die; } function result(Request $sp2d83a6, $sp2e5c77) { $sp33b59d = Order::whereOrderNo($sp2e5c77)->first(); if ($sp33b59d == null) { return self::renderResult($sp2d83a6, array('msg' => '订单未找到，请重试')); } if ($sp33b59d->status === Order::STATUS_PAID) { $sp8d2313 = $sp33b59d->user->qq; $spcb569a = '商家库存不足，因此卡密没有自动发货，请联系商家客服发货'; if ($sp8d2313) { $spcb569a .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp8d2313 . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $sp8d2313 . '</a>'; } return self::renderResult($sp2d83a6, array('success' => false, 'title' => '订单已支付', 'msg' => $spcb569a), array('order' => $sp33b59d)); } elseif ($sp33b59d->status === Order::STATUS_SUCCESS) { return $this->shipOrder($sp2d83a6, $sp33b59d->order_no, $sp33b59d->paid, 0, TRUE); } return self::renderResult($sp2d83a6, array('success' => false, 'msg' => $sp33b59d->remark ? '失败原因:<br>' . $sp33b59d->remark : '订单支付失败，请重试'), array('order' => $sp33b59d)); } function renderResult(Request $sp2d83a6, $sp836ce6, $spb2bb49 = array()) { if ($sp2d83a6->ajax()) { if (@$sp836ce6['success']) { return Response::success($sp836ce6['data']); } else { return Response::fail('error', $sp836ce6['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp836ce6, 'data' => $spb2bb49), $spb2bb49)); } } function shipOrder($sp2d83a6, $sp2e5c77, $sp90753f, $sp5b4f94, $spcfd0e4 = true) { $sp33b59d = Order::whereOrderNo($sp2e5c77)->first(); if ($sp33b59d === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp2e5c77 . ',trade_no:' . $sp5b4f94 . ',amount:' . $sp90753f . ']. die(\'success\');'); die('success'); } if ($sp33b59d->paid > $sp90753f) { \Log::alert('shipOrder, price may error, order_no:' . $sp2e5c77 . ', paid:' . $sp33b59d->paid . ', $amount get:' . $sp90753f); $sp33b59d->remark = '支付金额(' . sprintf('%0.2f', $sp90753f / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp33b59d->paid / 100) . ')'; $sp33b59d->save(); throw new \Exception($sp33b59d->remark); } $sp483e71 = array(); $sp109afa = '订单#' . $sp2e5c77 . '&nbsp;已支付，卡号列表：'; $spde7b64 = ''; $spb0ecc4 = null; $sp604c11 = $sp33b59d->status === Order::STATUS_UNPAY; $sp7c35c4 = $sp604c11 && System::_getInt('mail_send_order') === 1 && filter_var($sp33b59d->email, FILTER_VALIDATE_EMAIL); if ($sp604c11) { \Log::debug('shipOrder.first_process:' . $sp2e5c77); $sped4455 = $sp33b59d->id; if (FundHelper::orderSuccess($sp33b59d, function () use($sped4455, $sp5b4f94, &$sp483e71, &$spde7b64) { $sp33b59d = Order::where('id', $sped4455)->lockForUpdate()->firstOrFail(); if ($sp33b59d->status !== Order::STATUS_UNPAY) { \Log::debug('shipOrder.first_process:' . $sp33b59d->order_no . ' already processed!'); return -999; } $spb0ecc4 = $sp33b59d->product()->lockForUpdate()->firstOrFail(); $spb0ecc4->count_sold += $sp33b59d->count; $spb0ecc4->saveOrFail(); $sp33b59d->pay_trade_no = $sp5b4f94; $sp33b59d->paid_at = Carbon::now(); $sp483e71 = Card::where('product_id', $sp33b59d->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp33b59d->count)->lockForUpdate()->get(); if (count($sp483e71) !== $sp33b59d->count) { \Log::alert('订单:' . $sp33b59d->order_no . ', 购买数量:' . $sp33b59d->count . ', 卡数量:' . count($sp483e71) . ' 卡密不足(已支付 未发货)'); $sp33b59d->status = Order::STATUS_PAID; $sp33b59d->saveOrFail(); return Order::STATUS_PAID; } else { $sp33b59d->status = Order::STATUS_SUCCESS; $sp33b59d->saveOrFail(); $sp88bf6e = array(); foreach ($sp483e71 as $spc69d52) { $spde7b64 .= $spc69d52->card . '<br>'; $sp88bf6e[] = $spc69d52->id; } $sp33b59d->cards()->attach($sp88bf6e); Card::whereIn('id', $sp88bf6e)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => \DB::raw('`count_sold`+1'))); return Order::STATUS_SUCCESS; } })) { $spb0ecc4 = Product::where('id', $sp33b59d->product_id)->with(array('cards' => function (Relation $spedc15a) { $spedc15a->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($spb0ecc4) { $sp93b866 = count($spb0ecc4->cards) ? $spb0ecc4->cards[0]->count : 0; $spb0ecc4->setAttribute('count', $sp93b866); if ($spb0ecc4->count_warn > 0 && $sp93b866 < $spb0ecc4->count_warn) { try { \Mail::to($sp33b59d->user->email)->Queue(new ProductCountWarn($spb0ecc4, $sp93b866)); } catch (\Exception $spfda1c7) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.count_warn error, product_id:' . $sp33b59d->product_id . ', email:' . $sp33b59d->user->email . ', Exception:' . $spfda1c7); \App\Library\LogHelper::setLogFile('card'); } } } } else { \Log::error('shipOrder.first_process error, order_no:' . $sp2e5c77 . ',trade_no:' . $sp5b4f94); throw new \Exception('merchant operate exception!'); } } elseif ($spcfd0e4) { $sp483e71 = $sp33b59d->cards; $spb0ecc4 = $sp33b59d->product; foreach ($sp483e71 as $spc69d52) { $spde7b64 .= $spc69d52->card . '
'; } } if ($spcfd0e4 || $sp7c35c4) { if (count($sp483e71) < $sp33b59d->count) { if (count($sp483e71)) { $sp109afa = '目前库存不足，您还有' . ($sp33b59d->count - count($sp483e71)) . '张卡密未发货，请联系商家客服发货<br>已发货卡密见下方：<br>'; } else { $sp109afa = '目前库存不足，您购买的' . ($sp33b59d->count - count($sp483e71)) . '张卡密未发货，请联系商家客服发货<br>'; } $sp8d2313 = $sp33b59d->user->qq; if ($sp8d2313) { $sp109afa .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp8d2313 . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $sp8d2313 . '</a><br>'; } } } if ($sp7c35c4) { $spba2dc9 = str_replace('
', '<br>', $spde7b64); try { \Mail::to($sp33b59d->email)->Queue(new OrderShipped($sp33b59d, $sp109afa, $spba2dc9)); $sp33b59d->email_sent = true; $sp33b59d->saveOrFail(); } catch (\Exception $spfda1c7) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.need_mail error, order_no:' . $sp2e5c77 . ', email:' . $sp33b59d->email . ', cards:' . $spba2dc9 . ', Exception:' . $spfda1c7->getMessage()); \App\Library\LogHelper::setLogFile('card'); } } if ($spcfd0e4) { return self::renderResult($sp2d83a6, array('success' => true, 'msg' => $sp109afa), array('card_txt' => $spde7b64, 'order' => $sp33b59d, 'product' => $spb0ecc4)); } return FALSE; } }
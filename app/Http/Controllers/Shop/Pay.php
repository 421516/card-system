<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Product; use App\Order; use App\Library\Response; use App\Library\Pay\Pay as PayApi; use App\Library\Geetest; use App\Mail\OrderShipped; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cookie; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spdd9f33, $sp2c969b, $spe6f9c1, $sp486342, $spa7c8fa) { try { (new PayApi())->goPay($sp486342, $sp2c969b, $spe6f9c1, $spe6f9c1, $spa7c8fa); return self::renderResult($spdd9f33, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp9e5801) { return self::renderResult($spdd9f33, array('msg' => $sp9e5801->getMessage())); } } function buy(Request $spdd9f33) { if ((int) System::_get('vcode_shop_buy') === 1) { $sp123706 = Geetest\API::verify($spdd9f33->input('geetest_challenge'), $spdd9f33->input('geetest_validate'), $spdd9f33->input('geetest_seccode')); if (!$sp123706) { return self::renderResult($spdd9f33, array('msg' => '系统无法接受您的验证结果，请刷新页面后重试。')); } } $spf3ee87 = Cookie::get('customer'); if (strlen($spf3ee87) !== 32) { return self::renderResult($spdd9f33, array('msg' => '请返回页面重新下单')); } $sp4a6190 = (int) $spdd9f33->input('category_id'); $spfafc60 = (int) $spdd9f33->input('product_id'); $spbc55c7 = (int) $spdd9f33->input('count'); $spe017d6 = $spdd9f33->input('coupon'); $sp9188d2 = $spdd9f33->input('email'); $spdc7c2f = (int) $spdd9f33->input('pay_id'); if (!$sp4a6190 || !$spfafc60) { return self::renderResult($spdd9f33, array('msg' => '请选择商品')); } if (strlen($sp9188d2) < 1) { return self::renderResult($spdd9f33, array('msg' => '请输入邮箱')); } $sp8d0209 = Category::findOrFail($sp4a6190); if ($sp8d0209->password_open) { if ($sp8d0209->password !== $spdd9f33->input('category_password')) { return Response::fail('分类密码输入错误'); } } $sp32da29 = Product::where('id', $spfafc60)->where('category_id', $sp4a6190)->where('enabled', 1)->with(array('cards' => function (Relation $sp26c3c2) { $sp26c3c2->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($sp32da29 == null || $sp32da29->user == null) { return self::renderResult($spdd9f33, array('msg' => '该商品未找到，请重新选择')); } if ($sp32da29->password_open) { if ($sp32da29->password !== $spdd9f33->input('product_password')) { return Response::fail('分类密码输入错误'); } } if ($spbc55c7 < $sp32da29->buy_min) { return self::renderResult($spdd9f33, array('msg' => '该商品最少购买' . $sp32da29->buy_min . '件，请重新选择')); } if ($spbc55c7 > $sp32da29->buy_max) { return self::renderResult($spdd9f33, array('msg' => '该商品限购' . $sp32da29->buy_max . '件，请重新选择')); } $sp32da29->setAttribute('count', count($sp32da29->cards) ? $sp32da29->cards[0]->count : 0); if ($sp32da29->count < $spbc55c7) { return self::renderResult($spdd9f33, array('msg' => '该商品库存不足')); } $sp80d3a4 = \App\Pay::find($spdc7c2f); if ($sp80d3a4 == null || !$sp80d3a4->enabled) { return self::renderResult($spdd9f33, array('msg' => '支付方式未找到，请重新选择')); } $spc2b4ba = $sp32da29->price; if ($sp32da29->price_whole) { $spd9cf6f = json_decode($sp32da29->price_whole, true); for ($spfae064 = count($spd9cf6f) - 1; $spfae064 >= 0; $spfae064--) { if ($spbc55c7 >= (int) $spd9cf6f[$spfae064][0]) { $spc2b4ba = (int) $spd9cf6f[$spfae064][1]; break; } } } $sp10eada = $spbc55c7 * $spc2b4ba; $spa7c8fa = $sp10eada; $spcfdef9 = null; if ($sp32da29->support_coupon && strlen($spe017d6) > 0) { $sp2130e7 = \App\Coupon::where('user_id', $sp32da29->user_id)->where('coupon', $spe017d6)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp2130e7 as $spe42bdc) { if ($spe42bdc->category_id === -1 || $spe42bdc->category_id === $sp4a6190 && ($spe42bdc->product_id === -1 || $spe42bdc->product_id === $spfafc60)) { if ($spe42bdc->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $spa7c8fa > $spe42bdc->discount_val) { $spcfdef9 = $spe42bdc; $spa7c8fa = $spa7c8fa - $spe42bdc->discount_val; break; } if ($spe42bdc->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $spcfdef9 = $spe42bdc; $spa7c8fa = $spa7c8fa - intval($spa7c8fa * $spe42bdc->discount_val / 100); break; } } } } if ($spcfdef9) { $spcfdef9->status = \App\Coupon::STATUS_USED; $spcfdef9->count_used++; $spcfdef9->save(); } $sp9239f4 = (int) round($spa7c8fa * $sp80d3a4->fee_system); $spde27a5 = $spa7c8fa - $sp9239f4; $sp2c969b = date('YmdHis') . str_random(5); while (Order::whereOrderNo($sp2c969b)->exists()) { $sp2c969b = date('YmdHis') . str_random(5); } Order::insert(array('user_id' => $sp32da29->user_id, 'order_no' => $sp2c969b, 'product_id' => $spfafc60, 'count' => $spbc55c7, 'email' => $sp9188d2, 'ip' => Helper::getIP(), 'customer' => $spf3ee87, 'email_sent' => false, 'cost' => $spbc55c7 * $sp32da29->cost, 'price' => $sp10eada, 'discount' => $sp10eada - $spa7c8fa, 'paid' => $spa7c8fa, 'pay_id' => $sp80d3a4->id, 'fee' => $sp9239f4, 'system_fee' => $sp9239f4, 'income' => $spde27a5, 'status' => Order::STATUS_UNPAY, 'created_at' => Carbon::now())); $spe6f9c1 = $sp2c969b; return $this->goPay($spdd9f33, $sp2c969b, $spe6f9c1, $sp80d3a4, $spa7c8fa); } function pay(Request $spdd9f33, $sp2c969b) { $sp804c16 = Order::whereOrderNo($sp2c969b)->first(); if ($sp804c16 == null) { return self::renderResult($spdd9f33, array('msg' => '订单未找到，请重试')); } if ($sp804c16->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp2c969b); } $spc8fe2b = 'pay: ' . $sp804c16->pay_id; $sp486342 = $sp804c16->pay; if (!$sp486342) { \Log::error($spc8fe2b . ' cannot find Pay'); return $this->renderResult($spdd9f33, array('msg' => '支付方式未找到')); } $spc8fe2b .= ',' . $sp486342->driver; $sp4d5cc2 = json_decode($sp486342->config, true); $sp4d5cc2['payway'] = $sp486342->way; $sp4d5cc2['out_trade_no'] = $sp2c969b; try { $this->payApi = PayApi::getDriver($sp486342->id, $sp486342->driver); } catch (\Exception $sp9e5801) { \Log::error($spc8fe2b . ' cannot find Driver: ' . $sp9e5801->getMessage()); return $this->renderResult($spdd9f33, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp4d5cc2, function ($sp2c969b, $sp6246a9, $spb306ab) use($spdd9f33) { try { $this->shipOrder($spdd9f33, $sp2c969b, $sp6246a9, $spb306ab, FALSE); } catch (\Exception $sp9e5801) { $this->renderResult($spdd9f33, array('success' => false, 'msg' => $sp9e5801->getMessage())); } })) { \Log::notice($spc8fe2b . ' already success' . '

'); return redirect('/pay/result/' . $sp2c969b); } $sp32da29 = Product::where('id', $sp804c16->product_id)->where('enabled', 1)->with(array('cards' => function (Relation $sp26c3c2) { $sp26c3c2->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($sp32da29 == null) { return self::renderResult($spdd9f33, array('msg' => '该商品已下架')); } $sp32da29->setAttribute('count', count($sp32da29->cards) ? $sp32da29->cards[0]->count : 0); if ($sp32da29->count < $sp804c16->count) { return self::renderResult($spdd9f33, array('msg' => '该商品库存不足')); } $spe6f9c1 = $sp2c969b; return $this->goPay($spdd9f33, $sp2c969b, $spe6f9c1, $sp486342, $sp804c16->paid); } function qrcode(Request $spdd9f33, $sp2c969b, $spac04c4) { $sp804c16 = Order::whereOrderNo($sp2c969b)->with('product')->first(); if ($sp804c16 == null) { return self::renderResult($spdd9f33, array('msg' => '订单未找到，请重试')); } if ($sp804c16->product_id !== \App\Product::ID_API && $sp804c16->product == null) { return self::renderResult($spdd9f33, array('msg' => '商品未找到，请重试')); } $spcfad42 = $spdd9f33->get('url'); return view('pay/' . $spac04c4, array('pay_id' => $sp804c16->pay_id, 'name' => $sp804c16->product_id === \App\Product::ID_API ? $sp804c16->api_out_no : $sp804c16->product->name, 'qrcode' => $spcfad42, 'id' => $sp2c969b)); } function qrQuery(Request $spdd9f33, $spdc7c2f) { $sp69b17f = $spdd9f33->input('id', ''); return self::payReturn($spdd9f33, $spdc7c2f, $sp69b17f); } function payReturn(Request $spdd9f33, $spdc7c2f, $sp2714cc = '') { $spc8fe2b = 'payReturn: ' . $spdc7c2f; \Log::debug($spc8fe2b); $sp486342 = \App\Pay::where('id', $spdc7c2f)->first(); if (!$sp486342) { return $this->renderResult($spdd9f33, array('success' => 0, 'msg' => '支付方式错误')); } $spc8fe2b .= ',' . $sp486342->driver; if (strlen($sp2714cc) > 0) { $sp804c16 = Order::whereOrderNo($sp2714cc)->first(); if ($sp804c16 && ($sp804c16->status === Order::STATUS_PAID || $sp804c16->status === Order::STATUS_SUCCESS)) { \Log::notice($spc8fe2b . ' already success' . '

'); if ($spdd9f33->ajax()) { return self::renderResult($spdd9f33, array('success' => 1, 'data' => '/pay/result/' . $sp2714cc), array('order' => $sp804c16)); } else { return redirect('/pay/result/' . $sp2714cc); } } } try { $this->payApi = PayApi::getDriver($sp486342->id, $sp486342->driver); } catch (\Exception $sp9e5801) { \Log::error($spc8fe2b . ' cannot find Driver: ' . $sp9e5801->getMessage()); return $this->renderResult($spdd9f33, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp4d5cc2 = json_decode($sp486342->config, true); $sp4d5cc2['out_trade_no'] = $sp2714cc; $sp4d5cc2['payway'] = $sp486342->way; \Log::debug($spc8fe2b . ' will verify'); if ($this->payApi->verify($sp4d5cc2, function ($sp2c969b, $sp6246a9, $spb306ab) use($spdd9f33, $spc8fe2b, &$sp2714cc) { $sp2714cc = $sp2c969b; try { \Log::debug($spc8fe2b . " shipOrder start, order_no: {$sp2c969b}, amount: {$sp6246a9}, trade_no: {$spb306ab}"); $this->shipOrder($spdd9f33, $sp2c969b, $sp6246a9, $spb306ab, FALSE); \Log::debug($spc8fe2b . ' shipOrder end, order_no: ' . $sp2c969b); } catch (\Exception $sp9e5801) { \Log::error($spc8fe2b . ' shipOrder Exception: ' . $sp9e5801->getMessage()); } })) { \Log::debug($spc8fe2b . ' verify finished: 1' . '

'); if ($spdd9f33->ajax()) { return self::renderResult($spdd9f33, array('success' => 1, 'data' => '/pay/result/' . $sp2714cc)); } else { return redirect('/pay/result/' . $sp2714cc); } } else { \Log::debug($spc8fe2b . ' verify finished: 0' . '

'); return $this->renderResult($spdd9f33, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spdd9f33, $spdc7c2f) { $spc8fe2b = 'payNotify pay_id: ' . $spdc7c2f; \Log::debug($spc8fe2b); $sp486342 = \App\Pay::where('id', $spdc7c2f)->first(); if (!$sp486342) { \Log::error($spc8fe2b . ' cannot find PayModel'); echo 'fail'; die; } $spc8fe2b .= ',' . $sp486342->driver; try { $this->payApi = PayApi::getDriver($sp486342->id, $sp486342->driver); } catch (\Exception $sp9e5801) { \Log::error($spc8fe2b . ' cannot find Driver: ' . $sp9e5801->getMessage()); echo 'fail'; die; } $sp4d5cc2 = json_decode($sp486342->config, true); $sp4d5cc2['payway'] = $sp486342->way; $sp4d5cc2['isNotify'] = true; \Log::debug($spc8fe2b . ' will verify'); $sp123706 = $this->payApi->verify($sp4d5cc2, function ($sp2c969b, $sp6246a9, $spb306ab) use($spdd9f33, $spc8fe2b) { try { \Log::debug($spc8fe2b . " shipOrder start, order_no: {$sp2c969b}, amount: {$sp6246a9}, trade_no: {$spb306ab}"); $this->shipOrder($spdd9f33, $sp2c969b, $sp6246a9, $spb306ab, FALSE); \Log::debug($spc8fe2b . ' shipOrder end, order_no: ' . $sp2c969b); } catch (\Exception $sp9e5801) { \Log::error($spc8fe2b . ' shipOrder Exception: ' . $sp9e5801->getMessage()); } }); \Log::debug($spc8fe2b . ' notify finished: ' . (int) $sp123706 . '

'); die; } function result(Request $spdd9f33, $sp2c969b) { $sp804c16 = Order::whereOrderNo($sp2c969b)->first(); if ($sp804c16 == null) { return self::renderResult($spdd9f33, array('msg' => '订单未找到，请重试')); } if ($sp804c16->status === Order::STATUS_PAID) { $sp91925e = $sp804c16->user->qq; $sp55c6db = '商家库存不足，因此卡密没有自动发货，请联系商家客服发货'; if ($sp91925e) { $sp55c6db .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp91925e . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $sp91925e . '</a>'; } return self::renderResult($spdd9f33, array('success' => false, 'title' => '订单已支付', 'msg' => $sp55c6db), array('order' => $sp804c16)); } elseif ($sp804c16->status === Order::STATUS_SUCCESS) { return $this->shipOrder($spdd9f33, $sp804c16->order_no, $sp804c16->paid, 0, TRUE); } return self::renderResult($spdd9f33, array('success' => false, 'msg' => $sp804c16->remark ? '失败原因:<br>' . $sp804c16->remark : '订单支付失败，请重试'), array('order' => $sp804c16)); } function renderResult(Request $spdd9f33, $spc4a98e, $sp99f48e = array()) { if ($spdd9f33->ajax()) { if (@$spc4a98e['success']) { return Response::success($spc4a98e['data']); } else { return Response::fail('error', $spc4a98e['msg']); } } else { return view('pay.result', array_merge(array('result' => $spc4a98e, 'data' => $sp99f48e), $sp99f48e)); } } function shipOrder($spdd9f33, $sp2c969b, $sp6246a9, $spb306ab, $sp2096a7 = true) { $sp804c16 = Order::whereOrderNo($sp2c969b)->first(); if ($sp804c16 === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp2c969b . ',trade_no:' . $spb306ab . ',amount:' . $sp6246a9 . ']. die(\'success\');'); die('success'); } if ($sp804c16->paid > $sp6246a9) { \Log::alert('shipOrder, price may error, order_no:' . $sp2c969b . ', paid:' . $sp804c16->paid . ', $amount get:' . $sp6246a9); $sp804c16->remark = '支付金额(' . sprintf('%0.2f', $sp6246a9 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp804c16->paid / 100) . ')'; $sp804c16->save(); throw new \Exception($sp804c16->remark); } $sp8a7554 = array(); $sp059fe1 = '订单#' . $sp2c969b . '&nbsp;已支付，卡号列表：'; $sp5e8cfb = ''; $sp32da29 = null; $spa2d601 = $sp804c16->status === Order::STATUS_UNPAY; $spa21a6c = $spa2d601 && System::_getInt('mail_send_order') === 1 && filter_var($sp804c16->email, FILTER_VALIDATE_EMAIL); if ($spa2d601) { \Log::debug('shipOrder.first_process:' . $sp2c969b); $spf98a61 = $sp804c16->id; if (FundHelper::orderSuccess($sp804c16, function () use($spf98a61, $spb306ab, &$sp8a7554, &$sp5e8cfb) { $sp804c16 = Order::where('id', $spf98a61)->lockForUpdate()->firstOrFail(); if ($sp804c16->status !== Order::STATUS_UNPAY) { \Log::debug('shipOrder.first_process:' . $sp804c16->order_no . ' already processed!'); return -999; } $sp32da29 = $sp804c16->product()->lockForUpdate()->firstOrFail(); $sp32da29->count_sold += $sp804c16->count; $sp32da29->saveOrFail(); $sp804c16->pay_trade_no = $spb306ab; $sp804c16->paid_at = Carbon::now(); $sp8a7554 = Card::where('product_id', $sp804c16->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp804c16->count)->lockForUpdate()->get(); if (count($sp8a7554) !== $sp804c16->count) { \Log::alert('订单:' . $sp804c16->order_no . ', 购买数量:' . $sp804c16->count . ', 卡数量:' . count($sp8a7554) . ' 卡密不足(已支付 未发货)'); $sp804c16->status = Order::STATUS_PAID; $sp804c16->saveOrFail(); return Order::STATUS_PAID; } else { $sp804c16->status = Order::STATUS_SUCCESS; $sp804c16->saveOrFail(); $spb3aeeb = array(); foreach ($sp8a7554 as $sp062ec9) { $sp5e8cfb .= $sp062ec9->card . '<br>'; $spb3aeeb[] = $sp062ec9->id; } $sp804c16->cards()->attach($spb3aeeb); Card::whereIn('id', $spb3aeeb)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => \DB::raw('`count_sold`+1'))); return Order::STATUS_SUCCESS; } })) { $sp32da29 = Product::where('id', $sp804c16->product_id)->with(array('cards' => function (Relation $sp26c3c2) { $sp26c3c2->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($sp32da29) { $spbc55c7 = count($sp32da29->cards) ? $sp32da29->cards[0]->count : 0; $sp32da29->setAttribute('count', $spbc55c7); if ($sp32da29->count_warn > 0 && $spbc55c7 < $sp32da29->count_warn) { try { \Mail::to($sp804c16->user->email)->Queue(new ProductCountWarn($sp32da29, $spbc55c7)); } catch (\Exception $sp9e5801) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.count_warn error, product_id:' . $sp804c16->product_id . ', email:' . $sp804c16->user->email . ', Exception:' . $sp9e5801); \App\Library\LogHelper::setLogFile('card'); } } } } else { \Log::error('shipOrder.first_process error, order_no:' . $sp2c969b . ',trade_no:' . $spb306ab); throw new \Exception('merchant operate exception!'); } } elseif ($sp2096a7) { $sp8a7554 = $sp804c16->cards; $sp32da29 = $sp804c16->product; foreach ($sp8a7554 as $sp062ec9) { $sp5e8cfb .= $sp062ec9->card . '
'; } } if ($sp2096a7 || $spa21a6c) { if (count($sp8a7554) < $sp804c16->count) { if (count($sp8a7554)) { $sp059fe1 = '目前库存不足，您还有' . ($sp804c16->count - count($sp8a7554)) . '张卡密未发货，请联系商家客服发货<br>已发货卡密见下方：<br>'; } else { $sp059fe1 = '目前库存不足，您购买的' . ($sp804c16->count - count($sp8a7554)) . '张卡密未发货，请联系商家客服发货<br>'; } $sp91925e = $sp804c16->user->qq; if ($sp91925e) { $sp059fe1 .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $sp91925e . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $sp91925e . '</a><br>'; } } } if ($spa21a6c) { $sp8b2411 = str_replace('
', '<br>', $sp5e8cfb); try { \Mail::to($sp804c16->email)->Queue(new OrderShipped($sp804c16, $sp059fe1, $sp8b2411)); $sp804c16->email_sent = true; $sp804c16->saveOrFail(); } catch (\Exception $sp9e5801) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.need_mail error, order_no:' . $sp2c969b . ', email:' . $sp804c16->email . ', cards:' . $sp8b2411 . ', Exception:' . $sp9e5801->getMessage()); \App\Library\LogHelper::setLogFile('card'); } } if ($sp2096a7) { return self::renderResult($spdd9f33, array('success' => true, 'msg' => $sp059fe1), array('card_txt' => $sp5e8cfb, 'order' => $sp804c16, 'product' => $sp32da29)); } return FALSE; } }
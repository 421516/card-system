<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Product; use App\Library\Response; use App\Library\Pay\Pay as PayApi; use App\Library\Geetest; use App\Mail\OrderShipped; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cookie; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; use Illuminate\Support\Facades\Mail; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($sp85ba11, $sp64a7d9, $sp71e70e, $sp651d92, $sp837eee) { try { (new PayApi())->goPay($sp651d92, $sp64a7d9, $sp71e70e, $sp71e70e, $sp837eee); return self::renderResultPage($sp85ba11, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $sp1b3a33) { return self::renderResultPage($sp85ba11, array('msg' => $sp1b3a33->getMessage())); } } function buy(Request $sp85ba11) { $sp96c129 = $sp85ba11->input('customer'); if (strlen($sp96c129) !== 32) { return self::renderResultPage($sp85ba11, array('msg' => '提交超时，请刷新购买页面并重新提交<br><br>
当前网址: ' . $sp85ba11->getQueryString() . '
提交内容: ' . var_export($sp96c129) . ', 提交长度:' . strlen($sp96c129) . '<br>
若您刷新后仍然出现此问题. 请加网站客服反馈')); } if ((int) System::_get('vcode_shop_buy') === 1) { $sp5780b9 = Geetest\API::verify($sp85ba11->input('geetest_challenge'), $sp85ba11->input('geetest_validate'), $sp85ba11->input('geetest_seccode')); if (!$sp5780b9) { return self::renderResultPage($sp85ba11, array('msg' => '滑动验证超时，请返回页面重试。')); } } $sp7bb93d = (int) $sp85ba11->input('category_id'); $sp16cfd7 = (int) $sp85ba11->input('product_id'); $sp03e375 = (int) $sp85ba11->input('count'); $spba1aa5 = $sp85ba11->input('coupon'); $sp68ce3d = $sp85ba11->input('email'); $spad3b84 = (int) $sp85ba11->input('pay_id'); if (!$sp7bb93d || !$sp16cfd7) { return self::renderResultPage($sp85ba11, array('msg' => '请选择商品')); } if (strlen($sp68ce3d) < 1) { return self::renderResultPage($sp85ba11, array('msg' => '请输入联系方式')); } $sp9a35dc = Category::findOrFail($sp7bb93d); $spf85ebf = Product::where('id', $sp16cfd7)->where('category_id', $sp7bb93d)->where('enabled', 1)->with(array('user'))->first(); if ($spf85ebf == null || $spf85ebf->user == null) { return self::renderResultPage($sp85ba11, array('msg' => '该商品未找到，请重新选择')); } if ($spf85ebf->password_open) { if ($spf85ebf->password !== $sp85ba11->input('product_password')) { return self::renderResultPage($sp85ba11, array('msg' => '商品密码输入错误')); } } else { if ($sp9a35dc->password_open) { if ($sp9a35dc->password !== $sp85ba11->input('category_password')) { if ($sp9a35dc->getTmpPassword() !== $sp85ba11->input('category_password')) { return self::renderResultPage($sp85ba11, array('msg' => '分类密码输入错误')); } } } } if ($sp03e375 < $spf85ebf->buy_min) { return self::renderResultPage($sp85ba11, array('msg' => '该商品最少购买' . $spf85ebf->buy_min . '件，请重新选择')); } if ($sp03e375 > $spf85ebf->buy_max) { return self::renderResultPage($sp85ba11, array('msg' => '该商品限购' . $spf85ebf->buy_max . '件，请重新选择')); } if ($spf85ebf->count < $sp03e375) { return self::renderResultPage($sp85ba11, array('msg' => '该商品库存不足')); } $spb09730 = \App\Pay::find($spad3b84); if ($spb09730 == null || !$spb09730->enabled) { return self::renderResultPage($sp85ba11, array('msg' => '支付方式未找到，请重新选择')); } $sp0f66f0 = $spf85ebf->price; if ($spf85ebf->price_whole) { $spc03222 = json_decode($spf85ebf->price_whole, true); for ($sp747316 = count($spc03222) - 1; $sp747316 >= 0; $sp747316--) { if ($sp03e375 >= (int) $spc03222[$sp747316][0]) { $sp0f66f0 = (int) $spc03222[$sp747316][1]; break; } } } $spf4cec7 = $sp03e375 * $sp0f66f0; $sp837eee = $spf4cec7; $sp21767b = 0; $sp871cdd = null; if ($spf85ebf->support_coupon && strlen($spba1aa5) > 0) { $sp2b6ed8 = \App\Coupon::where('user_id', $spf85ebf->user_id)->where('coupon', $spba1aa5)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($sp2b6ed8 as $sp3c3171) { if ($sp3c3171->category_id === -1 || $sp3c3171->category_id === $sp7bb93d && ($sp3c3171->product_id === -1 || $sp3c3171->product_id === $sp16cfd7)) { if ($sp3c3171->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp837eee >= $sp3c3171->discount_val) { $sp871cdd = $sp3c3171; $sp21767b = $sp3c3171->discount_val; break; } if ($sp3c3171->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp871cdd = $sp3c3171; $sp21767b = (int) round($sp837eee * $sp3c3171->discount_val / 100); break; } } } if ($sp871cdd === null) { return self::renderResultPage($sp85ba11, array('msg' => '优惠券信息错误，请重新输入')); } $sp837eee -= $sp21767b; } if ($sp871cdd) { $sp871cdd->status = \App\Coupon::STATUS_USED; $sp871cdd->count_used++; $sp871cdd->save(); $sp979fa8 = '使用优惠券: ' . $sp871cdd->coupon; } else { $sp979fa8 = null; } $spbadf0e = (int) round($sp837eee * $spb09730->fee_system); $spe98276 = $sp837eee - $spbadf0e; $sp64a7d9 = \App\Order::unique_no(); \App\Order::insert(array('user_id' => $spf85ebf->user_id, 'order_no' => $sp64a7d9, 'product_id' => $sp16cfd7, 'count' => $sp03e375, 'email' => $sp68ce3d, 'ip' => Helper::getIP(), 'customer' => $sp96c129, 'email_sent' => false, 'cost' => $sp03e375 * $spf85ebf->cost, 'price' => $spf4cec7, 'discount' => $sp21767b, 'paid' => $sp837eee, 'pay_id' => $spb09730->id, 'fee' => $spbadf0e, 'system_fee' => $spbadf0e, 'income' => $spe98276, 'status' => \App\Order::STATUS_UNPAY, 'remark' => $sp979fa8, 'created_at' => Carbon::now())); if ($sp837eee === 0) { $this->shipOrder($sp85ba11, $sp64a7d9, $sp837eee, null); return redirect('/pay/result/' . $sp64a7d9); } $sp71e70e = $sp64a7d9; return $this->goPay($sp85ba11, $sp64a7d9, $sp71e70e, $spb09730, $sp837eee); } function pay(Request $sp85ba11, $sp64a7d9) { $sp63564c = \App\Order::whereOrderNo($sp64a7d9)->first(); if ($sp63564c == null) { return self::renderResultPage($sp85ba11, array('msg' => '订单未找到，请重试')); } if ($sp63564c->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $sp64a7d9); } $sp1eea05 = 'pay: ' . $sp63564c->pay_id; $sp651d92 = $sp63564c->pay; if (!$sp651d92) { \Log::error($sp1eea05 . ' cannot find Pay'); return $this->renderResultPage($sp85ba11, array('msg' => '支付方式未找到')); } $sp1eea05 .= ',' . $sp651d92->driver; $spa9e109 = json_decode($sp651d92->config, true); $spa9e109['payway'] = $sp651d92->way; $spa9e109['out_trade_no'] = $sp64a7d9; try { $this->payApi = PayApi::getDriver($sp651d92->id, $sp651d92->driver); } catch (\Exception $sp1b3a33) { \Log::error($sp1eea05 . ' cannot find Driver: ' . $sp1b3a33->getMessage()); return $this->renderResultPage($sp85ba11, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($spa9e109, function ($sp64a7d9, $sp9a8a75, $spe62189) use($sp85ba11) { try { $this->shipOrder($sp85ba11, $sp64a7d9, $sp9a8a75, $spe62189); } catch (\Exception $sp1b3a33) { $this->renderResultPage($sp85ba11, array('success' => false, 'msg' => $sp1b3a33->getMessage())); } })) { \Log::notice($sp1eea05 . ' already success' . '

'); return redirect('/pay/result/' . $sp64a7d9); } if ($sp63564c->created_at < Carbon::now()->addMinutes(-5)) { return $this->renderResultPage($sp85ba11, array('msg' => '当前订单长时间未支付已作废, 请重新下单')); } $spf85ebf = Product::where('id', $sp63564c->product_id)->where('enabled', 1)->first(); if ($spf85ebf == null) { return self::renderResultPage($sp85ba11, array('msg' => '该商品已下架')); } $spf85ebf->setAttribute('count', count($spf85ebf->cards) ? $spf85ebf->cards[0]->count : 0); if ($spf85ebf->count < $sp63564c->count) { return self::renderResultPage($sp85ba11, array('msg' => '该商品库存不足')); } $sp71e70e = $sp64a7d9; return $this->goPay($sp85ba11, $sp64a7d9, $sp71e70e, $sp651d92, $sp63564c->paid); } function qrcode(Request $sp85ba11, $sp64a7d9, $sp434cc9) { $sp63564c = \App\Order::whereOrderNo($sp64a7d9)->with('product')->first(); if ($sp63564c == null) { return self::renderResultPage($sp85ba11, array('msg' => '订单未找到，请重试')); } if ($sp63564c->product_id !== \App\Product::ID_API && $sp63564c->product == null) { return self::renderResultPage($sp85ba11, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp434cc9, array('pay_id' => $sp63564c->pay_id, 'name' => $sp63564c->product->name . ' x ' . $sp63564c->count . '件', 'amount' => $sp63564c->paid, 'qrcode' => $sp85ba11->get('url'), 'id' => $sp64a7d9)); } function qrQuery(Request $sp85ba11, $spad3b84) { $spebc186 = $sp85ba11->input('id', ''); return self::payReturn($sp85ba11, $spad3b84, $spebc186); } function payReturn(Request $sp85ba11, $spad3b84, $sp206d07 = '') { $sp1eea05 = 'payReturn: ' . $spad3b84; \Log::debug($sp1eea05); $sp651d92 = \App\Pay::where('id', $spad3b84)->first(); if (!$sp651d92) { return $this->renderResultPage($sp85ba11, array('success' => 0, 'msg' => '支付方式错误')); } $sp1eea05 .= ',' . $sp651d92->driver; if (strlen($sp206d07) > 0) { $sp63564c = \App\Order::whereOrderNo($sp206d07)->first(); if ($sp63564c && ($sp63564c->status === \App\Order::STATUS_PAID || $sp63564c->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($sp1eea05 . ' already success' . '

'); if ($sp85ba11->ajax()) { return self::renderResultPage($sp85ba11, array('success' => 1, 'data' => '/pay/result/' . $sp206d07), array('order' => $sp63564c)); } else { return redirect('/pay/result/' . $sp206d07); } } } try { $this->payApi = PayApi::getDriver($sp651d92->id, $sp651d92->driver); } catch (\Exception $sp1b3a33) { \Log::error($sp1eea05 . ' cannot find Driver: ' . $sp1b3a33->getMessage()); return $this->renderResultPage($sp85ba11, array('success' => 0, 'msg' => '支付驱动未找到')); } $spa9e109 = json_decode($sp651d92->config, true); $spa9e109['out_trade_no'] = $sp206d07; $spa9e109['payway'] = $sp651d92->way; \Log::debug($sp1eea05 . ' will verify'); if ($this->payApi->verify($spa9e109, function ($sp64a7d9, $sp9a8a75, $spe62189) use($sp85ba11, $sp1eea05, &$sp206d07) { $sp206d07 = $sp64a7d9; try { \Log::debug($sp1eea05 . " shipOrder start, order_no: {$sp64a7d9}, amount: {$sp9a8a75}, trade_no: {$spe62189}"); $this->shipOrder($sp85ba11, $sp64a7d9, $sp9a8a75, $spe62189); \Log::debug($sp1eea05 . ' shipOrder end, order_no: ' . $sp64a7d9); } catch (\Exception $sp1b3a33) { \Log::error($sp1eea05 . ' shipOrder Exception: ' . $sp1b3a33->getMessage()); } })) { \Log::debug($sp1eea05 . ' verify finished: 1' . '

'); if ($sp85ba11->ajax()) { return self::renderResultPage($sp85ba11, array('success' => 1, 'data' => '/pay/result/' . $sp206d07)); } else { return redirect('/pay/result/' . $sp206d07); } } else { \Log::debug($sp1eea05 . ' verify finished: 0' . '

'); return $this->renderResultPage($sp85ba11, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $sp85ba11, $spad3b84) { $sp1eea05 = 'payNotify pay_id: ' . $spad3b84; \Log::debug($sp1eea05); $sp651d92 = \App\Pay::where('id', $spad3b84)->first(); if (!$sp651d92) { \Log::error($sp1eea05 . ' cannot find PayModel'); echo 'fail'; die; } $sp1eea05 .= ',' . $sp651d92->driver; try { $this->payApi = PayApi::getDriver($sp651d92->id, $sp651d92->driver); } catch (\Exception $sp1b3a33) { \Log::error($sp1eea05 . ' cannot find Driver: ' . $sp1b3a33->getMessage()); echo 'fail'; die; } $spa9e109 = json_decode($sp651d92->config, true); $spa9e109['payway'] = $sp651d92->way; $spa9e109['isNotify'] = true; \Log::debug($sp1eea05 . ' will verify'); $sp5780b9 = $this->payApi->verify($spa9e109, function ($sp64a7d9, $sp9a8a75, $spe62189) use($sp85ba11, $sp1eea05) { try { \Log::debug($sp1eea05 . " shipOrder start, order_no: {$sp64a7d9}, amount: {$sp9a8a75}, trade_no: {$spe62189}"); $this->shipOrder($sp85ba11, $sp64a7d9, $sp9a8a75, $spe62189); \Log::debug($sp1eea05 . ' shipOrder end, order_no: ' . $sp64a7d9); } catch (\Exception $sp1b3a33) { \Log::error($sp1eea05 . ' shipOrder Exception: ' . $sp1b3a33->getMessage()); } }); \Log::debug($sp1eea05 . ' notify finished: ' . (int) $sp5780b9 . '

'); die; } function result(Request $sp85ba11, $sp64a7d9) { $sp63564c = \App\Order::whereOrderNo($sp64a7d9)->first(); if ($sp63564c == null) { return self::renderResultPage($sp85ba11, array('msg' => '订单未找到，请重试')); } if ($sp63564c->status === \App\Order::STATUS_PAID) { $spb8f8ca = $sp63564c->user->qq; $spdfd2b6 = '商家库存不足，因此没有自动发货，请联系商家客服发货'; if ($spb8f8ca) { $spdfd2b6 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spb8f8ca . '&site=qq&menu=yes" target="_blank">客服QQ:' . $spb8f8ca . '</a>'; } return self::renderResultPage($sp85ba11, array('success' => false, 'title' => '订单已支付', 'msg' => $spdfd2b6), array('order' => $sp63564c)); } elseif ($sp63564c->status === \App\Order::STATUS_SUCCESS) { return self::showOrderResult($sp85ba11, $sp63564c); } return self::renderResultPage($sp85ba11, array('success' => false, 'msg' => $sp63564c->remark ? '失败原因:<br>' . $sp63564c->remark : '订单支付失败，请重试'), array('order' => $sp63564c)); } function renderResultPage(Request $sp85ba11, $sp9610ab, $sp0dc6b6 = array()) { if ($sp85ba11->ajax()) { if (@$sp9610ab['success']) { return Response::success($sp9610ab['data']); } else { return Response::fail('error', $sp9610ab['msg']); } } else { return view('pay.result', array_merge(array('result' => $sp9610ab, 'data' => $sp0dc6b6), $sp0dc6b6)); } } function shipOrder($sp85ba11, $sp64a7d9, $sp9a8a75, $spe62189) { $sp63564c = \App\Order::whereOrderNo($sp64a7d9)->first(); if ($sp63564c === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $sp64a7d9 . ',trade_no:' . $spe62189 . ',amount:' . $sp9a8a75 . ']. die(\'success\');'); die('success'); } if ($sp63564c->paid > $sp9a8a75) { \Log::alert('shipOrder, price may error, order_no:' . $sp64a7d9 . ', paid:' . $sp63564c->paid . ', $amount get:' . $sp9a8a75); $sp63564c->remark = '支付金额(' . sprintf('%0.2f', $sp9a8a75 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $sp63564c->paid / 100) . ')'; $sp63564c->save(); throw new \Exception($sp63564c->remark); } $spf85ebf = null; if ($sp63564c->status === \App\Order::STATUS_UNPAY) { \Log::debug('shipOrder.first_process:' . $sp64a7d9); $sp8bff63 = $sp63564c->id; if (FundHelper::orderSuccess($sp63564c->id, function ($sp92e8d6) use($sp8bff63, $spe62189, &$sp63564c, &$spf85ebf) { $sp63564c = $sp92e8d6; if ($sp63564c->status !== \App\Order::STATUS_UNPAY) { \Log::debug('Shop.Pay.shipOrder: .first_process:' . $sp63564c->order_no . ' already processed! #2'); return false; } $spf85ebf = $sp63564c->product()->lockForUpdate()->firstOrFail(); $sp63564c->pay_trade_no = $spe62189; $sp63564c->paid_at = Carbon::now(); $sp75215f = Card::where('product_id', $sp63564c->product_id)->whereRaw('`count_sold`<`count_all`')->take($sp63564c->count)->lockForUpdate()->get(); if (count($sp75215f) !== $sp63564c->count) { Log::alert('Shop.Pay.shipOrder: 订单:' . $sp63564c->order_no . ', 购买数量:' . $sp63564c->count . ', 卡数量:' . count($sp75215f) . ' 卡密不足(已支付 未发货)'); $sp63564c->status = \App\Order::STATUS_PAID; $sp63564c->saveOrFail(); return true; } else { $sp7e9dfe = array(); foreach ($sp75215f as $spb7019f) { $sp7e9dfe[] = $spb7019f->id; } $sp63564c->cards()->attach($sp7e9dfe); Card::whereIn('id', $sp7e9dfe)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp63564c->status = \App\Order::STATUS_SUCCESS; $sp63564c->saveOrFail(); $spf85ebf->count_sold += $sp63564c->count; $spf85ebf->saveOrFail(); return FundHelper::ACTION_CONTINUE; } })) { if ($spf85ebf->count_warn > 0 && $spf85ebf->count < $spf85ebf->count_warn) { try { \Mail::to($sp63564c->user->email)->Queue(new ProductCountWarn($spf85ebf, $spf85ebf->count)); } catch (\Throwable $sp1b3a33) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.count_warn error, product_id:' . $sp63564c->product_id . ', email:' . $sp63564c->user->email . ', Exception:' . $sp1b3a33); \App\Library\LogHelper::setLogFile('card'); } } } else { throw new \Exception('merchant operate exception!'); } if (System::_getInt('mail_send_order') === 1 && filter_var($sp63564c->email, FILTER_VALIDATE_EMAIL)) { self::showOrderResult($sp85ba11, $sp63564c, true); } } else { Log::debug('Shop.Pay.shipOrder: .order_no:' . $sp63564c->order_no . ' already processed! #1'); } return FALSE; } private function showOrderResult($sp85ba11, $sp63564c, $sp0ee8a7 = false) { $sp75215f = array(); $sp63564c->cards->each(function ($spb7019f) use(&$sp75215f) { $sp75215f[] = $spb7019f->card; }); if (count($sp75215f) < $sp63564c->count) { if (count($sp75215f)) { $spef26b6 = '订单#' . $sp63564c->order_no . '&nbsp;已支付，目前库存不足，您还有' . ($sp63564c->count - count($sp75215f)) . '件未发货，请联系商家客服发货<br>已发货商品见下方：<br>'; } else { $spef26b6 = '订单#' . $sp63564c->order_no . '&nbsp;已支付，目前库存不足，您购买的' . ($sp63564c->count - count($sp75215f)) . '件未发货，请联系商家客服发货<br>'; } $spb8f8ca = $sp63564c->user->qq; if ($spb8f8ca) { $spef26b6 .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spb8f8ca . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $spb8f8ca . '</a><br>'; } } else { $spef26b6 = '订单#' . $sp63564c->order_no . '&nbsp;已支付，您购买的内容如下：'; } if ($sp0ee8a7) { $sp9616d4 = join('<br>', $sp75215f); try { Mail::to($sp63564c->email)->Queue(new OrderShipped($sp63564c, $spef26b6, $sp9616d4)); $sp63564c->email_sent = true; $sp63564c->saveOrFail(); } catch (\Throwable $sp1b3a33) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.need_mail error, order_no:' . $sp63564c->order_no . ', email:' . $sp63564c->email . ', cards:' . $sp9616d4 . ', Exception:' . $sp1b3a33->getMessage()); \App\Library\LogHelper::setLogFile('card'); } return FALSE; } return self::renderResultPage($sp85ba11, array('success' => true, 'msg' => $spef26b6), array('card_txt' => join('&#013;&#010;', $sp75215f), 'order' => $sp63564c, 'product' => $sp63564c->product)); } }
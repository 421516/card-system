<?php
namespace App\Http\Controllers\Shop; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use App\Library\Geetest; use Illuminate\Support\Facades\Cookie; class Order extends Controller { function get(Request $sp0fc69c) { if ((int) \App\System::_get('vcode_shop_search') === 1) { $spc8aebe = Geetest\API::verify($sp0fc69c->post('geetest_challenge'), $sp0fc69c->post('geetest_validate'), $sp0fc69c->post('geetest_seccode')); if (!$spc8aebe) { return Response::fail('系统无法接受您的验证结果，请刷新页面后重试。'); } } $sp3f78ce = \App\Order::where('created_at', '>=', (new Carbon())->addDay(-30)); $spdb2534 = $sp0fc69c->post('type', ''); if ($spdb2534 === 'cookie') { $spd1c19c = Cookie::get('customer'); if (strlen($spd1c19c) !== 32) { return Response::success(); } $sp3f78ce->where('customer', $spd1c19c); } elseif ($spdb2534 === 'order_no') { $sp044e8f = $sp0fc69c->post('order_no', ''); if (strlen($sp044e8f) !== 19) { return Response::success(); } $sp3f78ce->where('order_no', $sp044e8f); } elseif ($spdb2534 === 'email') { $spbe38e2 = $sp0fc69c->post('email', ''); if (strlen($spbe38e2) < 6) { return Response::success(); } $sp3f78ce->where('email', $spbe38e2); } else { return Response::fail('请选择查询类型'); } $sp36eb9c = $sp3f78ce->with(array('card_orders.card' => function (Relation $sp3f78ce) { $sp3f78ce->select(array('id', 'card')); }))->orderBy('id', 'DESC')->get(array('id', 'created_at', 'order_no', 'email', 'status', 'count', 'paid')); $sp34f9a8 = ''; return Response::success(array('list' => $sp36eb9c, 'msg' => count($sp36eb9c) ? $sp34f9a8 : '')); } }
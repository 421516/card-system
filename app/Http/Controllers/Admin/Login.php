<?php
namespace App\Http\Controllers\Admin; use App\Library\Helper; use App\Library\Geetest; use Illuminate\Auth\Events\PasswordReset; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Hash; class Login extends Controller { function getVerify() { $sp45a0d1 = array('driver' => 'geetest', 'geetest' => Geetest\API::get()); return Response::success($sp45a0d1); } public function login(Request $sp85ba11) { if ((int) \App\System::_get('vcode_login') === 1) { $sp5780b9 = Geetest\API::verify($sp85ba11->post('gt_c'), $sp85ba11->post('gt_v'), $sp85ba11->post('gt_s')); if (!$sp5780b9) { return Response::fail('滑动验证超时，请返回页面重试。'); } } $spe914c5 = $sp85ba11->input('remember') == 'true'; if (!Auth::attempt(array('email' => $sp85ba11->input('email'), 'password' => $sp85ba11->input('password')), $spe914c5)) { return Response::fail('邮箱或密码错误, 请检查'); } else { $sp81b35f = new \App\Log(); $sp81b35f->user_id = Auth::Id(); $sp81b35f->ip = Helper::getIP(); $sp81b35f->action = \App\Log::ACTION_LOGIN; $sp81b35f->save(); $spb66d5f = Auth::getUser(); $spb66d5f->addHidden(array('created_at', 'updated_at')); return Response::success(array('token' => 'login', 'user' => $spb66d5f->toArray())); } } function info() { $spb66d5f = Auth::getUser(); $spb66d5f->addHidden(array('created_at', 'updated_at')); $spb66d5f->setAttribute('shop_name', \App\System::_get('app_name')); return Response::success(array('token' => 'login', 'user' => $spb66d5f->toArray())); } function logout(Request $sp85ba11) { @Auth::logout(); return Response::success(); } function changePassword(Request $sp85ba11) { $spb66d5f = Auth::getUser(); $sp83c94b = $sp85ba11->post('old', null); $sp75cce5 = $sp85ba11->post('password', null); if (strlen($sp75cce5) < 6 || strlen($sp75cce5) > 32) { return Response::fail('请输入6-32位密码'); } if (!Hash::check($sp83c94b, $spb66d5f->password)) { return Response::fail('旧密码错误，请检查'); } $spb66d5f->password = Hash::make($sp75cce5); $spb66d5f->setRememberToken(str_random(60)); $spb66d5f->saveOrFail(); event(new PasswordReset($spb66d5f)); Auth::guard()->login($spb66d5f); return Response::success(); } }
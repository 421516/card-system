<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { function stat(Request $sp845342) { $sp071519 = (int) $sp845342->input('day', 7); $sp93f3c2 = $sp845342->post('profit') === 'true'; $sp3eff46 = \App\Order::where(function ($sp3eff46) { $sp3eff46->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp071519 + 1))->groupBy('date')->orderBy('date', 'DESC'); if ($sp93f3c2) { $sp3eff46->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`fee`-`system_fee`) as "sum"'); } else { $sp3eff46->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "sum"'); } $spd1b01a = $sp3eff46->get()->toArray(); $spec9b7c = array(); foreach ($spd1b01a as $spb18bb2) { $spec9b7c[$spb18bb2['date']] = array((int) $spb18bb2['count'], (int) $spb18bb2['sum']); } return Response::success($spec9b7c); } public function delete(Request $sp845342) { $sp35201d = $sp845342->post('ids', ''); $spb3ac18 = (int) $sp845342->post('income'); $sp738b57 = (int) $sp845342->post('balance'); if (strlen($sp35201d) < 1) { return Response::forbidden(); } \App\Order::whereIn('id', explode(',', $sp35201d))->chunk(100, function ($sp5da923) use($spb3ac18, $sp738b57) { foreach ($sp5da923 as $spc9222b) { $spc9222b->cards()->detach(); try { if ($spb3ac18) { $spc9222b->fundRecord()->delete(); } if ($sp738b57) { $sp7b4336 = \App\User::lockForUpdate()->firstOrFail(); $sp7b4336->m_all -= $spc9222b->income; $sp7b4336->saveOrFail(); } $spc9222b->delete(); } catch (\Exception $sp805d3e) { } } }); return Response::success(); } function freeze(Request $sp845342) { $sp35201d = $sp845342->post('ids', ''); if (strlen($sp35201d) < 1) { return Response::forbidden(); } $sped2b46 = $sp845342->post('reason'); $sp5da923 = \App\Order::whereIn('id', explode(',', $sp35201d))->where('status', \App\Order::STATUS_SUCCESS)->get(); $spda0d90 = 0; $spa43f66 = 0; foreach ($sp5da923 as $spc9222b) { if (FundHelper::orderFreeze($spc9222b, $sped2b46)) { $spa43f66++; } $spda0d90++; } return Response::success(array($spda0d90, $spa43f66)); } function unfreeze(Request $sp845342) { $sp35201d = $sp845342->post('ids', ''); if (strlen($sp35201d) < 1) { return Response::forbidden(); } $sp5da923 = \App\Order::whereIn('id', explode(',', $sp35201d))->where('status', \App\Order::STATUS_FROZEN)->get(); $spda0d90 = 0; $spa43f66 = 0; $spc30d04 = \App\Order::STATUS_FROZEN; foreach ($sp5da923 as $spc9222b) { if (FundHelper::orderUnfreeze($spc9222b, '后台操作', null, $spc30d04)) { $spa43f66++; } $spda0d90++; } return Response::success(array($spda0d90, $spa43f66, $spc30d04)); } function set_paid(Request $sp845342) { $sp3a2be3 = (int) $sp845342->post('id', ''); if ($sp3a2be3 < 1) { return Response::forbidden(); } $spe14c4a = $sp845342->post('trade_no', ''); if (strlen($spe14c4a) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spc9222b = \App\Order::findOrFail($sp3a2be3); if ($spc9222b->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp4676b9 = 'Admin.SetPaid'; $spae7e02 = $spc9222b->order_no; $sp983f6f = $spc9222b->paid; try { Log::debug($sp4676b9 . " shipOrder start, order_no: {$spae7e02}, amount: {$sp983f6f}, trade_no: {$spe14c4a}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp845342, $spae7e02, $sp983f6f, $spe14c4a, FALSE); Log::debug($sp4676b9 . ' shipOrder end, order_no: ' . $spae7e02); $spa43f66 = true; $sp3792af = '发货成功'; } catch (\Exception $sp805d3e) { $spa43f66 = false; $sp3792af = $sp805d3e->getMessage(); Log::error($sp4676b9 . ' shipOrder Exception: ' . $sp805d3e->getMessage()); } $spc9222b = \App\Order::with(array('card_orders.card' => function (Relation $sp3eff46) { $sp3eff46->select(array('id', 'card')); }))->findOrFail($sp3a2be3); if ($spc9222b->status === \App\Order::STATUS_PAID) { $spa43f66 = false; $sp3792af = '已标记为付款成功, 但是买家库存不足, 发货失败, 请稍后尝试手动发货'; } return Response::success(array('code' => $spa43f66 ? 0 : -1, 'msg' => $sp3792af, 'order' => $spc9222b)); } }
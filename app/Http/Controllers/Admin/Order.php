<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { function stat(Request $sp2d83a6) { $sp08cfa6 = (int) $sp2d83a6->input('day', 7); $sp051a2a = $sp2d83a6->post('profit') === 'true'; $spedc15a = \App\Order::where(function ($spedc15a) { $spedc15a->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp08cfa6 + 1))->groupBy('date')->orderBy('date', 'DESC'); if ($sp051a2a) { $spedc15a->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`fee`-`system_fee`) as "sum"'); } else { $spedc15a->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "sum"'); } $sp8ea0e0 = $spedc15a->get()->toArray(); $sp46dd86 = array(); foreach ($sp8ea0e0 as $sp8f5e71) { $sp46dd86[$sp8f5e71['date']] = array((int) $sp8f5e71['count'], (int) $sp8f5e71['sum']); } return Response::success($sp46dd86); } public function delete(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); $spcd8e7b = (int) $sp2d83a6->post('income'); $sp65dd2e = (int) $sp2d83a6->post('balance'); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } \App\Order::whereIn('id', explode(',', $sp1b3f11))->chunk(100, function ($spfcab19) use($spcd8e7b, $sp65dd2e) { foreach ($spfcab19 as $sp33b59d) { $sp33b59d->cards()->detach(); try { if ($spcd8e7b) { $sp33b59d->fundRecord()->delete(); } if ($sp65dd2e) { $spc6e0c5 = \App\User::lockForUpdate()->firstOrFail(); $spc6e0c5->m_all -= $sp33b59d->income; $spc6e0c5->saveOrFail(); } $sp33b59d->delete(); } catch (\Exception $spfda1c7) { } } }); return Response::success(); } function freeze(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } $spad8bb7 = $sp2d83a6->post('reason'); $spfcab19 = \App\Order::whereIn('id', explode(',', $sp1b3f11))->where('status', \App\Order::STATUS_SUCCESS)->get(); $sp93b866 = 0; $sp8c5745 = 0; foreach ($spfcab19 as $sp33b59d) { if (FundHelper::orderFreeze($sp33b59d, $spad8bb7)) { $sp8c5745++; } $sp93b866++; } return Response::success(array($sp93b866, $sp8c5745)); } function unfreeze(Request $sp2d83a6) { $sp1b3f11 = $sp2d83a6->post('ids', ''); if (strlen($sp1b3f11) < 1) { return Response::forbidden(); } $spfcab19 = \App\Order::whereIn('id', explode(',', $sp1b3f11))->where('status', \App\Order::STATUS_FROZEN)->get(); $sp93b866 = 0; $sp8c5745 = 0; $sped2879 = \App\Order::STATUS_FROZEN; foreach ($spfcab19 as $sp33b59d) { if (FundHelper::orderUnfreeze($sp33b59d, '后台操作', null, $sped2879)) { $sp8c5745++; } $sp93b866++; } return Response::success(array($sp93b866, $sp8c5745, $sped2879)); } function set_paid(Request $sp2d83a6) { $spe6149b = (int) $sp2d83a6->post('id', ''); if ($spe6149b < 1) { return Response::forbidden(); } $sp5b4f94 = $sp2d83a6->post('trade_no', ''); if (strlen($sp5b4f94) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp33b59d = \App\Order::findOrFail($spe6149b); if ($sp33b59d->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp0e0593 = 'Admin.SetPaid'; $sp2e5c77 = $sp33b59d->order_no; $sp90753f = $sp33b59d->paid; try { Log::debug($sp0e0593 . " shipOrder start, order_no: {$sp2e5c77}, amount: {$sp90753f}, trade_no: {$sp5b4f94}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp2d83a6, $sp2e5c77, $sp90753f, $sp5b4f94, FALSE); Log::debug($sp0e0593 . ' shipOrder end, order_no: ' . $sp2e5c77); $sp8c5745 = true; $spcb569a = '发货成功'; } catch (\Exception $spfda1c7) { $sp8c5745 = false; $spcb569a = $spfda1c7->getMessage(); Log::error($sp0e0593 . ' shipOrder Exception: ' . $spfda1c7->getMessage()); } $sp33b59d = \App\Order::with(array('card_orders.card' => function (Relation $spedc15a) { $spedc15a->select(array('id', 'card')); }))->findOrFail($spe6149b); if ($sp33b59d->status === \App\Order::STATUS_PAID) { $sp8c5745 = false; $spcb569a = '已标记为付款成功, 但是买家库存不足, 发货失败, 请稍后尝试手动发货'; } return Response::success(array('code' => $sp8c5745 ? 0 : -1, 'msg' => $spcb569a, 'order' => $sp33b59d)); } }
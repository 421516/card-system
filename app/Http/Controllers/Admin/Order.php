<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { public function delete(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string', 'income' => 'required|integer', 'balance' => 'required|integer')); $sp92c7fe = $sp85ba11->post('ids'); $speedd5c = (int) $sp85ba11->post('income'); $sp412438 = (int) $sp85ba11->post('balance'); \App\Order::whereIn('id', explode(',', $sp92c7fe))->chunk(100, function ($sp41578c) use($speedd5c, $sp412438) { foreach ($sp41578c as $sp63564c) { $sp63564c->cards()->detach(); try { if ($speedd5c) { $sp63564c->fundRecord()->delete(); } if ($sp412438) { $spb66d5f = \App\User::lockForUpdate()->firstOrFail(); $spb66d5f->m_all -= $sp63564c->income; $spb66d5f->saveOrFail(); } $sp63564c->delete(); } catch (\Exception $sp1b3a33) { } } }); return Response::success(); } function freeze(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string')); $sp92c7fe = explode(',', $sp85ba11->post('ids')); $sp7d3a2d = $sp85ba11->post('reason'); $sp03e375 = 0; $sp38d827 = 0; foreach ($sp92c7fe as $sp8bff63) { $sp03e375++; if (FundHelper::orderFreeze($sp8bff63, $sp7d3a2d)) { $sp38d827++; } } return Response::success(array($sp03e375, $sp38d827)); } function unfreeze(Request $sp85ba11) { $this->validate($sp85ba11, array('ids' => 'required|string')); $sp92c7fe = explode(',', $sp85ba11->post('ids')); $sp03e375 = 0; $sp38d827 = 0; $sp5f1718 = \App\Order::STATUS_FROZEN; foreach ($sp92c7fe as $sp8bff63) { $sp03e375++; if (FundHelper::orderUnfreeze($sp8bff63, '后台操作', null, $sp5f1718)) { $sp38d827++; } } return Response::success(array($sp03e375, $sp38d827, $sp5f1718)); } function set_paid(Request $sp85ba11) { $this->validate($sp85ba11, array('id' => 'required|integer')); $spf46c5d = $sp85ba11->post('id', ''); $spe62189 = $sp85ba11->post('trade_no', ''); if (strlen($spe62189) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp63564c = \App\Order::findOrFail($spf46c5d); if ($sp63564c->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $sp1eea05 = 'Admin.SetPaid'; $sp64a7d9 = $sp63564c->order_no; $sp9a8a75 = $sp63564c->paid; try { Log::debug($sp1eea05 . " shipOrder start, order_no: {$sp64a7d9}, amount: {$sp9a8a75}, trade_no: {$spe62189}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($sp85ba11, $sp64a7d9, $sp9a8a75, $spe62189); Log::debug($sp1eea05 . ' shipOrder end, order_no: ' . $sp64a7d9); $sp38d827 = true; $spdfd2b6 = '发货成功'; } catch (\Exception $sp1b3a33) { $sp38d827 = false; $spdfd2b6 = $sp1b3a33->getMessage(); Log::error($sp1eea05 . ' shipOrder Exception: ' . $sp1b3a33->getMessage()); } $sp63564c = \App\Order::with(array('pay' => function (Relation $spfed6d4) { $spfed6d4->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $spfed6d4) { $spfed6d4->select(array('id', 'card')); }))->findOrFail($spf46c5d); if ($sp63564c->status === \App\Order::STATUS_PAID) { $sp38d827 = false; $spdfd2b6 = '已标记为付款成功, 但是买家库存不足, 发货失败, 请稍后尝试手动发货'; } return Response::success(array('code' => $sp38d827 ? 0 : -1, 'msg' => $spdfd2b6, 'order' => $sp63564c)); } }
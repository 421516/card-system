<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { function stat(Request $spdd9f33) { $sp96acf1 = (int) $spdd9f33->input('day', 7); $spbe5e86 = $spdd9f33->post('profit') === 'true'; $sp26c3c2 = \App\Order::where(function ($sp26c3c2) { $sp26c3c2->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp96acf1 + 1))->groupBy('date')->orderBy('date', 'DESC'); if ($spbe5e86) { $sp26c3c2->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`fee`-`system_fee`) as "sum"'); } else { $sp26c3c2->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "sum"'); } $spec1114 = $sp26c3c2->get()->toArray(); $sp123706 = array(); foreach ($spec1114 as $spa41ce4) { $sp123706[$spa41ce4['date']] = array((int) $spa41ce4['count'], (int) $spa41ce4['sum']); } return Response::success($sp123706); } public function delete(Request $spdd9f33) { $sp12219c = $spdd9f33->post('ids', ''); $sp083611 = (int) $spdd9f33->post('income'); $sp1e5de0 = (int) $spdd9f33->post('balance'); if (strlen($sp12219c) < 1) { return Response::forbidden(); } \App\Order::whereIn('id', explode(',', $sp12219c))->chunk(100, function ($sp608098) use($sp083611, $sp1e5de0) { foreach ($sp608098 as $sp804c16) { $sp804c16->cards()->detach(); try { if ($sp083611) { $sp804c16->fundRecord()->delete(); } if ($sp1e5de0) { $spa80d08 = \App\User::lockForUpdate()->firstOrFail(); $spa80d08->m_all -= $sp804c16->income; $spa80d08->saveOrFail(); } $sp804c16->delete(); } catch (\Exception $sp9e5801) { } } }); return Response::success(); } function freeze(Request $spdd9f33) { $sp12219c = $spdd9f33->post('ids', ''); if (strlen($sp12219c) < 1) { return Response::forbidden(); } $sp005364 = $spdd9f33->post('reason'); $sp608098 = \App\Order::whereIn('id', explode(',', $sp12219c))->where('status', \App\Order::STATUS_SUCCESS)->get(); $spbc55c7 = 0; $sp50e592 = 0; foreach ($sp608098 as $sp804c16) { if (FundHelper::orderFreeze($sp804c16, $sp005364)) { $sp50e592++; } $spbc55c7++; } return Response::success(array($spbc55c7, $sp50e592)); } function unfreeze(Request $spdd9f33) { $sp12219c = $spdd9f33->post('ids', ''); if (strlen($sp12219c) < 1) { return Response::forbidden(); } $sp608098 = \App\Order::whereIn('id', explode(',', $sp12219c))->where('status', \App\Order::STATUS_FROZEN)->get(); $spbc55c7 = 0; $sp50e592 = 0; $sp195f26 = \App\Order::STATUS_FROZEN; foreach ($sp608098 as $sp804c16) { if (FundHelper::orderUnfreeze($sp804c16, '后台操作', null, $sp195f26)) { $sp50e592++; } $spbc55c7++; } return Response::success(array($spbc55c7, $sp50e592, $sp195f26)); } function set_paid(Request $spdd9f33) { $sp403bd7 = (int) $spdd9f33->post('id', ''); if ($sp403bd7 < 1) { return Response::forbidden(); } $spb306ab = $spdd9f33->post('trade_no', ''); if (strlen($spb306ab) < 1) { return Response::forbidden('请输入支付系统内单号'); } $sp804c16 = \App\Order::findOrFail($sp403bd7); if ($sp804c16->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spc8fe2b = 'Admin.SetPaid'; $sp2c969b = $sp804c16->order_no; $sp6246a9 = $sp804c16->paid; try { Log::debug($spc8fe2b . " shipOrder start, order_no: {$sp2c969b}, amount: {$sp6246a9}, trade_no: {$spb306ab}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spdd9f33, $sp2c969b, $sp6246a9, $spb306ab, FALSE); Log::debug($spc8fe2b . ' shipOrder end, order_no: ' . $sp2c969b); $sp50e592 = true; $sp55c6db = '发货成功'; } catch (\Exception $sp9e5801) { $sp50e592 = false; $sp55c6db = $sp9e5801->getMessage(); Log::error($spc8fe2b . ' shipOrder Exception: ' . $sp9e5801->getMessage()); } $sp804c16 = \App\Order::with(array('card_orders.card' => function (Relation $sp26c3c2) { $sp26c3c2->select(array('id', 'card')); }))->findOrFail($sp403bd7); if ($sp804c16->status === \App\Order::STATUS_PAID) { $sp50e592 = false; $sp55c6db = '已标记为付款成功, 但是买家库存不足, 发货失败, 请稍后尝试手动发货'; } return Response::success(array('code' => $sp50e592 ? 0 : -1, 'msg' => $sp55c6db, 'order' => $sp804c16)); } }
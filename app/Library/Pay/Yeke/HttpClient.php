<?php
class HttpClient { var $host; var $port; var $path; var $method; var $postdata = ''; var $cookies = array(); var $referer; var $accept = 'text/xml,application/xml,application/xhtml+xml,text/html,text/plain,image/png,image/jpeg,image/gif,*/*'; var $accept_encoding = 'gzip'; var $accept_language = 'en-us'; var $user_agent = 'Incutio HttpClient v0.9'; var $timeout = 20; var $use_gzip = true; var $persist_cookies = true; var $persist_referers = true; var $debug = false; var $handle_redirects = true; var $max_redirects = 5; var $headers_only = false; var $username; var $password; var $status; var $headers = array(); var $content = ''; var $errormsg; var $redirect_count = 0; var $cookie_host = ''; function __construct($spdae3eb, $sp380285 = 80) { $this->host = $spdae3eb; $this->port = $sp380285; } function get($sp4ef8fc, $sp29e0c7 = false) { $this->path = $sp4ef8fc; $this->method = 'GET'; if ($sp29e0c7) { $this->path .= '?' . $this->buildQueryString($sp29e0c7); } return $this->doRequest(); } function post($sp4ef8fc, $sp29e0c7) { $this->path = $sp4ef8fc; $this->method = 'POST'; $this->postdata = $this->buildQueryString($sp29e0c7); return $this->doRequest(); } function buildQueryString($sp29e0c7) { $spc6b75d = ''; if (is_array($sp29e0c7)) { foreach ($sp29e0c7 as $spf74fd0 => $sp5d0add) { if (is_array($sp5d0add)) { foreach ($sp5d0add as $sp55a9df) { $spc6b75d .= urlencode($spf74fd0) . '=' . $sp55a9df . '&'; } } else { $spc6b75d .= urlencode($spf74fd0) . '=' . $sp5d0add . '&'; } } $spc6b75d = substr($spc6b75d, 0, -1); } else { $spc6b75d = $sp29e0c7; } return $spc6b75d; } function doRequest() { if (!($sp9ea283 = @fsockopen($this->host, $this->port, $spd226de, $sp69a9bd, $this->timeout))) { switch ($spd226de) { case -3: $this->errormsg = 'Socket creation failed (-3)'; break; case -4: $this->errormsg = 'DNS lookup failure (-4)'; break; case -5: $this->errormsg = 'Connection refused or timed out (-5)'; break; default: $this->errormsg = 'Connection failed (' . $spd226de . ')'; $this->errormsg .= ' ' . $sp69a9bd; $this->debug($this->errormsg); } return false; } socket_set_timeout($sp9ea283, $this->timeout); $sp85ba11 = $this->buildRequest(); $this->debug('Request', $sp85ba11); fwrite($sp9ea283, $sp85ba11); $this->headers = array(); $this->content = ''; $this->errormsg = ''; $sp203d3a = true; $sp2ecef5 = true; while (!feof($sp9ea283)) { $sp8b5901 = fgets($sp9ea283, 4096); if ($sp2ecef5) { $sp2ecef5 = false; if (!preg_match('/HTTP\\/(\\d\\.\\d)\\s*(\\d+)\\s*(.*)/', $sp8b5901, $sp4ce575)) { $this->errormsg = 'Status code line invalid: ' . htmlentities($sp8b5901); $this->debug($this->errormsg); return false; } $this->status = $sp4ce575[2]; $this->debug(trim($sp8b5901)); continue; } if ($sp203d3a) { if (trim($sp8b5901) == '') { $sp203d3a = false; $this->debug('Received Headers', $this->headers); if ($this->headers_only) { break; } continue; } if (!preg_match('/([^:]+):\\s*(.*)/', $sp8b5901, $sp4ce575)) { continue; } $spf74fd0 = strtolower(trim($sp4ce575[1])); $sp5d0add = trim($sp4ce575[2]); if (isset($this->headers[$spf74fd0])) { if (is_array($this->headers[$spf74fd0])) { $this->headers[$spf74fd0][] = $sp5d0add; } else { $this->headers[$spf74fd0] = array($this->headers[$spf74fd0], $sp5d0add); } } else { $this->headers[$spf74fd0] = $sp5d0add; } continue; } $this->content .= $sp8b5901; } fclose($sp9ea283); if (isset($this->headers['content-encoding']) && $this->headers['content-encoding'] == 'gzip') { $this->debug('Content is gzip encoded, unzipping it'); $this->content = substr($this->content, 10); $this->content = gzinflate($this->content); } if ($this->persist_cookies && isset($this->headers['set-cookie']) && $this->host == $this->cookie_host) { $spece139 = $this->headers['set-cookie']; if (!is_array($spece139)) { $spece139 = array($spece139); } foreach ($spece139 as $spfe6fd1) { if (preg_match('/([^=]+)=([^;]+);/', $spfe6fd1, $sp4ce575)) { $this->cookies[$sp4ce575[1]] = $sp4ce575[2]; } } $this->cookie_host = $this->host; } if ($this->persist_referers) { $this->debug('Persisting referer: ' . $this->getRequestURL()); $this->referer = $this->getRequestURL(); } if ($this->handle_redirects) { if (++$this->redirect_count >= $this->max_redirects) { $this->errormsg = 'Number of redirects exceeded maximum (' . $this->max_redirects . ')'; $this->debug($this->errormsg); $this->redirect_count = 0; return false; } $spde3352 = isset($this->headers['location']) ? $this->headers['location'] : ''; $sp2ca08e = isset($this->headers['uri']) ? $this->headers['uri'] : ''; if ($spde3352 || $sp2ca08e) { $sp11a0e0 = parse_url($spde3352 . $sp2ca08e); return $this->get($sp11a0e0['path']); } } return true; } function buildRequest() { $sp77ba0d = array(); $sp77ba0d[] = "{$this->method} {$this->path} HTTP/1.0"; $sp77ba0d[] = "Host: {$this->host}"; $sp77ba0d[] = "User-Agent: {$this->user_agent}"; $sp77ba0d[] = "Accept: {$this->accept}"; if ($this->use_gzip) { $sp77ba0d[] = "Accept-encoding: {$this->accept_encoding}"; } $sp77ba0d[] = "Accept-language: {$this->accept_language}"; if ($this->referer) { $sp77ba0d[] = "Referer: {$this->referer}"; } if ($this->cookies) { $spfe6fd1 = 'Cookie: '; foreach ($this->cookies as $spf74fd0 => $sp67821d) { $spfe6fd1 .= "{$spf74fd0}={$sp67821d}; "; } $sp77ba0d[] = $spfe6fd1; } if ($this->username && $this->password) { $sp77ba0d[] = 'Authorization: BASIC ' . base64_encode($this->username . ':' . $this->password); } if ($this->postdata) { $sp77ba0d[] = 'Content-Type: application/x-www-form-urlencoded'; $sp77ba0d[] = 'Content-Length: ' . strlen($this->postdata); } $sp85ba11 = implode('
', $sp77ba0d) . '

' . $this->postdata; return $sp85ba11; } function getStatus() { return $this->status; } function getContent() { return $this->content; } function getHeaders() { return $this->headers; } function getHeader($sp08e8a9) { $sp08e8a9 = strtolower($sp08e8a9); if (isset($this->headers[$sp08e8a9])) { return $this->headers[$sp08e8a9]; } else { return false; } } function getError() { return $this->errormsg; } function getCookies() { return $this->cookies; } function getRequestURL() { $sp11a0e0 = 'http://' . $this->host; if ($this->port != 80) { $sp11a0e0 .= ':' . $this->port; } $sp11a0e0 .= $this->path; return $sp11a0e0; } function setUserAgent($sp234c2f) { $this->user_agent = $sp234c2f; } function setAuthorization($sp96643e, $sp75cce5) { $this->username = $sp96643e; $this->password = $sp75cce5; } function setCookies($sp579bf0) { $this->cookies = $sp579bf0; } function useGzip($sp7a8de5) { $this->use_gzip = $sp7a8de5; } function setPersistCookies($sp7a8de5) { $this->persist_cookies = $sp7a8de5; } function setPersistReferers($sp7a8de5) { $this->persist_referers = $sp7a8de5; } function setHandleRedirects($sp7a8de5) { $this->handle_redirects = $sp7a8de5; } function setMaxRedirects($spbced21) { $this->max_redirects = $spbced21; } function setHeadersOnly($sp7a8de5) { $this->headers_only = $sp7a8de5; } function setDebug($sp7a8de5) { $this->debug = $sp7a8de5; } function quickGet($sp11a0e0) { $sp48405e = parse_url($sp11a0e0); $spdae3eb = $sp48405e['host']; $sp380285 = isset($sp48405e['port']) ? $sp48405e['port'] : 80; $sp4ef8fc = isset($sp48405e['path']) ? $sp48405e['path'] : '/'; if (isset($sp48405e['query'])) { $sp4ef8fc .= '?' . $sp48405e['query']; } $spcb0c0f = new HttpClient($spdae3eb, $sp380285); if (!$spcb0c0f->get($sp4ef8fc)) { return false; } else { return $spcb0c0f->getContent(); } } static function quickPost($sp11a0e0, $sp29e0c7) { $sp48405e = parse_url($sp11a0e0); $spdae3eb = $sp48405e['host']; $sp380285 = isset($sp48405e['port']) ? $sp48405e['port'] : 80; $sp4ef8fc = isset($sp48405e['path']) ? $sp48405e['path'] : '/'; $spcb0c0f = new HttpClient($spdae3eb, $sp380285); if (!$spcb0c0f->post($sp4ef8fc, $sp29e0c7)) { return false; } else { return $spcb0c0f->getContent(); } } function debug($spdfd2b6, $sp8b6b1c = false) { if ($this->debug) { print '<div style="border: 1px solid red; padding: 0.5em; margin: 0.5em;"><strong>HttpClient Debug:</strong> ' . $spdfd2b6; if ($sp8b6b1c) { ob_start(); print_r($sp8b6b1c); $spd64208 = htmlentities(ob_get_contents()); ob_end_clean(); print '<pre>' . $spd64208 . '</pre>'; } print '</div>'; } } }
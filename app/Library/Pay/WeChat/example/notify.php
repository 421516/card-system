<?php
ini_set('date.timezone', 'Asia/Shanghai'); error_reporting(E_ERROR); require_once '../lib/WxPay.Api.php'; require_once '../lib/WxPay.Notify.php'; require_once 'log.php'; $sp0d13f3 = new CLogFileHandler('../logs/' . date('Y-m-d') . '.log'); $sp1ac1a0 = Log::Init($sp0d13f3, 15); class PayNotifyCallBack extends WxPayNotify { public function Queryorder($spb3784c) { $sp51043b = new WxPayOrderQuery(); $sp51043b->SetTransaction_id($spb3784c); $spbcb528 = WxPayApi::orderQuery($sp51043b); Log::DEBUG('query:' . json_encode($spbcb528)); if (array_key_exists('return_code', $spbcb528) && array_key_exists('result_code', $spbcb528) && $spbcb528['return_code'] == 'SUCCESS' && $spbcb528['result_code'] == 'SUCCESS') { return true; } return false; } public function NotifyProcess($sp1835de, &$spbfa8f4) { Log::DEBUG('call back:' . json_encode($sp1835de)); $sp04deca = array(); if (!array_key_exists('transaction_id', $sp1835de)) { $spbfa8f4 = '输入参数不正确'; return false; } if (!$this->Queryorder($sp1835de['transaction_id'])) { $spbfa8f4 = '订单查询失败'; return false; } return true; } } Log::DEBUG('begin notify'); $sp8ada1b = new PayNotifyCallBack(); $sp8ada1b->Handle(false);
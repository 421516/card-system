<?php
ini_set('date.timezone', 'Asia/Shanghai'); error_reporting(E_ERROR); require_once '../lib/WxPay.Api.php'; require_once '../lib/WxPay.Notify.php'; require_once 'log.php'; $sp96c2fa = new CLogFileHandler('../logs/' . date('Y-m-d') . '.log'); $spa973ce = Log::Init($sp96c2fa, 15); class PayNotifyCallBack extends WxPayNotify { public function Queryorder($spafff8a) { $sp11f4cb = new WxPayOrderQuery(); $sp11f4cb->SetTransaction_id($spafff8a); $spcc4042 = WxPayApi::orderQuery($sp11f4cb); Log::DEBUG('query:' . json_encode($spcc4042)); if (array_key_exists('return_code', $spcc4042) && array_key_exists('result_code', $spcc4042) && $spcc4042['return_code'] == 'SUCCESS' && $spcc4042['result_code'] == 'SUCCESS') { return true; } return false; } public function NotifyProcess($sp38c5ae, &$sp3792af) { Log::DEBUG('call back:' . json_encode($sp38c5ae)); $sp5bc4ae = array(); if (!array_key_exists('transaction_id', $sp38c5ae)) { $sp3792af = '输入参数不正确'; return false; } if (!$this->Queryorder($sp38c5ae['transaction_id'])) { $sp3792af = '订单查询失败'; return false; } return true; } } Log::DEBUG('begin notify'); $spe754f9 = new PayNotifyCallBack(); $spe754f9->Handle(false);
<?php
ini_set('date.timezone', 'Asia/Shanghai'); error_reporting(E_ERROR); require_once '../lib/WxPay.Api.php'; require_once '../lib/WxPay.Notify.php'; require_once 'log.php'; $sp980d2a = new CLogFileHandler('../logs/' . date('Y-m-d') . '.log'); $spa1e99a = Log::Init($sp980d2a, 15); class PayNotifyCallBack extends WxPayNotify { public function Queryorder($sp41da3e) { $sp02dbf9 = new WxPayOrderQuery(); $sp02dbf9->SetTransaction_id($sp41da3e); $spc4a98e = WxPayApi::orderQuery($sp02dbf9); Log::DEBUG('query:' . json_encode($spc4a98e)); if (array_key_exists('return_code', $spc4a98e) && array_key_exists('result_code', $spc4a98e) && $spc4a98e['return_code'] == 'SUCCESS' && $spc4a98e['result_code'] == 'SUCCESS') { return true; } return false; } public function NotifyProcess($sp151100, &$sp55c6db) { Log::DEBUG('call back:' . json_encode($sp151100)); $spd3a122 = array(); if (!array_key_exists('transaction_id', $sp151100)) { $sp55c6db = '输入参数不正确'; return false; } if (!$this->Queryorder($sp151100['transaction_id'])) { $sp55c6db = '订单查询失败'; return false; } return true; } } Log::DEBUG('begin notify'); $sp572401 = new PayNotifyCallBack(); $sp572401->Handle(false);
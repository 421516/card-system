<?php
namespace App\Library\Pay\HLPay; use App\Library\Pay\ApiInterface; class Api implements ApiInterface { private $url_notify = ''; private $url_return = ''; public function __construct($spf46c5d) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $spf46c5d; $this->url_return = SYS_URL . '/pay/return/' . $spf46c5d; } function goPay($spa9e109, $sp206d07, $sp89af34, $sp92f0c1, $sp28f24f) { $sp9a8a75 = sprintf('%.2f', $sp28f24f / 100); $sp651d92 = $spa9e109['payway']; switch ($sp651d92) { case '901': case '902': $sp266966 = 'wechat'; break; case '903': case '904': $sp266966 = 'aliqr'; break; default: throw new \Exception('支付渠道错误'); } $sp804d12 = SYS_URL . '/qrcode/pay/' . $sp206d07 . '/query'; $sp20678b = array('pay_memberid' => $spa9e109['id'], 'pay_orderid' => $sp206d07, 'pay_applydate' => date('Y-m-d H:i:s'), 'pay_bankcode' => $sp651d92, 'pay_notifyurl' => $this->url_notify, 'pay_callbackurl' => $sp804d12, 'pay_amount' => $sp9a8a75, 'pay_productname' => $sp89af34); $spf7cec4 = $this->getPostData($sp20678b, $spa9e109['key']); $sp177bbf = $this->curl_post('http://henglpay.com/Pay_Index.html', $spf7cec4); $sp5780b9 = @json_decode($sp177bbf, true); if (!$sp5780b9 || !isset($sp5780b9['status'])) { \Log::error('Pay.HLPay.goPay.order Error#1: ' . $sp177bbf); throw new \Exception('获取付款信息超时, 请刷新重试'); } if ($sp5780b9['status'] !== '200' || !isset($sp5780b9['data']['QRCodeUrl'])) { \Log::error('Pay.HLPay.goPay.order Error#2: ' . $sp177bbf); throw new \Exception('获取付款信息失败, 请联系客服反馈'); } if (@$sp5780b9['data']['type'] === 'qrcode') { header('location: /qrcode/pay/' . $sp206d07 . '/' . strtolower($sp266966) . '?url=' . urlencode($sp5780b9['data']['QRCodeUrl'])); } elseif ($sp5780b9['type'] === 'page') { echo $sp5780b9['data']['QRCodeUrl']; } elseif ($sp5780b9['type'] === 'jsapi') { var_dump('未启用此方式: '); var_dump($sp5780b9['data']['QRCodeUrl']); } else { \Log::error('Pay.HLPay.goPay.order Error#3: ' . $sp177bbf); throw new \Exception('获取付款信息失败, 请联系客服反馈'); } die; } function verify($spa9e109, $spf8927a) { $spf53f48 = isset($spa9e109['isNotify']) && $spa9e109['isNotify']; if ($spf53f48) { $spa8d2fc = array('memberid', 'orderid', 'transaction_id', 'amount', 'datetime', 'returncode'); $sp20678b = array(); foreach ($spa8d2fc as $sp3305d3) { $sp20678b[$sp3305d3] = $_POST[$sp3305d3]; } if ($this->getSign($sp20678b, $spa9e109['key']) !== $_POST['sign']) { \Log::error('Pay.HLPay.verify, sign error $post:' . json_encode($_POST)); echo 'sign error'; return false; } $sp64a7d9 = $_POST['orderid']; $sp3bdfdc = $_POST['transaction_id']; $spf8927a($sp64a7d9, (int) round($_POST['amount'] * 100), $sp3bdfdc); echo 'ok'; return true; } else { return false; } } private function getPostData($sp20678b, $spf74fd0) { ksort($sp20678b); $sp24a8f4 = array(); foreach ($sp20678b as $sp614732 => $sp154f6e) { if ($sp154f6e !== '' && !is_array($sp154f6e)) { array_push($sp24a8f4, "{$sp614732}={$sp154f6e}"); } } $sp20678b = implode('&', $sp24a8f4); $sp043800 = $sp20678b . '&key=' . $spf74fd0; return $sp20678b . '&pay_md5sign=' . strtoupper(md5($sp043800)); } private function getSign($sp20678b, $spf74fd0) { ksort($sp20678b); $sp24a8f4 = array(); foreach ($sp20678b as $sp614732 => $sp154f6e) { if ($sp154f6e !== '' && !is_array($sp154f6e)) { array_push($sp24a8f4, "{$sp614732}={$sp154f6e}"); } } $sp20678b = implode('&', $sp24a8f4); $sp043800 = $sp20678b . '&key=' . $spf74fd0; return strtoupper(md5($sp043800)); } private function curl_post($sp11a0e0, $spf7cec4 = '') { $sp77ba0d['Accept'] = '*/*'; $sp77ba0d['Referer'] = $sp11a0e0; $sp77ba0d['Content-Type'] = 'application/x-www-form-urlencoded'; $sp2a6e46 = array(); foreach ($sp77ba0d as $sp9f0fbb => $sp9f6c87) { $sp2a6e46[] = $sp9f0fbb . ': ' . $sp9f6c87; } $sp082589 = curl_init(); curl_setopt($sp082589, CURLOPT_URL, $sp11a0e0); curl_setopt($sp082589, CURLOPT_POST, 1); curl_setopt($sp082589, CURLOPT_POSTFIELDS, $spf7cec4); curl_setopt($sp082589, CURLOPT_TIMEOUT, 10); curl_setopt($sp082589, CURLOPT_CONNECTTIMEOUT, 10); curl_setopt($sp082589, CURLOPT_RETURNTRANSFER, 1); curl_setopt($sp082589, CURLOPT_HEADER, 1); curl_setopt($sp082589, CURLOPT_SSL_VERIFYHOST, 0); curl_setopt($sp082589, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($sp082589, CURLOPT_HTTPHEADER, $sp2a6e46); $sp0e2174 = curl_exec($sp082589); $sp71924e = curl_getinfo($sp082589, CURLINFO_HEADER_SIZE); $sp92f0c1 = substr($sp0e2174, $sp71924e); curl_close($sp082589); return $sp92f0c1; } }
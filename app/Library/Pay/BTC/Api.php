<?php
namespace App\Library\Pay\BTC; use App\Library\CurlRequest; use App\Library\Pay\ApiInterface; use Illuminate\Support\Facades\Log; class Api implements ApiInterface { private $url_notify = ''; private $url_return = ''; public function __construct($spf46c5d) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $spf46c5d; $this->url_return = SYS_URL . '/pay/return/' . $spf46c5d; } function goPay($spa9e109, $sp206d07, $sp89af34, $sp92f0c1, $sp28f24f) { $sp588ca1 = CurlRequest::get('https://api.blockchain.info/tobtc?currency=CNY&value=' . sprintf('%.2f', $sp28f24f / 100)); if (!$sp588ca1) { Log::error('Pay.BTC.goPay, get price error:' . @$sp588ca1); throw new \Exception('获取BTC价格失败，请联系客服'); } $spdc9118 = CurlRequest::get('https://api.blockchain.info/v2/receive?xpub=' . $spa9e109['xpub'] . '&callback=' . urlencode($this->url_notify . '?secret=' . $spa9e109['secret']) . '&key=' . $spa9e109['key']); $spf6ec47 = @json_decode($spdc9118, true); if (!$spf6ec47 || !isset($spf6ec47['address'])) { if ($spf6ec47['description'] === 'Gap between last used address and next address too large. This might make funds inaccessible.') { throw new \Exception('钱包地址到达限制, 请等待之前的用户完成付款'); } Log::error('Pay.BTC.goPay, get address error:' . @$spdc9118); throw new \Exception('获取BTC地址失败，请联系客服'); } $sp077c0c = 'bitcoin:' . $spf6ec47['address'] . '?amount=' . $sp588ca1; if (\App\Order::wherePayTradeNo($sp077c0c)->exists()) { throw new \Exception('支付失败, 当前钱包地址重复'); } \App\Order::whereOrderNo($sp206d07)->update(array('pay_trade_no' => $sp077c0c)); header('location: /qrcode/pay/' . $sp206d07 . '/btc?url=' . urlencode(json_encode(array('address' => $spf6ec47['address'], 'amount' => $sp588ca1)))); die; } function verify($spa9e109, $spf8927a) { $spf53f48 = isset($spa9e109['isNotify']) && $spa9e109['isNotify']; if ($spf53f48) { if (@$_GET['secret'] !== $spa9e109['secret']) { echo 'error'; return false; } if (isset($_GET['confirmations'])) { $spc054c2 = $_GET['address']; $sp077c0c = 'bitcoin:' . $spc054c2 . '?amount=' . rtrim(rtrim(sprintf('%.8f', $_GET['value'] / 100000000.0), '0'), '.'); $sp63564c = \App\Order::wherePayTradeNo($sp077c0c)->first(); if (!$sp63564c) { echo 'error'; Log::error('Pay.BTC.verify, cannot find order:' . json_encode(array('url' => $sp077c0c, 'params' => $_GET))); return false; } $sp3bdfdc = $sp077c0c; $spf8927a($sp63564c->order_no, $sp63564c->paid, $sp3bdfdc); } echo '*ok*'; return true; } else { return false; } } }
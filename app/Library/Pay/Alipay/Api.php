<?php
namespace App\Library\Pay\Alipay; use App\Library\Pay\ApiInterface; class Api implements ApiInterface { private $url_notify = ''; private $url_return = ''; private $pay_id; public function __construct($sp3a2be3) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $sp3a2be3; $this->url_return = SYS_URL . '/pay/return/' . $sp3a2be3; $this->pay_id = $sp3a2be3; } function goPay($sp45b2a0, $spd184e1, $sp873da9, $sp33eb4d, $sp521b2c) { $sp983f6f = sprintf('%.2f', $sp521b2c / 100); $sp751298 = $this->buildAliConfig($sp45b2a0); require_once __DIR__ . '/lib/alipay_submit.class.php'; $sp751298['notify_url'] = $this->url_notify; $sp751298['return_url'] = $this->url_return . '/' . $spd184e1; $sp64a5c9 = array('service' => $sp751298['service'], 'partner' => $sp751298['partner'], 'seller_id' => $sp751298['seller_id'], 'payment_type' => $sp751298['payment_type'], 'notify_url' => $sp751298['notify_url'], 'return_url' => $sp751298['return_url'], 'out_trade_no' => $spd184e1, 'total_fee' => $sp983f6f, 'subject' => $sp873da9, 'body' => $sp33eb4d, '_input_charset' => 'utf-8', 'anti_phishing_key' => $sp751298['anti_phishing_key'], 'exter_invoke_ip' => $sp751298['exter_invoke_ip']); $spe0102e = new \AlipaySubmit($sp751298); $sp238394 = $spe0102e->buildRequestForm($sp64a5c9, 'get', '确认'); echo '<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>正在跳转到支付渠道...</title></head><body><h1 style="text-align: center">正在跳转到支付渠道...</h1>'; echo $sp238394; } function verify($sp45b2a0, $spf85c0e) { $sp5c8ce2 = isset($sp45b2a0['isNotify']) && $sp45b2a0['isNotify']; $sp751298 = $this->buildAliConfig($sp45b2a0); require __DIR__ . '/lib/alipay_notify.class.php'; $spb6a386 = new \AlipayNotify($sp751298); if ($sp5c8ce2) { $spcc4042 = $spb6a386->verifyNotify(); } else { $spcc4042 = $spb6a386->verifyReturn(); } if ($spcc4042) { $spd184e1 = $_REQUEST['out_trade_no']; $spe14c4a = $_REQUEST['trade_no']; $sp4cfec1 = $_REQUEST['trade_status']; $sp07a665 = (int) ($_REQUEST['total_fee'] * 100); if ($sp4cfec1 == 'TRADE_FINISHED' || $sp4cfec1 == 'TRADE_SUCCESS') { $spf85c0e($spd184e1, $sp07a665, $spe14c4a); } if ($sp5c8ce2) { echo 'success'; } return true; } else { if ($sp5c8ce2) { echo 'fail'; $sp4676b9 = 'payNotify pay_id: ' . $this->pay_id . ',Alipay'; } else { $sp4676b9 = 'payReturn pay_id: ' . $this->pay_id . ',Alipay'; } \Log::error($sp4676b9 . ' Alipay.Api.verify failed'); return false; } } private function buildAliConfig($sp45b2a0) { return array('partner' => $sp45b2a0['partner'], 'seller_id' => $sp45b2a0['partner'], 'key' => $sp45b2a0['key'], 'sign_type' => 'MD5', 'input_charset' => 'utf-8', 'cacert' => __DIR__ . DIRECTORY_SEPARATOR . 'cacert.pem', 'transport' => 'https', 'payment_type' => '1', 'service' => 'create_direct_pay_by_user', 'anti_phishing_key' => '', 'exter_invoke_ip' => ''); } }
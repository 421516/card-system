<?php
namespace App\Library\Pay\Alipay; use App\Library\Pay\ApiInterface; class Api implements ApiInterface { private $url_notify = ''; private $url_return = ''; private $pay_id; public function __construct($spfc3b4d) { $this->url_notify = SYS_URL_API . '/pay/notify/' . $spfc3b4d; $this->url_return = SYS_URL . '/pay/return/' . $spfc3b4d; $this->pay_id = $spfc3b4d; } function goPay($sp8abf69, $spbd054b, $sp547016, $speb838e, $sp6c12fc) { $spbd56f5 = sprintf('%.2f', $sp6c12fc / 100); $spe325b5 = $this->buildAliConfig($sp8abf69); require_once __DIR__ . '/lib/alipay_submit.class.php'; $spe325b5['notify_url'] = $this->url_notify; $spe325b5['return_url'] = $this->url_return . '/' . $spbd054b; $spd257c9 = array('service' => $spe325b5['service'], 'partner' => $spe325b5['partner'], 'seller_id' => $spe325b5['seller_id'], 'payment_type' => $spe325b5['payment_type'], 'notify_url' => $spe325b5['notify_url'], 'return_url' => $spe325b5['return_url'], 'out_trade_no' => $spbd054b, 'total_fee' => $spbd56f5, 'subject' => $sp547016, 'body' => $speb838e, '_input_charset' => 'utf-8', 'anti_phishing_key' => $spe325b5['anti_phishing_key'], 'exter_invoke_ip' => $spe325b5['exter_invoke_ip']); $spa00088 = new \AlipaySubmit($spe325b5); $sp3dff58 = $spa00088->buildRequestForm($spd257c9, 'get', '确认'); echo '<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><title>正在跳转到支付渠道...</title></head><body><h1 style="text-align: center">正在跳转到支付渠道...</h1>'; echo $sp3dff58; } function verify($sp8abf69, $spc98f69) { $spdcb97c = isset($sp8abf69['isNotify']) && $sp8abf69['isNotify']; $spe325b5 = $this->buildAliConfig($sp8abf69); require __DIR__ . '/lib/alipay_notify.class.php'; $sp0e767a = new \AlipayNotify($spe325b5); if ($spdcb97c) { $spbcb528 = $sp0e767a->verifyNotify(); } else { $spbcb528 = $sp0e767a->verifyReturn(); } if ($spbcb528) { $spbd054b = $_REQUEST['out_trade_no']; $sp2296f4 = $_REQUEST['trade_no']; $sp899f8d = $_REQUEST['trade_status']; $sp0c4618 = (int) ($_REQUEST['total_fee'] * 100); if ($sp899f8d == 'TRADE_FINISHED' || $sp899f8d == 'TRADE_SUCCESS') { $spc98f69($spbd054b, $sp0c4618, $sp2296f4); } if ($spdcb97c) { echo 'success'; } return true; } else { if ($spdcb97c) { echo 'fail'; $spe770c0 = 'payNotify pay_id: ' . $this->pay_id . ',Alipay'; } else { $spe770c0 = 'payReturn pay_id: ' . $this->pay_id . ',Alipay'; } \Log::error($spe770c0 . ' Alipay.Api.verify failed'); return false; } } private function buildAliConfig($sp8abf69) { return array('partner' => $sp8abf69['partner'], 'seller_id' => $sp8abf69['partner'], 'key' => $sp8abf69['key'], 'sign_type' => 'MD5', 'input_charset' => 'utf-8', 'cacert' => __DIR__ . DIRECTORY_SEPARATOR . 'cacert.pem', 'transport' => 'https', 'payment_type' => '1', 'service' => 'create_direct_pay_by_user', 'anti_phishing_key' => '', 'exter_invoke_ip' => ''); } }
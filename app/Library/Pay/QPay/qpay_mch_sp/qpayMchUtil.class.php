<?php
require_once 'qpayMch.config.php'; class QpayMchUtil { public static function createNoncestr($sp287970 = 32) { $sp60da66 = 'abcdefghijklmnopqrstuvwxyz0123456789'; $spfcf742 = ''; for ($sp836a84 = 0; $sp836a84 < $sp287970; $sp836a84++) { $spfcf742 .= substr($sp60da66, mt_rand(0, strlen($sp60da66) - 1), 1); } return $spfcf742; } public static function buildQueryStr($spf44b7f) { $sp0b4d77 = array(); foreach ($spf44b7f as $sp1e32fe => $sp398610) { if ($sp1e32fe != 'sign' && $sp398610 != '' && !is_array($sp398610)) { array_push($sp0b4d77, "{$sp1e32fe}={$sp398610}"); } } return implode('&', $sp0b4d77); } public static function getSign($spf44b7f, $spd657c4) { ksort($spf44b7f); $spef90ae = QpayMchUtil::buildQueryStr($spf44b7f); $spef90ae = $spef90ae . '&key=' . $spd657c4; $spef90ae = md5($spef90ae); $sp885ea3 = strtoupper($spef90ae); return $sp885ea3; } public static function arrayToXml($spdb28ef) { $sp9ae54f = '<xml>'; foreach ($spdb28ef as $spa8a71b => $sp3172ba) { if (is_numeric($sp3172ba)) { $sp9ae54f .= "<{$spa8a71b}>{$sp3172ba}</{$spa8a71b}>"; } else { $sp9ae54f .= "<{$spa8a71b}><![CDATA[{$sp3172ba}]]></{$spa8a71b}>"; } } $sp9ae54f .= '</xml>'; return $sp9ae54f; } public static function xmlToArray($sp9ae54f) { $spdb28ef = json_decode(json_encode(simplexml_load_string($sp9ae54f, 'SimpleXMLElement', LIBXML_NOCDATA)), true); return $spdb28ef; } public static function reqByCurlNormalPost($spf44b7f, $sp7a0d0d, $spb1eeef = 10) { return QpayMchUtil::_reqByCurl($spf44b7f, $sp7a0d0d, $spb1eeef, false); } public static function reqByCurlSSLPost($spf44b7f, $sp7a0d0d, $spb1eeef = 10) { return QpayMchUtil::_reqByCurl($spf44b7f, $sp7a0d0d, $spb1eeef, true); } private static function _reqByCurl($spf44b7f, $sp7a0d0d, $spb1eeef = 10, $spf71495 = false) { $spb70507 = curl_init(); curl_setopt($spb70507, CURLOPT_URL, $sp7a0d0d); curl_setopt($spb70507, CURLOPT_TIMEOUT, $spb1eeef); curl_setopt($spb70507, CURLOPT_SSL_VERIFYPEER, FALSE); curl_setopt($spb70507, CURLOPT_SSL_VERIFYHOST, FALSE); curl_setopt($spb70507, CURLOPT_HEADER, FALSE); curl_setopt($spb70507, CURLOPT_RETURNTRANSFER, TRUE); if (isset($spf71495) && $spf71495 != false) { curl_setopt($spb70507, CURLOPT_SSLCERTTYPE, 'PEM'); curl_setopt($spb70507, CURLOPT_SSLCERT, QpayMchConf::CERT_FILE_PATH); curl_setopt($spb70507, CURLOPT_SSLKEYTYPE, 'PEM'); curl_setopt($spb70507, CURLOPT_SSLKEY, QpayMchConf::KEY_FILE_PATH); } curl_setopt($spb70507, CURLOPT_POST, true); curl_setopt($spb70507, CURLOPT_POSTFIELDS, $spf44b7f); $spec9b7c = curl_exec($spb70507); if ($spec9b7c) { curl_close($spb70507); return $spec9b7c; } else { $spe85819 = curl_errno($spb70507); print_r($spe85819); curl_close($spb70507); return false; } } }
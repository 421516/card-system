<?php
require_once 'qpayMch.config.php'; class QpayMchUtil { public static function createNoncestr($spc66ffb = 32) { $sp894b9d = 'abcdefghijklmnopqrstuvwxyz0123456789'; $spc940b6 = ''; for ($sp747316 = 0; $sp747316 < $spc66ffb; $sp747316++) { $spc940b6 .= substr($sp894b9d, mt_rand(0, strlen($sp894b9d) - 1), 1); } return $spc940b6; } public static function buildQueryStr($sp20678b) { $sp5443db = array(); foreach ($sp20678b as $sp614732 => $sp154f6e) { if ($sp614732 != 'sign' && $sp154f6e != '' && !is_array($sp154f6e)) { array_push($sp5443db, "{$sp614732}={$sp154f6e}"); } } return implode('&', $sp5443db); } public static function getSign($sp20678b, $sp473b6b) { ksort($sp20678b); $sp4a1560 = QpayMchUtil::buildQueryStr($sp20678b); $sp4a1560 = $sp4a1560 . '&key=' . $sp473b6b; $sp4a1560 = md5($sp4a1560); $sp9c9a88 = strtoupper($sp4a1560); return $sp9c9a88; } public static function arrayToXml($sp6b9ede) { $sp2b62c7 = '<xml>'; foreach ($sp6b9ede as $spf74fd0 => $sp5d0add) { if (is_numeric($sp5d0add)) { $sp2b62c7 .= "<{$spf74fd0}>{$sp5d0add}</{$spf74fd0}>"; } else { $sp2b62c7 .= "<{$spf74fd0}><![CDATA[{$sp5d0add}]]></{$spf74fd0}>"; } } $sp2b62c7 .= '</xml>'; return $sp2b62c7; } public static function xmlToArray($sp2b62c7) { $sp6b9ede = json_decode(json_encode(simplexml_load_string($sp2b62c7, 'SimpleXMLElement', LIBXML_NOCDATA)), true); return $sp6b9ede; } public static function reqByCurlNormalPost($sp20678b, $sp11a0e0, $sp9532e1 = 10) { return QpayMchUtil::_reqByCurl($sp20678b, $sp11a0e0, $sp9532e1, false); } public static function reqByCurlSSLPost($sp20678b, $sp11a0e0, $sp9532e1 = 10) { return QpayMchUtil::_reqByCurl($sp20678b, $sp11a0e0, $sp9532e1, true); } private static function _reqByCurl($sp20678b, $sp11a0e0, $sp9532e1 = 10, $sp0f3425 = false) { $sp082589 = curl_init(); curl_setopt($sp082589, CURLOPT_URL, $sp11a0e0); curl_setopt($sp082589, CURLOPT_TIMEOUT, $sp9532e1); curl_setopt($sp082589, CURLOPT_SSL_VERIFYPEER, FALSE); curl_setopt($sp082589, CURLOPT_SSL_VERIFYHOST, FALSE); curl_setopt($sp082589, CURLOPT_HEADER, FALSE); curl_setopt($sp082589, CURLOPT_RETURNTRANSFER, TRUE); if (isset($sp0f3425) && $sp0f3425 != false) { curl_setopt($sp082589, CURLOPT_SSLCERTTYPE, 'PEM'); curl_setopt($sp082589, CURLOPT_SSLCERT, QpayMchConf::CERT_FILE_PATH); curl_setopt($sp082589, CURLOPT_SSLKEYTYPE, 'PEM'); curl_setopt($sp082589, CURLOPT_SSLKEY, QpayMchConf::KEY_FILE_PATH); } curl_setopt($sp082589, CURLOPT_POST, true); curl_setopt($sp082589, CURLOPT_POSTFIELDS, $sp20678b); $sp5780b9 = curl_exec($sp082589); if ($sp5780b9) { curl_close($sp082589); return $sp5780b9; } else { $sp4b2142 = curl_errno($sp082589); print_r($sp4b2142); curl_close($sp082589); return false; } } }